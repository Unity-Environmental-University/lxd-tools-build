/*! For license information please see account.js.LICENSE.txt */
(()=>{var t={4148:(t,e,r)=>{"use strict";var n=r(5606);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===o(i)?i:String(i)),n)}var i}function a(t,e,r){return e&&i(t.prototype,e),r&&i(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var s,c,l=r(9597).codes,u=l.ERR_AMBIGUOUS_ARGUMENT,f=l.ERR_INVALID_ARG_TYPE,p=l.ERR_INVALID_ARG_VALUE,y=l.ERR_INVALID_RETURN_VALUE,g=l.ERR_MISSING_ARGS,d=r(3918),m=r(537).inspect,h=r(537).types,b=h.isPromise,v=h.isRegExp,A=r(1514)(),w=r(9394)(),x=r(8075)("RegExp.prototype.test");function j(){var t=r(2299);s=t.isDeepEqual,c=t.isDeepStrictEqual}new Map;var S=!1,O=t.exports=T,P={};function E(t){if(t.message instanceof Error)throw t.message;throw new d(t)}function _(t,e,r,n){if(!r){var o=!1;if(0===e)o=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var i=new d({actual:r,expected:!0,message:n,operator:"==",stackStartFn:t});throw i.generatedMessage=o,i}}function T(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];_.apply(void 0,[T,e.length].concat(e))}O.fail=function t(e,r,o,i,a){var s,c=arguments.length;if(0===c?s="Failed":1===c?(o=e,e=void 0):(!1===S&&(S=!0,(n.emitWarning?n.emitWarning:console.warn.bind(console))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")),2===c&&(i="!=")),o instanceof Error)throw o;var l={actual:e,expected:r,operator:void 0===i?"fail":i,stackStartFn:a||t};void 0!==o&&(l.message=o);var u=new d(l);throw s&&(u.message=s,u.generatedMessage=!0),u},O.AssertionError=d,O.ok=T,O.equal=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");e!=r&&E({actual:e,expected:r,message:n,operator:"==",stackStartFn:t})},O.notEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");e==r&&E({actual:e,expected:r,message:n,operator:"!=",stackStartFn:t})},O.deepEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),s(e,r)||E({actual:e,expected:r,message:n,operator:"deepEqual",stackStartFn:t})},O.notDeepEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),s(e,r)&&E({actual:e,expected:r,message:n,operator:"notDeepEqual",stackStartFn:t})},O.deepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),c(e,r)||E({actual:e,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:t})},O.notDeepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),c(e,r)&&E({actual:e,expected:r,message:n,operator:"notDeepStrictEqual",stackStartFn:t})},O.strictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");w(e,r)||E({actual:e,expected:r,message:n,operator:"strictEqual",stackStartFn:t})},O.notStrictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");w(e,r)&&E({actual:e,expected:r,message:n,operator:"notStrictEqual",stackStartFn:t})};var k=a((function t(e,r,n){var o=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r.forEach((function(t){t in e&&(void 0!==n&&"string"==typeof n[t]&&v(e[t])&&x(e[t],n[t])?o[t]=n[t]:o[t]=e[t])}))}));function I(t,e,r,n){if("function"!=typeof e){if(v(e))return x(e,t);if(2===arguments.length)throw new f("expected",["Function","RegExp"],e);if("object"!==o(t)||null===t){var i=new d({actual:t,expected:e,message:r,operator:"deepStrictEqual",stackStartFn:n});throw i.operator=n.name,i}var a=Object.keys(e);if(e instanceof Error)a.push("name","message");else if(0===a.length)throw new p("error",e,"may not be an empty object");return void 0===s&&j(),a.forEach((function(o){"string"==typeof t[o]&&v(e[o])&&x(e[o],t[o])||function(t,e,r,n,o,i){if(!(r in t)||!c(t[r],e[r])){if(!n){var a=new k(t,o),s=new k(e,o,t),l=new d({actual:a,expected:s,operator:"deepStrictEqual",stackStartFn:i});throw l.actual=t,l.expected=e,l.operator=i.name,l}E({actual:t,expected:e,message:n,operator:i.name,stackStartFn:i})}}(t,e,o,r,a,n)})),!0}return void 0!==e.prototype&&t instanceof e||!Error.isPrototypeOf(e)&&!0===e.call({},t)}function U(t){if("function"!=typeof t)throw new f("fn","Function",t);try{t()}catch(t){return t}return P}function D(t){return b(t)||null!==t&&"object"===o(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function C(t){return Promise.resolve().then((function(){var e;if("function"==typeof t){if(!D(e=t()))throw new y("instance of Promise","promiseFn",e)}else{if(!D(t))throw new f("promiseFn",["Function","Promise"],t);e=t}return Promise.resolve().then((function(){return e})).then((function(){return P})).catch((function(t){return t}))}))}function R(t,e,r,n){if("string"==typeof r){if(4===arguments.length)throw new f("error",["Object","Error","Function","RegExp"],r);if("object"===o(e)&&null!==e){if(e.message===r)throw new u("error/message",'The error message "'.concat(e.message,'" is identical to the message.'))}else if(e===r)throw new u("error/message",'The error "'.concat(e,'" is identical to the message.'));n=r,r=void 0}else if(null!=r&&"object"!==o(r)&&"function"!=typeof r)throw new f("error",["Object","Error","Function","RegExp"],r);if(e===P){var i="";r&&r.name&&(i+=" (".concat(r.name,")")),i+=n?": ".concat(n):".";var a="rejects"===t.name?"rejection":"exception";E({actual:void 0,expected:r,operator:t.name,message:"Missing expected ".concat(a).concat(i),stackStartFn:t})}if(r&&!I(e,r,n,t))throw e}function F(t,e,r,n){if(e!==P){if("string"==typeof r&&(n=r,r=void 0),!r||I(e,r)){var o=n?": ".concat(n):".",i="doesNotReject"===t.name?"rejection":"exception";E({actual:e,expected:r,operator:t.name,message:"Got unwanted ".concat(i).concat(o,"\n")+'Actual message: "'.concat(e&&e.message,'"'),stackStartFn:t})}throw e}}function N(t,e,r,n,i){if(!v(e))throw new f("regexp","RegExp",e);var a="match"===i;if("string"!=typeof t||x(e,t)!==a){if(r instanceof Error)throw r;var s=!r;r=r||("string"!=typeof t?'The "string" argument must be of type string. Received type '+"".concat(o(t)," (").concat(m(t),")"):(a?"The input did not match the regular expression ":"The input was expected to not match the regular expression ")+"".concat(m(e),". Input:\n\n").concat(m(t),"\n"));var c=new d({actual:t,expected:e,message:r,operator:i,stackStartFn:n});throw c.generatedMessage=s,c}}function B(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];_.apply(void 0,[B,e.length].concat(e))}O.throws=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];R.apply(void 0,[t,U(e)].concat(n))},O.rejects=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return C(e).then((function(e){return R.apply(void 0,[t,e].concat(n))}))},O.doesNotThrow=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];F.apply(void 0,[t,U(e)].concat(n))},O.doesNotReject=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return C(e).then((function(e){return F.apply(void 0,[t,e].concat(n))}))},O.ifError=function t(e){if(null!=e){var r="ifError got unwanted exception: ";"object"===o(e)&&"string"==typeof e.message?0===e.message.length&&e.constructor?r+=e.constructor.name:r+=e.message:r+=m(e);var n=new d({actual:e,expected:null,operator:"ifError",message:r,stackStartFn:t}),i=e.stack;if("string"==typeof i){var a=i.split("\n");a.shift();for(var s=n.stack.split("\n"),c=0;c<a.length;c++){var l=s.indexOf(a[c]);if(-1!==l){s=s.slice(0,l);break}}n.stack="".concat(s.join("\n"),"\n").concat(a.join("\n"))}throw n}},O.match=function t(e,r,n){N(e,r,n,t,"match")},O.doesNotMatch=function t(e,r,n){N(e,r,n,t,"doesNotMatch")},O.strict=A(B,O,{equal:O.strictEqual,deepEqual:O.deepStrictEqual,notEqual:O.notStrictEqual,notDeepEqual:O.notDeepStrictEqual}),O.strict.strict=O.strict},3918:(t,e,r)=>{"use strict";var n=r(5606);function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){var n,o,i;n=t,o=e,i=r[e],(o=s(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!==d(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==d(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===d(e)?e:String(e)}function c(t,e){if(e&&("object"===d(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return l(t)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function u(t){var e="function"==typeof Map?new Map:void 0;return u=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return f(t,arguments,g(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),y(n,t)},u(t)}function f(t,e,r){return f=p()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&y(o,r.prototype),o},f.apply(null,arguments)}function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function y(t,e){return y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},y(t,e)}function g(t){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},g(t)}function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}var m=r(537).inspect,h=r(9597).codes.ERR_INVALID_ARG_TYPE;function b(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}var v="",A="",w="",x="",j={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function S(t){var e=Object.keys(t),r=Object.create(Object.getPrototypeOf(t));return e.forEach((function(e){r[e]=t[e]})),Object.defineProperty(r,"message",{value:t.message}),r}function O(t){return m(t,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var P=function(t,e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&y(t,e)}(P,t);var r,o,s,u,f=(r=P,o=p(),function(){var t,e=g(r);if(o){var n=g(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function P(t){var e;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,P),"object"!==d(t)||null===t)throw new h("options","Object",t);var r=t.message,o=t.operator,i=t.stackStartFn,a=t.actual,s=t.expected,u=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=r)e=f.call(this,String(r));else if(n.stderr&&n.stderr.isTTY&&(n.stderr&&n.stderr.getColorDepth&&1!==n.stderr.getColorDepth()?(v="[34m",A="[32m",x="[39m",w="[31m"):(v="",A="",x="",w="")),"object"===d(a)&&null!==a&&"object"===d(s)&&null!==s&&"stack"in a&&a instanceof Error&&"stack"in s&&s instanceof Error&&(a=S(a),s=S(s)),"deepStrictEqual"===o||"strictEqual"===o)e=f.call(this,function(t,e,r){var o="",i="",a=0,s="",c=!1,l=O(t),u=l.split("\n"),f=O(e).split("\n"),p=0,y="";if("strictEqual"===r&&"object"===d(t)&&"object"===d(e)&&null!==t&&null!==e&&(r="strictEqualObject"),1===u.length&&1===f.length&&u[0]!==f[0]){var g=u[0].length+f[0].length;if(g<=10){if(!("object"===d(t)&&null!==t||"object"===d(e)&&null!==e||0===t&&0===e))return"".concat(j[r],"\n\n")+"".concat(u[0]," !== ").concat(f[0],"\n")}else if("strictEqualObject"!==r&&g<(n.stderr&&n.stderr.isTTY?n.stderr.columns:80)){for(;u[0][p]===f[0][p];)p++;p>2&&(y="\n  ".concat(function(t,e){if(e=Math.floor(e),0==t.length||0==e)return"";var r=t.length*e;for(e=Math.floor(Math.log(e)/Math.log(2));e;)t+=t,e--;return t+t.substring(0,r-t.length)}(" ",p),"^"),p=0)}}for(var m=u[u.length-1],h=f[f.length-1];m===h&&(p++<2?s="\n  ".concat(m).concat(s):o=m,u.pop(),f.pop(),0!==u.length&&0!==f.length);)m=u[u.length-1],h=f[f.length-1];var S=Math.max(u.length,f.length);if(0===S){var P=l.split("\n");if(P.length>30)for(P[26]="".concat(v,"...").concat(x);P.length>27;)P.pop();return"".concat(j.notIdentical,"\n\n").concat(P.join("\n"),"\n")}p>3&&(s="\n".concat(v,"...").concat(x).concat(s),c=!0),""!==o&&(s="\n  ".concat(o).concat(s),o="");var E=0,_=j[r]+"\n".concat(A,"+ actual").concat(x," ").concat(w,"- expected").concat(x),T=" ".concat(v,"...").concat(x," Lines skipped");for(p=0;p<S;p++){var k=p-a;if(u.length<p+1)k>1&&p>2&&(k>4?(i+="\n".concat(v,"...").concat(x),c=!0):k>3&&(i+="\n  ".concat(f[p-2]),E++),i+="\n  ".concat(f[p-1]),E++),a=p,o+="\n".concat(w,"-").concat(x," ").concat(f[p]),E++;else if(f.length<p+1)k>1&&p>2&&(k>4?(i+="\n".concat(v,"...").concat(x),c=!0):k>3&&(i+="\n  ".concat(u[p-2]),E++),i+="\n  ".concat(u[p-1]),E++),a=p,i+="\n".concat(A,"+").concat(x," ").concat(u[p]),E++;else{var I=f[p],U=u[p],D=U!==I&&(!b(U,",")||U.slice(0,-1)!==I);D&&b(I,",")&&I.slice(0,-1)===U&&(D=!1,U+=","),D?(k>1&&p>2&&(k>4?(i+="\n".concat(v,"...").concat(x),c=!0):k>3&&(i+="\n  ".concat(u[p-2]),E++),i+="\n  ".concat(u[p-1]),E++),a=p,i+="\n".concat(A,"+").concat(x," ").concat(U),o+="\n".concat(w,"-").concat(x," ").concat(I),E+=2):(i+=o,o="",1!==k&&0!==p||(i+="\n  ".concat(U),E++))}if(E>20&&p<S-2)return"".concat(_).concat(T,"\n").concat(i,"\n").concat(v,"...").concat(x).concat(o,"\n")+"".concat(v,"...").concat(x)}return"".concat(_).concat(c?T:"","\n").concat(i).concat(o).concat(s).concat(y)}(a,s,o));else if("notDeepStrictEqual"===o||"notStrictEqual"===o){var p=j[o],y=O(a).split("\n");if("notStrictEqual"===o&&"object"===d(a)&&null!==a&&(p=j.notStrictEqualObject),y.length>30)for(y[26]="".concat(v,"...").concat(x);y.length>27;)y.pop();e=1===y.length?f.call(this,"".concat(p," ").concat(y[0])):f.call(this,"".concat(p,"\n\n").concat(y.join("\n"),"\n"))}else{var g=O(a),m="",E=j[o];"notDeepEqual"===o||"notEqual"===o?(g="".concat(j[o],"\n\n").concat(g)).length>1024&&(g="".concat(g.slice(0,1021),"...")):(m="".concat(O(s)),g.length>512&&(g="".concat(g.slice(0,509),"...")),m.length>512&&(m="".concat(m.slice(0,509),"...")),"deepEqual"===o||"equal"===o?g="".concat(E,"\n\n").concat(g,"\n\nshould equal\n\n"):m=" ".concat(o," ").concat(m)),e=f.call(this,"".concat(g).concat(m))}return Error.stackTraceLimit=u,e.generatedMessage=!r,Object.defineProperty(l(e),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),e.code="ERR_ASSERTION",e.actual=a,e.expected=s,e.operator=o,Error.captureStackTrace&&Error.captureStackTrace(l(e),i),e.stack,e.name="AssertionError",c(e)}return s=P,(u=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:e,value:function(t,e){return m(this,i(i({},e),{},{customInspect:!1,depth:0}))}}])&&a(s.prototype,u),Object.defineProperty(s,"prototype",{writable:!1}),P}(u(Error),m.custom);t.exports=P},9597:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},o(t,e)}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}var a,s,c={};function l(t,e,r){r||(r=Error);var a=function(r){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&o(t,e)}(u,r);var a,s,c,l=(s=u,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=i(s);if(c){var r=i(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===n(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(r,n,o){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i=l.call(this,function(t,r,n){return"string"==typeof e?e:e(t,r,n)}(r,n,o)),i.code=t,i}return a=u,Object.defineProperty(a,"prototype",{writable:!1}),a}(r);c[t]=a}function u(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}l("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),l("ERR_INVALID_ARG_TYPE",(function(t,e,o){var i,s,c,l,f;if(void 0===a&&(a=r(4148)),a("string"==typeof t,"'name' must be a string"),"string"==typeof e&&(s="not ",e.substr(0,4)===s)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-9,r)===e}(t," argument"))c="The ".concat(t," ").concat(i," ").concat(u(e,"type"));else{var p=("number"!=typeof f&&(f=0),f+1>(l=t).length||-1===l.indexOf(".",f)?"argument":"property");c='The "'.concat(t,'" ').concat(p," ").concat(i," ").concat(u(e,"type"))}return c+". Received type ".concat(n(o))}),TypeError),l("ERR_INVALID_ARG_VALUE",(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===s&&(s=r(537));var o=s.inspect(e);return o.length>128&&(o="".concat(o.slice(0,128),"...")),"The argument '".concat(t,"' ").concat(n,". Received ").concat(o)}),TypeError,RangeError),l("ERR_INVALID_RETURN_VALUE",(function(t,e,r){var o;return o=r&&r.constructor&&r.constructor.name?"instance of ".concat(r.constructor.name):"type ".concat(n(r)),"Expected ".concat(t,' to be returned from the "').concat(e,'"')+" function but got ".concat(o,".")}),TypeError),l("ERR_MISSING_ARGS",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];void 0===a&&(a=r(4148)),a(e.length>0,"At least one arg needs to be specified");var o="The ",i=e.length;switch(e=e.map((function(t){return'"'.concat(t,'"')})),i){case 1:o+="".concat(e[0]," argument");break;case 2:o+="".concat(e[0]," and ").concat(e[1]," arguments");break;default:o+=e.slice(0,i-1).join(", "),o+=", and ".concat(e[i-1]," arguments")}return"".concat(o," must be specified")}),TypeError),t.exports.codes=c},2299:(t,e,r)=>{"use strict";function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==e);c=!0);}catch(t){l=!0,o=t}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}var a=void 0!==/a/g.flags,s=function(t){var e=[];return t.forEach((function(t){return e.push(t)})),e},c=function(t){var e=[];return t.forEach((function(t,r){return e.push([r,t])})),e},l=Object.is?Object.is:r(7653),u=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},f=Number.isNaN?Number.isNaN:r(4133);function p(t){return t.call.bind(t)}var y=p(Object.prototype.hasOwnProperty),g=p(Object.prototype.propertyIsEnumerable),d=p(Object.prototype.toString),m=r(537).types,h=m.isAnyArrayBuffer,b=m.isArrayBufferView,v=m.isDate,A=m.isMap,w=m.isRegExp,x=m.isSet,j=m.isNativeError,S=m.isBoxedPrimitive,O=m.isNumberObject,P=m.isStringObject,E=m.isBooleanObject,_=m.isBigIntObject,T=m.isSymbolObject,k=m.isFloat32Array,I=m.isFloat64Array;function U(t){if(0===t.length||t.length>10)return!0;for(var e=0;e<t.length;e++){var r=t.charCodeAt(e);if(r<48||r>57)return!0}return 10===t.length&&t>=Math.pow(2,32)}function D(t){return Object.keys(t).filter(U).concat(u(t).filter(Object.prototype.propertyIsEnumerable.bind(t)))}function C(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0}var R=0,F=1,N=2,B=3;function M(t,e,r,n){if(t===e)return 0!==t||!r||l(t,e);if(r){if("object"!==i(t))return"number"==typeof t&&f(t)&&f(e);if("object"!==i(e)||null===t||null===e)return!1;if(Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1}else{if(null===t||"object"!==i(t))return(null===e||"object"!==i(e))&&t==e;if(null===e||"object"!==i(e))return!1}var o,s,c,u,p=d(t);if(p!==d(e))return!1;if(Array.isArray(t)){if(t.length!==e.length)return!1;var y=D(t),g=D(e);return y.length===g.length&&q(t,e,r,n,F,y)}if("[object Object]"===p&&(!A(t)&&A(e)||!x(t)&&x(e)))return!1;if(v(t)){if(!v(e)||Date.prototype.getTime.call(t)!==Date.prototype.getTime.call(e))return!1}else if(w(t)){if(!w(e)||(c=t,u=e,!(a?c.source===u.source&&c.flags===u.flags:RegExp.prototype.toString.call(c)===RegExp.prototype.toString.call(u))))return!1}else if(j(t)||t instanceof Error){if(t.message!==e.message||t.name!==e.name)return!1}else{if(b(t)){if(r||!k(t)&&!I(t)){if(!function(t,e){return t.byteLength===e.byteLength&&0===C(new Uint8Array(t.buffer,t.byteOffset,t.byteLength),new Uint8Array(e.buffer,e.byteOffset,e.byteLength))}(t,e))return!1}else if(!function(t,e){if(t.byteLength!==e.byteLength)return!1;for(var r=0;r<t.byteLength;r++)if(t[r]!==e[r])return!1;return!0}(t,e))return!1;var m=D(t),U=D(e);return m.length===U.length&&q(t,e,r,n,R,m)}if(x(t))return!(!x(e)||t.size!==e.size)&&q(t,e,r,n,N);if(A(t))return!(!A(e)||t.size!==e.size)&&q(t,e,r,n,B);if(h(t)){if(s=e,(o=t).byteLength!==s.byteLength||0!==C(new Uint8Array(o),new Uint8Array(s)))return!1}else if(S(t)&&!function(t,e){return O(t)?O(e)&&l(Number.prototype.valueOf.call(t),Number.prototype.valueOf.call(e)):P(t)?P(e)&&String.prototype.valueOf.call(t)===String.prototype.valueOf.call(e):E(t)?E(e)&&Boolean.prototype.valueOf.call(t)===Boolean.prototype.valueOf.call(e):_(t)?_(e)&&BigInt.prototype.valueOf.call(t)===BigInt.prototype.valueOf.call(e):T(e)&&Symbol.prototype.valueOf.call(t)===Symbol.prototype.valueOf.call(e)}(t,e))return!1}return q(t,e,r,n,R)}function $(t,e){return e.filter((function(e){return g(t,e)}))}function q(t,e,r,o,a,l){if(5===arguments.length){l=Object.keys(t);var f=Object.keys(e);if(l.length!==f.length)return!1}for(var p=0;p<l.length;p++)if(!y(e,l[p]))return!1;if(r&&5===arguments.length){var d=u(t);if(0!==d.length){var m=0;for(p=0;p<d.length;p++){var h=d[p];if(g(t,h)){if(!g(e,h))return!1;l.push(h),m++}else if(g(e,h))return!1}var b=u(e);if(d.length!==b.length&&$(e,b).length!==m)return!1}else{var v=u(e);if(0!==v.length&&0!==$(e,v).length)return!1}}if(0===l.length&&(a===R||a===F&&0===t.length||0===t.size))return!0;if(void 0===o)o={val1:new Map,val2:new Map,position:0};else{var A=o.val1.get(t);if(void 0!==A){var w=o.val2.get(e);if(void 0!==w)return A===w}o.position++}o.val1.set(t,o.position),o.val2.set(e,o.position);var x=function(t,e,r,o,a,l){var u=0;if(l===N){if(!function(t,e,r,n){for(var o=null,a=s(t),c=0;c<a.length;c++){var l=a[c];if("object"===i(l)&&null!==l)null===o&&(o=new Set),o.add(l);else if(!e.has(l)){if(r)return!1;if(!G(t,e,l))return!1;null===o&&(o=new Set),o.add(l)}}if(null!==o){for(var u=s(e),f=0;f<u.length;f++){var p=u[f];if("object"===i(p)&&null!==p){if(!L(o,p,r,n))return!1}else if(!r&&!t.has(p)&&!L(o,p,r,n))return!1}return 0===o.size}return!0}(t,e,r,a))return!1}else if(l===B){if(!function(t,e,r,o){for(var a=null,s=c(t),l=0;l<s.length;l++){var u=n(s[l],2),f=u[0],p=u[1];if("object"===i(f)&&null!==f)null===a&&(a=new Set),a.add(f);else{var y=e.get(f);if(void 0===y&&!e.has(f)||!M(p,y,r,o)){if(r)return!1;if(!W(t,e,f,p,o))return!1;null===a&&(a=new Set),a.add(f)}}}if(null!==a){for(var g=c(e),d=0;d<g.length;d++){var m=n(g[d],2),h=m[0],b=m[1];if("object"===i(h)&&null!==h){if(!V(a,t,h,b,r,o))return!1}else if(!(r||t.has(h)&&M(t.get(h),b,!1,o)||V(a,t,h,b,!1,o)))return!1}return 0===a.size}return!0}(t,e,r,a))return!1}else if(l===F)for(;u<t.length;u++){if(!y(t,u)){if(y(e,u))return!1;for(var f=Object.keys(t);u<f.length;u++){var p=f[u];if(!y(e,p)||!M(t[p],e[p],r,a))return!1}return f.length===Object.keys(e).length}if(!y(e,u)||!M(t[u],e[u],r,a))return!1}for(u=0;u<o.length;u++){var g=o[u];if(!M(t[g],e[g],r,a))return!1}return!0}(t,e,r,l,o,a);return o.val1.delete(t),o.val2.delete(e),x}function L(t,e,r,n){for(var o=s(t),i=0;i<o.length;i++){var a=o[i];if(M(e,a,r,n))return t.delete(a),!0}return!1}function z(t){switch(i(t)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":t=+t;case"number":if(f(t))return!1}return!0}function G(t,e,r){var n=z(r);return null!=n?n:e.has(n)&&!t.has(n)}function W(t,e,r,n,o){var i=z(r);if(null!=i)return i;var a=e.get(i);return!(void 0===a&&!e.has(i)||!M(n,a,!1,o))&&!t.has(i)&&M(n,a,!1,o)}function V(t,e,r,n,o,i){for(var a=s(t),c=0;c<a.length;c++){var l=a[c];if(M(r,l,o,i)&&M(n,e.get(l),o,i))return t.delete(l),!0}return!1}t.exports={isDeepEqual:function(t,e){return M(t,e,!1)},isDeepStrictEqual:function(t,e){return M(t,e,!0)}}},8075:(t,e,r)=>{"use strict";var n=r(453),o=r(487),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")>-1?o(r):r}},487:(t,e,r)=>{"use strict";var n=r(6743),o=r(453),i=r(6897),a=r(9675),s=o("%Function.prototype.apply%"),c=o("%Function.prototype.call%"),l=o("%Reflect.apply%",!0)||n.call(c,s),u=r(655),f=o("%Math.max%");t.exports=function(t){if("function"!=typeof t)throw new a("a function is required");var e=l(n,c,arguments);return i(e,1+f(0,t.length-(arguments.length-1)),!0)};var p=function(){return l(n,s,arguments)};u?u(t.exports,"apply",{value:p}):t.exports.apply=p},41:(t,e,r)=>{"use strict";var n=r(655),o=r(8068),i=r(9675),a=r(5795);t.exports=function(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new i("`obj` must be an object or a function`");if("string"!=typeof e&&"symbol"!=typeof e)throw new i("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new i("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new i("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new i("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new i("`loose`, if provided, must be a boolean");var s=arguments.length>3?arguments[3]:null,c=arguments.length>4?arguments[4]:null,l=arguments.length>5?arguments[5]:null,u=arguments.length>6&&arguments[6],f=!!a&&a(t,e);if(n)n(t,e,{configurable:null===l&&f?f.configurable:!l,enumerable:null===s&&f?f.enumerable:!s,value:r,writable:null===c&&f?f.writable:!c});else{if(!u&&(s||c||l))throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");t[e]=r}}},8452:(t,e,r)=>{"use strict";var n=r(1189),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,s=r(41),c=r(592)(),l=function(t,e,r,n){if(e in t)if(!0===n){if(t[e]===r)return}else if("function"!=typeof(o=n)||"[object Function]"!==i.call(o)||!n())return;var o;c?s(t,e,r,!0):s(t,e,r)},u=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var s=0;s<i.length;s+=1)l(t,i[s],e[i[s]],r[i[s]])};u.supportsDescriptors=!!c,t.exports=u},655:(t,e,r)=>{"use strict";var n=r(453)("%Object.defineProperty%",!0)||!1;if(n)try{n({},"a",{value:1})}catch(t){n=!1}t.exports=n},1237:t=>{"use strict";t.exports=EvalError},9383:t=>{"use strict";t.exports=Error},9290:t=>{"use strict";t.exports=RangeError},9538:t=>{"use strict";t.exports=ReferenceError},8068:t=>{"use strict";t.exports=SyntaxError},9675:t=>{"use strict";t.exports=TypeError},5345:t=>{"use strict";t.exports=URIError},2682:(t,e,r)=>{"use strict";var n=r(9600),o=Object.prototype.toString,i=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){if(!n(e))throw new TypeError("iterator must be a function");var a;arguments.length>=3&&(a=r),"[object Array]"===o.call(t)?function(t,e,r){for(var n=0,o=t.length;n<o;n++)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a):"string"==typeof t?function(t,e,r){for(var n=0,o=t.length;n<o;n++)null==r?e(t.charAt(n),n,t):e.call(r,t.charAt(n),n,t)}(t,e,a):function(t,e,r){for(var n in t)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a)}},9353:t=>{"use strict";var e=Object.prototype.toString,r=Math.max,n=function(t,e){for(var r=[],n=0;n<t.length;n+=1)r[n]=t[n];for(var o=0;o<e.length;o+=1)r[o+t.length]=e[o];return r};t.exports=function(t){var o=this;if("function"!=typeof o||"[object Function]"!==e.apply(o))throw new TypeError("Function.prototype.bind called on incompatible "+o);for(var i,a=function(t,e){for(var r=[],n=1,o=0;n<t.length;n+=1,o+=1)r[o]=t[n];return r}(arguments),s=r(0,o.length-a.length),c=[],l=0;l<s;l++)c[l]="$"+l;if(i=Function("binder","return function ("+function(t,e){for(var r="",n=0;n<t.length;n+=1)r+=t[n],n+1<t.length&&(r+=",");return r}(c)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var e=o.apply(this,n(a,arguments));return Object(e)===e?e:this}return o.apply(t,n(a,arguments))})),o.prototype){var u=function(){};u.prototype=o.prototype,i.prototype=new u,u.prototype=null}return i}},6743:(t,e,r)=>{"use strict";var n=r(9353);t.exports=Function.prototype.bind||n},453:(t,e,r)=>{"use strict";var n,o=r(9383),i=r(1237),a=r(9290),s=r(9538),c=r(8068),l=r(9675),u=r(5345),f=Function,p=function(t){try{return f('"use strict"; return ('+t+").constructor;")()}catch(t){}},y=Object.getOwnPropertyDescriptor;if(y)try{y({},"")}catch(t){y=null}var g=function(){throw new l},d=y?function(){try{return g}catch(t){try{return y(arguments,"callee").get}catch(t){return g}}}():g,m=r(4039)(),h=r(24)(),b=Object.getPrototypeOf||(h?function(t){return t.__proto__}:null),v={},A="undefined"!=typeof Uint8Array&&b?b(Uint8Array):n,w={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":m&&b?b([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":v,"%AsyncGenerator%":v,"%AsyncGeneratorFunction%":v,"%AsyncIteratorPrototype%":v,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":o,"%eval%":eval,"%EvalError%":i,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":f,"%GeneratorFunction%":v,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":m&&b?b(b([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&m&&b?b((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":a,"%ReferenceError%":s,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&m&&b?b((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":m&&b?b(""[Symbol.iterator]()):n,"%Symbol%":m?Symbol:n,"%SyntaxError%":c,"%ThrowTypeError%":d,"%TypedArray%":A,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":u,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};if(b)try{null.error}catch(t){var x=b(b(t));w["%Error.prototype%"]=x}var j=function t(e){var r;if("%AsyncFunction%"===e)r=p("async function () {}");else if("%GeneratorFunction%"===e)r=p("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=p("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&b&&(r=b(o.prototype))}return w[e]=r,r},S={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},O=r(6743),P=r(9957),E=O.call(Function.call,Array.prototype.concat),_=O.call(Function.apply,Array.prototype.splice),T=O.call(Function.call,String.prototype.replace),k=O.call(Function.call,String.prototype.slice),I=O.call(Function.call,RegExp.prototype.exec),U=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,D=/\\(\\)?/g,C=function(t,e){var r,n=t;if(P(S,n)&&(n="%"+(r=S[n])[0]+"%"),P(w,n)){var o=w[n];if(o===v&&(o=j(n)),void 0===o&&!e)throw new l("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:o}}throw new c("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new l('"allowMissing" argument must be a boolean');if(null===I(/^%?[^%]*%?$/,t))throw new c("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=k(t,0,1),r=k(t,-1);if("%"===e&&"%"!==r)throw new c("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new c("invalid intrinsic syntax, expected opening `%`");var n=[];return T(t,U,(function(t,e,r,o){n[n.length]=r?T(o,D,"$1"):e||t})),n}(t),n=r.length>0?r[0]:"",o=C("%"+n+"%",e),i=o.name,a=o.value,s=!1,u=o.alias;u&&(n=u[0],_(r,E([0,1],u)));for(var f=1,p=!0;f<r.length;f+=1){var g=r[f],d=k(g,0,1),m=k(g,-1);if(('"'===d||"'"===d||"`"===d||'"'===m||"'"===m||"`"===m)&&d!==m)throw new c("property names with quotes must have matching quotes");if("constructor"!==g&&p||(s=!0),P(w,i="%"+(n+="."+g)+"%"))a=w[i];else if(null!=a){if(!(g in a)){if(!e)throw new l("base intrinsic for "+t+" exists, but the property is not available.");return}if(y&&f+1>=r.length){var h=y(a,g);a=(p=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:a[g]}else p=P(a,g),a=a[g];p&&!s&&(w[i]=a)}}return a}},5795:(t,e,r)=>{"use strict";var n=r(453)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(t){n=null}t.exports=n},592:(t,e,r)=>{"use strict";var n=r(655),o=function(){return!!n};o.hasArrayLengthDefineBug=function(){if(!n)return null;try{return 1!==n([],"length",{value:1}).length}catch(t){return!0}},t.exports=o},24:t=>{"use strict";var e={__proto__:null,foo:{}},r=Object;t.exports=function(){return{__proto__:e}.foo===e.foo&&!(e instanceof r)}},4039:(t,e,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,o=r(1333);t.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&o()}},1333:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},9092:(t,e,r)=>{"use strict";var n=r(1333);t.exports=function(){return n()&&!!Symbol.toStringTag}},9957:(t,e,r)=>{"use strict";var n=Function.prototype.call,o=Object.prototype.hasOwnProperty,i=r(6743);t.exports=i.call(n,o)},6698:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},7244:(t,e,r)=>{"use strict";var n=r(9092)(),o=r(8075)("Object.prototype.toString"),i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o(t)&&"[object Function]"===o(t.callee)},s=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=s?i:a},9600:t=>{"use strict";var e,r,n=Function.prototype.toString,o="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof o&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw r}}),r={},o((function(){throw 42}),null,e)}catch(t){t!==r&&(o=null)}else o=null;var i=/^\s*class\b/,a=function(t){try{var e=n.call(t);return i.test(e)}catch(t){return!1}},s=function(t){try{return!a(t)&&(n.call(t),!0)}catch(t){return!1}},c=Object.prototype.toString,l="function"==typeof Symbol&&!!Symbol.toStringTag,u=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var p=document.all;c.call(p)===c.call(document.all)&&(f=function(t){if((u||!t)&&(void 0===t||"object"==typeof t))try{var e=c.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}t.exports=o?function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;try{o(t,null,e)}catch(t){if(t!==r)return!1}return!a(t)&&s(t)}:function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(l)return s(t);if(a(t))return!1;var e=c.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&s(t)}},8184:(t,e,r)=>{"use strict";var n,o=Object.prototype.toString,i=Function.prototype.toString,a=/^\s*(?:function)?\*/,s=r(9092)(),c=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(a.test(i.call(t)))return!0;if(!s)return"[object GeneratorFunction]"===o.call(t);if(!c)return!1;if(void 0===n){var e=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}();n=!!e&&c(e)}return c(t)===n}},3003:t=>{"use strict";t.exports=function(t){return t!=t}},4133:(t,e,r)=>{"use strict";var n=r(487),o=r(8452),i=r(3003),a=r(6642),s=r(2464),c=n(a(),Number);o(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},6642:(t,e,r)=>{"use strict";var n=r(3003);t.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:n}},2464:(t,e,r)=>{"use strict";var n=r(8452),o=r(6642);t.exports=function(){var t=o();return n(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}},5680:(t,e,r)=>{"use strict";var n=r(5767);t.exports=function(t){return!!n(t)}},9211:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,r){return 0===t&&0===r?1/t==1/r:t===r||!(!e(t)||!e(r))}},7653:(t,e,r)=>{"use strict";var n=r(8452),o=r(487),i=r(9211),a=r(9394),s=r(6576),c=o(a(),Object);n(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},9394:(t,e,r)=>{"use strict";var n=r(9211);t.exports=function(){return"function"==typeof Object.is?Object.is:n}},6576:(t,e,r)=>{"use strict";var n=r(9394),o=r(8452);t.exports=function(){var t=n();return o(Object,{is:t},{is:function(){return Object.is!==t}}),t}},8875:(t,e,r)=>{"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=r(1093),s=Object.prototype.propertyIsEnumerable,c=!s.call({toString:null},"toString"),l=s.call((function(){}),"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===i.call(t),n=a(t),s=e&&"[object String]"===i.call(t),p=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var g=l&&r;if(s&&t.length>0&&!o.call(t,0))for(var d=0;d<t.length;++d)p.push(String(d));if(n&&t.length>0)for(var m=0;m<t.length;++m)p.push(String(m));else for(var h in t)g&&"prototype"===h||!o.call(t,h)||p.push(String(h));if(c)for(var b=function(t){if("undefined"==typeof window||!y)return f(t);try{return f(t)}catch(t){return!1}}(t),v=0;v<u.length;++v)b&&"constructor"===u[v]||!o.call(t,u[v])||p.push(u[v]);return p}}t.exports=n},1189:(t,e,r)=>{"use strict";var n=Array.prototype.slice,o=r(1093),i=Object.keys,a=i?function(t){return i(t)}:r(8875),s=Object.keys;a.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return o(t)?s(n.call(t)):s(t)})}else Object.keys=a;return Object.keys||a},t.exports=a},1093:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var r=e.call(t),n="[object Arguments]"===r;return n||(n="[object Array]"!==r&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),n}},8403:(t,e,r)=>{"use strict";var n=r(1189),o=r(1333)(),i=r(8075),a=Object,s=i("Array.prototype.push"),c=i("Object.prototype.propertyIsEnumerable"),l=o?Object.getOwnPropertySymbols:null;t.exports=function(t,e){if(null==t)throw new TypeError("target must be an object");var r=a(t);if(1===arguments.length)return r;for(var i=1;i<arguments.length;++i){var u=a(arguments[i]),f=n(u),p=o&&(Object.getOwnPropertySymbols||l);if(p)for(var y=p(u),g=0;g<y.length;++g){var d=y[g];c(u,d)&&s(f,d)}for(var m=0;m<f.length;++m){var h=f[m];if(c(u,h)){var b=u[h];r[h]=b}}}return r}},1514:(t,e,r)=>{"use strict";var n=r(8403);t.exports=function(){return Object.assign?function(){if(!Object.assign)return!1;for(var t="abcdefghijklmnopqrst",e=t.split(""),r={},n=0;n<e.length;++n)r[e[n]]=e[n];var o=Object.assign({},r),i="";for(var a in o)i+=a;return t!==i}()||function(){if(!Object.assign||!Object.preventExtensions)return!1;var t=Object.preventExtensions({1:2});try{Object.assign(t,"xy")}catch(e){return"y"===t[1]}return!1}()?n:Object.assign:n}},6578:t=>{"use strict";t.exports=["Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array"]},5606:t=>{var e,r,n=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(r){try{return e.call(null,t,0)}catch(r){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(t){r=i}}();var s,c=[],l=!1,u=-1;function f(){l&&s&&(l=!1,s.length?c=s.concat(c):u=-1,c.length&&p())}function p(){if(!l){var t=a(f);l=!0;for(var e=c.length;e;){for(s=c,c=[];++u<e;)s&&s[u].run();u=-1,e=c.length}s=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{return r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function g(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new y(t,e)),1!==c.length||l||a(p)},y.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=g,n.addListener=g,n.once=g,n.off=g,n.removeListener=g,n.removeAllListeners=g,n.emit=g,n.prependListener=g,n.prependOnceListener=g,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},6897:(t,e,r)=>{"use strict";var n=r(453),o=r(41),i=r(592)(),a=r(5795),s=r(9675),c=n("%Math.floor%");t.exports=function(t,e){if("function"!=typeof t)throw new s("`fn` is not a function");if("number"!=typeof e||e<0||e>4294967295||c(e)!==e)throw new s("`length` must be a positive 32-bit integer");var r=arguments.length>2&&!!arguments[2],n=!0,l=!0;if("length"in t&&a){var u=a(t,"length");u&&!u.configurable&&(n=!1),u&&!u.writable&&(l=!1)}return(n||l||!r)&&(i?o(t,"length",e,!0,!0):o(t,"length",e)),t}},5722:(t,e,r)=>{"use strict";r.d(e,{x1:()=>_});var n=r(4148),o=r.n(n),i=r(6815),a=function(t,e,r,n,o,i){function a(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var s,c=n.kind,l="getter"===c?"get":"setter"===c?"set":"value",u=!e&&t?n.static?t:t.prototype:null,f=e||(u?Object.getOwnPropertyDescriptor(u,n.name):{}),p=!1,y=r.length-1;y>=0;y--){var g={};for(var d in n)g[d]="access"===d?{}:n[d];for(var d in n.access)g.access[d]=n.access[d];g.addInitializer=function(t){if(p)throw new TypeError("Cannot add initializers after decoration has completed");i.push(a(t||null))};var m=(0,r[y])("accessor"===c?{get:f.get,set:f.set}:f[l],g);if("accessor"===c){if(void 0===m)continue;if(null===m||"object"!=typeof m)throw new TypeError("Object expected");(s=a(m.get))&&(f.get=s),(s=a(m.set))&&(f.set=s),(s=a(m.init))&&o.unshift(s)}else(s=a(m))&&("field"===c?o.unshift(s):f[l]=s)}u&&Object.defineProperty(u,n.name,f),p=!0},s=function(t,e,r){for(var n=arguments.length>2,o=0;o<e.length;o++)r=n?e[o].call(t,r):e[o].call(t);return n?r:void 0},c=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))},l=function(t,e,r){return"symbol"==typeof e&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(t,"name",{configurable:!0,value:r?"".concat(r," ",e):e})};const u={Assignment:"assignment",Discussion:"discussion_topic",Quiz:"quiz",Attachment:"attachment","External Tool":"external_tool",File:"file",Page:"wiki_page"};function f(t){console.log("form",t);let e=new FormData;for(let r in t)p(e,r,t[r]);if(document){const t=document.querySelector("input[name='authenticity_token']"),r=t?t.value:null;r&&e.append("authenticity_token",r)}for(let t of e.entries())console.log(t[0],t[1]);return e}function p(t,e,r){if(Array.isArray(r))for(let n of r)p(t,`${e}[]`,n);else if("object"==typeof r)for(let n in r){const o=r[n];p(t,e.length>0?`${e}[${n}]`:n,o)}else t.append(e,r.toString())}function y(t){const e=/(week|module) (\d+)/i;let r=t.name.match(e),n=r?Number(r[1]):null;if(!n)for(let r of t.items){if(!r.hasOwnProperty("title"))continue;let t=r.title.match(e);t&&(n=t[2])}return n}function g(t,e=null){return c(this,void 0,void 0,(function*(){return yield d(`/api/v1/${t}`,e)}))}function d(t,e=null){return c(this,void 0,void 0,(function*(){var r;(null==e?void 0:e.queryParams)&&(t+="?"+(r=e.queryParams,new URLSearchParams(r))),t.includes("undefined")&&console.log(t);let n=yield fetch(t,null==e?void 0:e.fetchInit),i=yield n.json();if("object"==typeof i&&!Array.isArray(i)){let t=Array.from(Object.values(i));t&&(i=t.find((t=>Array.isArray(t))))}o()(Array.isArray(i));let a="!";for(;0!==a.length&&n&&n.headers.has("Link")&&n.ok;){const t=n.headers.get("Link");o()(t);const r=t.split(",").find((t=>t.includes("next")));if(r){a=r.split(";")[0].split("<")[1].split(">")[0],n=yield fetch(a,null==e?void 0:e.fetchInit);let t=yield n.json();if("object"==typeof t&&!Array.isArray(i)){let e=Array.from(Object.values(i));e&&(t=null==e?void 0:e.find((t=>Array.isArray(t))))}i=i.concat(t)}else a=""}return i}))}function m(t,e=null){var r;return c(this,void 0,void 0,(function*(){(null==e?void 0:e.queryParams)&&(t+="?"+new URLSearchParams(e.queryParams)),null!=e||(e={}),document||(null!==(r=e.fetchInit)&&void 0!==r||(e.fetchInit={}),e.fetchInit.headers=[]);const n=yield fetch(t,e.fetchInit);return yield n.json()}))}function h(t,e=null){return c(this,void 0,void 0,(function*(){return t=`/api/v1/${t}`,yield m(t,e)}))}function b(t,e=null){return c(this,void 0,void 0,(function*(){let r=yield h(t,e);return Array.isArray(r)?r[0]:r}))}class v{constructor(t){this.accountId=null,this.canvasData=t||{}}getClass(){return this.constructor}toString(){return JSON.stringify(this.canvasData)}getItem(t){return this.canvasData[t]||null}get myClass(){return this.constructor}get nameKey(){return o()(this.myClass.nameProperty),this.myClass.nameProperty}get contentUrlPath(){const t=this.constructor;return o()("number"==typeof this.accountId),o()("string"==typeof t.contentUrlTemplate),t.contentUrlTemplate.replace("{content_id}",this.id.toString()).replace("{account_id}",this.accountId.toString())}get htmlContentUrl(){return`/${this.contentUrlPath}`}get rawData(){const t={id:NaN};for(let e in this.canvasData)t[e]=this.canvasData[e];return t}get data(){return this.canvasData}static getDataById(t,e=null,r=null){return c(this,void 0,void 0,(function*(){let n=this.getUrlPathFromIds(t,e?e.id:null);const i=yield h(n,r);return o()(!Array.isArray(i)),i}))}static getById(t,e){return c(this,void 0,void 0,(function*(){return new this(yield this.getDataById(t,e))}))}static getUrlPathFromIds(t,e){o()("string"==typeof this.contentUrlTemplate);let r=this.contentUrlTemplate.replace("{content_id}",t.toString());return e&&(r=r.replace("{course_id}",e.toString())),r}static getAllUrl(t=null,e=null){o()("string"==typeof this.allContentUrlTemplate);let r=this.allContentUrlTemplate;return t&&(r=r.replace("{course_id}",t.toString())),e&&(r=r.replace("{account_id}",e.toString())),r}static getAll(t=null){return c(this,void 0,void 0,(function*(){let e=this.getAllUrl();return(yield g(e,t)).map((t=>new this(t)))}))}get id(){const t=this.canvasData[this.constructor.idProperty];return parseInt(t)}get name(){let t=this.getClass().nameProperty;return o()(t),this.getItem(t)}saveData(t){return c(this,void 0,void 0,(function*(){return o()(this.contentUrlPath),yield h(this.contentUrlPath,{fetchInit:{method:"PUT",body:f(t)}})}))}delete(){return c(this,void 0,void 0,(function*(){return o()(this.contentUrlPath),yield h(this.contentUrlPath,{fetchInit:{method:"DELETE"}})}))}}v.idProperty="id",v.nameProperty=null,v.contentUrlTemplate=null,v.allContentUrlTemplate=null;class A extends v{static getFromUrl(t=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI);let e=/accounts\/(\d+)/.exec(t);return e?(console.log(e),yield this.getById(parseInt(e[1]))):null}))}static getById(t,e=void 0){return c(this,void 0,void 0,(function*(){const r=yield this.getDataById(t,null,e);return console.assert(),new A(r)}))}static getRootAccount(t=!1){return c(this,void 0,void 0,(function*(){let e=yield this.getAll();if(!t&&this.hasOwnProperty("account")&&this.account)return this.account;let r=e.find((t=>null===t.rootAccountId));return o()(r),this.account=r,r}))}get rootAccountId(){return this.canvasData.root_account_id}}A.nameProperty="name",A.contentUrlTemplate="accounts/{content_id}",A.allContentUrlTemplate="accounts";class w extends v{constructor(){super(...arguments),this._modules=void 0,this.modulesByWeekNumber=void 0}static getFromUrl(t=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI);let e=/courses\/(\d+)/.exec(t);if(e){console.log(e);const r=this.getIdFromUrl(t);return r?yield this.getById(r):null}return null}))}static getIdFromUrl(t){let e=/courses\/(\d+)/.exec(t);return e?parseInt(e[1]):null}static stringIsCourseCode(t){return this.CODE_REGEX.exec(t)}static getContentClassFromUrl(t=null){t||(t=document.documentURI);for(let e of this.contentClasses)if(console.log(e,e.contentUrlPart),e.contentUrlPart&&t.includes(e.contentUrlPart))return e;return null}static getById(t,e=void 0){return c(this,void 0,void 0,(function*(){const r=yield b(`courses/${t}`,e);return new w(r)}))}static getCoursesByString(t,e=null,r={}){return c(this,void 0,void 0,(function*(){let n=null;const o=yield w.getAccountIdsByName();for(let i in o){let a=`accounts/${o[i]}/courses`;if(r.queryParams=r.queryParams||{},r.queryParams.search_term=t,null!==e&&(r.queryParams.enrollment_term_id=e.id),n=yield g(a,r),n&&n.length>0)break}return n&&0!==n.length?(n.length>1&&n.sort(((t,e)=>e.id-t.id)),n.map((t=>new w(t)))):null}))}static getAllByCode(t,e=null,r=void 0){return c(this,void 0,void 0,(function*(){return this.getCoursesByString(t,e,r)}))}static getByCode(t,e=null,r=void 0){return c(this,void 0,void 0,(function*(){const n=yield this.getCoursesByString(t,e,r);return Array.isArray(n)?n[0]:null}))}static getAccountIdsByName(){return c(this,void 0,void 0,(function*(){let t=yield w.getFromUrl();return t?{root:t.canvasData.root_account_id,current:t.canvasData.accountId}:(console.warn("You must be on a canvas page to get accounts"),{})}))}get contentUrlPath(){return`courses/${this.id}`}get courseUrl(){return this.htmlContentUrl}get courseCode(){let t=this.codeMatch;return t?`${t[1]||""}_${t[2]||""}`:null}get fullCourseCode(){return this.canvasData.course_code}get codeMatch(){return w.CODE_REGEX.exec(this.canvasData.course_code)}get baseCode(){let t=this.codeMatch;return t?t[2]:""}get termId(){return this.canvasData.enrollment_term_id}getTerm(){return c(this,void 0,void 0,(function*(){return this.termId?_.getTermById(this.termId):null}))}get codePrefix(){let t=this.codeMatch;return t?t[1]:""}get isBlueprint(){return"blueprint"in this.canvasData&&this.canvasData.blueprint}get isPublished(){return"available"===this.canvasData.workflow_state}getModules(){return c(this,void 0,void 0,(function*(){if(this._modules)return this._modules;let t=yield g(`${this.contentUrlPath}/modules?include[]=items&include[]=content_details`);return this._modules=t,t}))}getContentItemFromUrl(t=null){return c(this,void 0,void 0,(function*(){let e=w.getContentClassFromUrl(t);return e?e.getFromUrl(t):null}))}getModulesByWeekNumber(){return c(this,void 0,void 0,(function*(){if(this.modulesByWeekNumber)return this.modulesByWeekNumber;let t=yield this.getModules(),e={};for(let r of t){let t=y(r);t&&(e[t]=r)}return this.modulesByWeekNumber=e,e}))}getModuleItemLinks(t,e){return c(this,void 0,void 0,(function*(){o()(e.hasOwnProperty("type"));let r,n,i=e.type,a=e.hasOwnProperty("search")?e.search:null,s=isNaN(e.index)?null:e.index;if("number"==typeof t){let e=yield this.getModulesByWeekNumber();o()(e.hasOwnProperty(t)),r=t,n=e[r]}else n=t,r=y(n);const c=[];if(n&&void 0!==i)if("Page"===i&&a)(yield this.getPages({queryParams:{search_term:a}})).forEach((t=>c.push(t.htmlContentUrl)));else if(i){s&&"Discussion"===i&&1===r&&s++;const t=n.items.filter((t=>t.type===i));if(s&&t.length>=s){const e=t[s-1];c.push(e.html_url)}else if(!s)for(let e of t)c.push(e.html_url)}return c}))}getSyllabus(){return c(this,void 0,void 0,(function*(){if(!("syllabus_body"in this.canvasData)){const t=yield w.getById(this.id,{"include[]":"syllabus_body"});this.canvasData.syllabus_body=t.canvasData.syllabus_body}return this.canvasData.syllabus_body}))}getAssignments(t={queryParams:{include:["due_at"]}}){return c(this,void 0,void 0,(function*(){return yield j.getAllInCourse(this,t)}))}getQuizzes(t={include:["due_at"]}){return c(this,void 0,void 0,(function*(){return yield S.getAllInCourse(this,{queryParams:t})}))}getAssociatedCourses(){return c(this,void 0,void 0,(function*(){if(!this.isBlueprint)return null;const t=`courses/${this.id}/blueprint_templates/default/associated_courses`;return(yield g(t,{queryParams:{per_page:50}})).map((t=>new w(t)))}))}getSubsections(){return c(this,void 0,void 0,(function*(){const t=`/api/v1/courses/${this.id}/sections`;return yield h(t)}))}getTabs(){return c(this,void 0,void 0,(function*(){return yield h(`courses/${this.id}/tabs`)}))}getFrontPage(){return c(this,void 0,void 0,(function*(){try{const t=yield b(`${this.contentUrlPath}/front_page`);return new O(t,this)}catch(t){return null}}))}getTab(t){return this.canvasData.tabs.find((e=>e.label===t))||null}setNavigationTabHidden(t,e){return c(this,void 0,void 0,(function*(){const r=this.getTab(t);return r?yield h(`courses/${this.id}/tabs/${r.id}`,{queryParams:{hidden:e}}):null}))}changeSyllabus(t){return c(this,void 0,void 0,(function*(){return this.canvasData.syllabus_body=t,yield h(`courses/${this.id}`,{fetchInit:{method:"PUT",body:JSON.stringify({"course[syllabus_body]":t})}})}))}getPotentialSections(t){return c(this,void 0,void 0,(function*(){return yield w.getAllByCode(this.baseCode,t)}))}lockBlueprint(){return c(this,void 0,void 0,(function*(){const t=yield this.getModules();let e=[];e=e.concat(...t.map((t=>[].concat(...t.items))));const r=e.map((t=>c(this,void 0,void 0,(function*(){const e=`${this.contentUrlPath}/blueprint_templates/default/restrict_item`;let{type:r,id:n}=yield function(t){return c(this,void 0,void 0,(function*(){let e,r;return o()(u.hasOwnProperty(t.type),"Unexpected type "+t.type),r=u[t.type],"wiki_page"===r?(o()(t.url),e=(yield m(t.url)).page_id):e=t.content_id,{type:r,id:e}}))}(t),i={content_type:r,content_id:n,restricted:!0,_method:"PUT"};console.log(i),yield h(e,{fetchInit:{method:"PUT",body:f(i)}})}))));yield Promise.all(r)}))}setAsBlueprint(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;this.canvasData=yield b(t,{fetchInit:{method:"PUT",body:JSON.stringify({"course[blueprint]":!0,"course[use_blueprint_restrictions_by_object_type]":0,"course[blueprint_restrictions][content]":1,"course[blueprint_restrictions][points]":1,"course[blueprint_restrictions][due_dates]":1,"course[blueprint_restrictions][availability_dates]":1})}}),this.resetCache()}))}unsetAsBlueprint(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;this.canvasData=yield b(t,{fetchInit:{method:"PUT",body:JSON.stringify({"course[blueprint]":!1})}}),this.resetCache()}))}resetCache(){}publish(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`,e=yield b(t,{fetchInit:{method:"PUT",body:JSON.stringify({offer:!0})}});console.log(e),this.canvasData=e,this.resetCache()}))}unpublish(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;yield h(t,{fetchInit:{method:"PUT",body:JSON.stringify({"course[event]":"claim"})}}),this.canvasData=(yield w.getById(this.id)).rawData}))}contentUpdatesAndFixes(t=null){return c(this,void 0,void 0,(function*(){throw new T}))}reset(t=!0){return c(this,void 0,void 0,(function*(){if(t&&!confirm(`Are you sure you want to reset ${this.courseCode}?`))return!1;const e=`/courses/${this.id}/reset_content`,r=yield b(e,{fetchInit:{method:"POST"}});return this.canvasData.id=r.id,!1}))}importDevCourse(t=!1,e){return c(this,void 0,void 0,(function*(){const r=yield this.getParentCourse();if(!r)throw new k(`DEV not found for ${this.name}.`);t&&!(yield t(r,this))||(yield this.importCourse(r,e))}))}importCourse(t,e){return c(this,void 0,void 0,(function*(){throw new T}))}getParentCourse(t=!1){return c(this,void 0,void 0,(function*(){let e=yield g(`courses/${this.id}/content_migrations`);if(e.length<1)return console.log("no migrations found"),t?w.getByCode("DEV_"+this.baseCode):null;e.sort(((t,e)=>e.id-t.id));try{for(let t of e){let e=yield w.getById(t.settings.source_course_id);if("DEV"===e.codePrefix)return e}}catch(t){return yield w.getByCode("DEV_"+this.baseCode)}}))}generateHomeTiles(){return c(this,void 0,void 0,(function*(){const t=yield this.getModules(),e=[];for(let r of t)e.push(this.generateHomeTile(r));yield Promise.all(e)}))}generateHomeTile(t){return c(this,void 0,void 0,(function*(){let e=t.items.find((t=>"Page"===t.type&&t.title.toLowerCase().includes("overview")));if(!(null==e?void 0:e.url))return;o()(e.url);const r=e.url.replace(/https:\/\/.*api\/v1/,"/api/v1"),n=yield m(r),a=new O(n,this),s=document.createElement("html");s.innerHTML=a.body;let l=s.querySelector(".cbt-banner-image img");o()(l,"Page has no banner"),yield function(t){return c(this,void 0,void 0,(function*(){yield i.runtime.sendMessage("downloadFile",t)}))}({method:"GET",url:l.src})}))}uploadFile(t,e){return c(this,void 0,void 0,(function*(){let r=`/api/v1/courses/${this.id}/files`;t.name;const n={name:t.name,no_redirect:!0,parent_folder:e,on_duplicate:"overwrite"};let i=yield fetch(r,{body:f(n),method:"POST"});o()(i.ok,yield i.json());const a=(yield i.json()).upload_params,s=f(a);s.append("file",t),i=yield fetch(a.url,{body:s}),o()(i.ok,yield i.text())}))}static registerContentClass(t){this.contentClasses.push(t)}getPages(t=null){return O.getAllInCourse(this,t)}}w.CODE_REGEX=/^(.+[^_])?_?(\w{4}\d{3})/i,w.contentClasses=[];class x extends v{constructor(t,e){super(t),this._course=e}static get contentUrlPart(){o()(this.allContentUrlTemplate,"Not a content url template");const t=/\/([\w_]+)$/.exec(this.allContentUrlTemplate);return console.log(this.allContentUrlTemplate,t),t?t[1]:null}static get contentUrlRegex(){o()(this.contentUrlTemplate,`Class ${this.toString()} does not have a content url property`);let t=this.contentUrlTemplate.replace(/\{[^}]+\}/,"(d+)");return new RegExp(t)}static getIdFromUrl(t){o()(this.contentUrlTemplate);let e=/courses\/(\d+)/.exec(t);return e?parseInt(e[1]):null}static getAllInCourse(t,e=null){return c(this,void 0,void 0,(function*(){let r=this.getAllUrl(t.id);return(yield g(r,e)).map((e=>new this(e,t)))}))}static clearAddedContentTags(t){let e=t.replace(/<\/?link[^>]*>/g,"");return e=e.replace(/<\/?script[^>]*>/g,""),e}static getFromUrl(t=null,e=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI),t=t.replace(/\.com/,".com/api/v1");let r=yield m(t);return e||(e=yield w.getFromUrl())?Array.isArray(r)?null:(o()(!Array.isArray(r)),r?new this(r,e):null):null}))}get bodyKey(){return this.myClass.bodyProperty}get body(){return this.bodyKey?this.myClass.clearAddedContentTags(this.canvasData[this.bodyKey]):null}get dueAt(){return this.canvasData.hasOwnProperty("due_at")?new Date(this.canvasData.due_at):null}setDueAt(t){return c(this,void 0,void 0,(function*(){throw new T}))}dueAtTimeDelta(t){return c(this,void 0,void 0,(function*(){if(!this.dueAt)return null;let e=new Date(this.dueAt);return e.setDate(e.getDate()+t),yield this.setDueAt(e)}))}get contentUrlPath(){let t=this.constructor.contentUrlTemplate;return o()(t),t=t.replace("{course_id}",this.course.id.toString()),t=t.replace("{content_id}",this.id.toString()),t}get course(){return this._course}updateContent(t=null,e=null){return c(this,void 0,void 0,(function*(){const r={},n=this.constructor;o()(n.bodyProperty),o()(n.nameProperty);const i=n.nameProperty,a=n.bodyProperty;return t&&a&&(this.canvasData[a]=t,r[a]=t),e&&i&&(this.canvasData[i]=e,r[i]=e),this.saveData(r)}))}getMeInAnotherCourse(t){return c(this,void 0,void 0,(function*(){let e=this.constructor;return(yield e.getAllInCourse(t,{queryParams:{search_term:this.name}})).find((t=>t.name==this.name))}))}getAllLinks(){const t=this.bodyAsElement.querySelectorAll("a"),e=[];for(let r of t)e.push(r.href);return e}get bodyAsElement(){o()(this.body,"This content item has no body property");let t=document.createElement("div");return t.innerHTML=this.body,t}}(()=>{let t,e,r=[I],n=[],o=x;e=class extends o{},l(e,"Discussion"),(()=>{var i;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(i=o[Symbol.metadata])&&void 0!==i?i:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.nameProperty="title",e.bodyProperty="message",e.contentUrlTemplate="courses/{course_id}/discussion_topics/{content_id}",e.allContentUrlTemplate="courses/{course_id}/discussion_topics",s(e,n)})();let j=(()=>{let t,e,r=[I],n=[],o=x;return e=class extends o{setDueAt(t){return c(this,void 0,void 0,(function*(){let e=yield this.saveData({"assignment[due_at]":t.toISOString()});return this.canvasData.due_at=t.toISOString(),e}))}},l(e,"Assignment"),(()=>{var i;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(i=o[Symbol.metadata])&&void 0!==i?i:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.nameProperty="name",e.bodyProperty="description",e.contentUrlTemplate="courses/{course_id}/assignments/{content_id}",e.allContentUrlTemplate="courses/{course_id}/assignments",s(e,n),e})(),S=(()=>{let t,e,r=[I],n=[],o=x;return e=class extends o{setDueAt(t){return c(this,void 0,void 0,(function*(){let e=yield this.saveData({"quiz[due_at]":t.toISOString()});return this.canvasData.due_at=t.toISOString(),e}))}},l(e,"Quiz"),(()=>{var i;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(i=o[Symbol.metadata])&&void 0!==i?i:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.nameProperty="title",e.bodyProperty="description",e.contentUrlTemplate="courses/{course_id}/quizzes/{content_id}",e.allContentUrlTemplate="courses/{course_id}/quizzes",s(e,n),e})(),O=(()=>{let t,e,r=[I],n=[],i=x;return e=class extends i{static getFromUrl(t=null,e=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI),t=t.replace(/\.com/,".com/api/v1");let r=yield m(t);return e||(e=yield w.getFromUrl())?Array.isArray(r)?null:(o()(!Array.isArray(r)),r?new this(r,e):null):null}))}getRevisions(){return c(this,void 0,void 0,(function*(){return d(`${this.contentUrlPath}/revisions`)}))}revertLastChangeSet(t=1){return c(this,void 0,void 0,(function*(){let e=yield this.getRevisions();if(e.sort(((t,e)=>e.revision_id-t.revision_id)),e.length<=t)return console.warn(`Tried to revert ${this.name} but there isn't a previous revision`),null;let r=e[t];yield this.applyRevision(r)}))}resetContent(t=1){return c(this,void 0,void 0,(function*(){let e=(yield this.getRevisions()).find((e=>e.revision_id===t));if(!e)throw new Error(`No revision found for ${t}`);yield this.applyRevision(e)}))}applyRevision(t){return c(this,void 0,void 0,(function*(){const e=t.revision_id;let r=yield b(`${this.contentUrlPath}/revisions/${e}?revision_id=${e}`);this.canvasData[this.bodyKey]=r.body,this.canvasData[this.nameKey]=r.title}))}get body(){return this.canvasData[this.bodyKey]}updateContent(t=null,e=null){return c(this,void 0,void 0,(function*(){let r={};return t&&(this.canvasData[this.bodyKey]=t,r["wiki_page[body]"]=t),e&&(this.canvasData[this.nameKey]=e,r[this.nameKey]=e),this.saveData(r)}))}},l(e,"Page"),(()=>{var o;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(o=i[Symbol.metadata])&&void 0!==o?o:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.idProperty="page_id",e.nameProperty="title",e.bodyProperty="body",e.contentUrlTemplate="courses/{course_id}/pages/{content_id}",e.allContentUrlTemplate="courses/{course_id}/pages",s(e,n),e})();class P extends x{associations(t=!1){return c(this,void 0,void 0,(function*(){if("associations"in this.canvasData&&!t)return this.canvasData.associations;let e=(yield this.myClass.getDataById(this.id,this.course,{params:{include:["associations"]}})).associations.map((t=>new E(t,this.course)));return this.canvasData.associations=e,e}))}}P.nameProperty="title",P.contentUrlTemplate="courses/{course_id}/rubrics/{content_id}",P.allContentUrlTemplate="courses/{course_id}/rubrics";class E extends x{get useForGrading(){return this.canvasData.use_for_grading}setUseForGrading(t){return c(this,void 0,void 0,(function*(){return this.canvasData.use_for_grading=t,yield this.saveData({"rubric_association[use_for_grading]":t})}))}}E.contentUrlTemplate="courses/{course_id}/rubric_associations/{content_id}",E.allContentUrlTemplate="courses/{course_id}/rubric_associations";class _ extends v{get code(){return this.canvasData.name}static getTerm(t,e="all",r=void 0){return c(this,void 0,void 0,(function*(){const n=yield this.searchTerms(t,e,r);return!Array.isArray(n)||n.length<=0?null:n[0]}))}static getTermById(t,e=null){return c(this,void 0,void 0,(function*(){let e=`accounts/${(yield A.getRootAccount()).id}/terms/${t}`,r=yield h(e);return r?new _(r):null}))}static getAllActiveTerms(t=null){return c(this,void 0,void 0,(function*(){return yield this.searchTerms(null,"active",t)}))}static searchTerms(t=null,e="all",r=null){return c(this,void 0,void 0,(function*(){(r=r||{}).queryParams=r.queryParams||{};let n=r.queryParams;e&&(n.workflow_state=e),t&&(n.term_name=t);let i=yield A.getRootAccount();o()(i);let a=`accounts/${i.id}/terms`;const s=yield g(a,r);let c=[];for(let t of s)if(t.hasOwnProperty("enrollment_terms"))for(let e of t.enrollment_terms)c.push(e);else c.push(t);return console.log(c),c&&0!==c.length?c.map((t=>new _(t))):null}))}get startDate(){return new Date(this.data.start_at)}get endDate(){return new Date(this.data.end_at)}}class T extends Error{}class k extends Error{}function I(t,e){w.registerContentClass(t)}},1135:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},9032:(t,e,r)=>{"use strict";var n=r(7244),o=r(8184),i=r(5767),a=r(5680);function s(t){return t.call.bind(t)}var c="undefined"!=typeof BigInt,l="undefined"!=typeof Symbol,u=s(Object.prototype.toString),f=s(Number.prototype.valueOf),p=s(String.prototype.valueOf),y=s(Boolean.prototype.valueOf);if(c)var g=s(BigInt.prototype.valueOf);if(l)var d=s(Symbol.prototype.valueOf);function m(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function h(t){return"[object Map]"===u(t)}function b(t){return"[object Set]"===u(t)}function v(t){return"[object WeakMap]"===u(t)}function A(t){return"[object WeakSet]"===u(t)}function w(t){return"[object ArrayBuffer]"===u(t)}function x(t){return"undefined"!=typeof ArrayBuffer&&(w.working?w(t):t instanceof ArrayBuffer)}function j(t){return"[object DataView]"===u(t)}function S(t){return"undefined"!=typeof DataView&&(j.working?j(t):t instanceof DataView)}e.isArgumentsObject=n,e.isGeneratorFunction=o,e.isTypedArray=a,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):a(t)||S(t)},e.isUint8Array=function(t){return"Uint8Array"===i(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===i(t)},e.isUint16Array=function(t){return"Uint16Array"===i(t)},e.isUint32Array=function(t){return"Uint32Array"===i(t)},e.isInt8Array=function(t){return"Int8Array"===i(t)},e.isInt16Array=function(t){return"Int16Array"===i(t)},e.isInt32Array=function(t){return"Int32Array"===i(t)},e.isFloat32Array=function(t){return"Float32Array"===i(t)},e.isFloat64Array=function(t){return"Float64Array"===i(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===i(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===i(t)},h.working="undefined"!=typeof Map&&h(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(h.working?h(t):t instanceof Map)},b.working="undefined"!=typeof Set&&b(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(b.working?b(t):t instanceof Set)},v.working="undefined"!=typeof WeakMap&&v(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(v.working?v(t):t instanceof WeakMap)},A.working="undefined"!=typeof WeakSet&&A(new WeakSet),e.isWeakSet=function(t){return A(t)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),e.isArrayBuffer=x,j.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&j(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=S;var O="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function P(t){return"[object SharedArrayBuffer]"===u(t)}function E(t){return void 0!==O&&(void 0===P.working&&(P.working=P(new O)),P.working?P(t):t instanceof O)}function _(t){return m(t,f)}function T(t){return m(t,p)}function k(t){return m(t,y)}function I(t){return c&&m(t,g)}function U(t){return l&&m(t,d)}e.isSharedArrayBuffer=E,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===u(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===u(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===u(t)},e.isGeneratorObject=function(t){return"[object Generator]"===u(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===u(t)},e.isNumberObject=_,e.isStringObject=T,e.isBooleanObject=k,e.isBigIntObject=I,e.isSymbolObject=U,e.isBoxedPrimitive=function(t){return _(t)||T(t)||k(t)||I(t)||U(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(x(t)||E(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},537:(t,e,r)=>{var n=r(5606),o=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},i=/%[sdj%]/g;e.format=function(t){if(!v(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(l(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,o=n.length,a=String(t).replace(i,(function(t){if("%%"===t)return"%";if(r>=o)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),s=n[r];r<o;s=n[++r])h(s)||!x(s)?a+=" "+s:a+=" "+l(s);return a},e.deprecate=function(t,r){if(void 0!==n&&!0===n.noDeprecation)return t;if(void 0===n)return function(){return e.deprecate(t,r).apply(this,arguments)};var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?console.trace(r):console.error(r),o=!0}return t.apply(this,arguments)}};var a={},s=/^$/;if(n.env.NODE_DEBUG){var c=n.env.NODE_DEBUG;c=c.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),s=new RegExp("^"+c+"$","i")}function l(t,r){var n={seen:[],stylize:f};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),m(r)?n.showHidden=r:r&&e._extend(n,r),A(n.showHidden)&&(n.showHidden=!1),A(n.depth)&&(n.depth=2),A(n.colors)&&(n.colors=!1),A(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),p(n,t,n.depth)}function u(t,e){var r=l.styles[e];return r?"["+l.colors[r][0]+"m"+t+"["+l.colors[r][1]+"m":t}function f(t,e){return t}function p(t,r,n){if(t.customInspect&&r&&O(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return v(o)||(o=p(t,o,n)),o}var i=function(t,e){if(A(e))return t.stylize("undefined","undefined");if(v(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return b(e)?t.stylize(""+e,"number"):m(e)?t.stylize(""+e,"boolean"):h(e)?t.stylize("null","null"):void 0}(t,r);if(i)return i;var a=Object.keys(r),s=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),S(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return y(r);if(0===a.length){if(O(r)){var c=r.name?": "+r.name:"";return t.stylize("[Function"+c+"]","special")}if(w(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(j(r))return t.stylize(Date.prototype.toString.call(r),"date");if(S(r))return y(r)}var l,u="",f=!1,x=["{","}"];return d(r)&&(f=!0,x=["[","]"]),O(r)&&(u=" [Function"+(r.name?": "+r.name:"")+"]"),w(r)&&(u=" "+RegExp.prototype.toString.call(r)),j(r)&&(u=" "+Date.prototype.toUTCString.call(r)),S(r)&&(u=" "+y(r)),0!==a.length||f&&0!=r.length?n<0?w(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),l=f?function(t,e,r,n,o){for(var i=[],a=0,s=e.length;a<s;++a)T(e,String(a))?i.push(g(t,e,r,n,String(a),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(g(t,e,r,n,o,!0))})),i}(t,r,n,s,a):a.map((function(e){return g(t,r,n,s,e,f)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(l,u,x)):x[0]+u+x[1]}function y(t){return"["+Error.prototype.toString.call(t)+"]"}function g(t,e,r,n,o,i){var a,s,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?s=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(s=t.stylize("[Setter]","special")),T(n,o)||(a="["+o+"]"),s||(t.seen.indexOf(c.value)<0?(s=h(r)?p(t,c.value,null):p(t,c.value,r-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(t){return"  "+t})).join("\n").slice(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),A(a)){if(i&&o.match(/^\d+$/))return s;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.slice(1,-1),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function d(t){return Array.isArray(t)}function m(t){return"boolean"==typeof t}function h(t){return null===t}function b(t){return"number"==typeof t}function v(t){return"string"==typeof t}function A(t){return void 0===t}function w(t){return x(t)&&"[object RegExp]"===P(t)}function x(t){return"object"==typeof t&&null!==t}function j(t){return x(t)&&"[object Date]"===P(t)}function S(t){return x(t)&&("[object Error]"===P(t)||t instanceof Error)}function O(t){return"function"==typeof t}function P(t){return Object.prototype.toString.call(t)}function E(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!a[t])if(s.test(t)){var r=n.pid;a[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else a[t]=function(){};return a[t]},e.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(9032),e.isArray=d,e.isBoolean=m,e.isNull=h,e.isNullOrUndefined=function(t){return null==t},e.isNumber=b,e.isString=v,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=A,e.isRegExp=w,e.types.isRegExp=w,e.isObject=x,e.isDate=j,e.types.isDate=j,e.isError=S,e.types.isNativeError=S,e.isFunction=O,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(1135);var _=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,r;console.log("%s - %s",(r=[E((t=new Date).getHours()),E(t.getMinutes()),E(t.getSeconds())].join(":"),[t.getDate(),_[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=r(6698),e._extend=function(t,e){if(!e||!x(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var k="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function I(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(k&&t[k]){var e;if("function"!=typeof(e=t[k]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,k,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,o)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),k&&Object.defineProperty(e,k,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,o(t))},e.promisify.custom=k,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var o=e.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,a=function(){return o.apply(i,arguments)};t.apply(this,e).then((function(t){n.nextTick(a.bind(null,null,t))}),(function(t){n.nextTick(I.bind(null,t,a))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,o(t)),e}},6815:function(t,e){var r,n;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,r=function(t){"use strict";if(!globalThis.chrome?.runtime?.id)throw new Error("This script should only be loaded in a browser extension.");if(void 0===globalThis.browser||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const e="The message port closed before a response was received.",r=t=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class n extends WeakMap{constructor(t,e=void 0){super(e),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const o=(e,r)=>(...n)=>{t.runtime.lastError?e.reject(new Error(t.runtime.lastError.message)):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?e.resolve(n[0]):e.resolve(n)},i=t=>1==t?"argument":"arguments",a=(t,e,r)=>new Proxy(e,{apply:(e,n,o)=>r.call(n,t,...o)});let s=Function.call.bind(Object.prototype.hasOwnProperty);const c=(t,e={},r={})=>{let n=Object.create(null),l={has:(e,r)=>r in t||r in n,get(l,u,f){if(u in n)return n[u];if(!(u in t))return;let p=t[u];if("function"==typeof p)if("function"==typeof e[u])p=a(t,t[u],e[u]);else if(s(r,u)){let e=((t,e)=>function(r,...n){if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((i,a)=>{if(e.fallbackToNoCallback)try{r[t](...n,o({resolve:i,reject:a},e))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),r[t](...n),e.fallbackToNoCallback=!1,e.noCallback=!0,i()}else e.noCallback?(r[t](...n),i()):r[t](...n,o({resolve:i,reject:a},e))}))})(u,r[u]);p=a(t,t[u],e)}else p=p.bind(t);else if("object"==typeof p&&null!==p&&(s(e,u)||s(r,u)))p=c(p,e[u],r[u]);else{if(!s(r,"*"))return Object.defineProperty(n,u,{configurable:!0,enumerable:!0,get:()=>t[u],set(e){t[u]=e}}),p;p=c(p,e[u],r["*"])}return n[u]=p,p},set:(e,r,o,i)=>(r in n?n[r]=o:t[r]=o,!0),defineProperty:(t,e,r)=>Reflect.defineProperty(n,e,r),deleteProperty:(t,e)=>Reflect.deleteProperty(n,e)},u=Object.create(t);return new Proxy(u,l)},l=t=>({addListener(e,r,...n){e.addListener(t.get(r),...n)},hasListener:(e,r)=>e.hasListener(t.get(r)),removeListener(e,r){e.removeListener(t.get(r))}}),u=new n((t=>"function"!=typeof t?t:function(e){const r=c(e,{},{getContent:{minArgs:0,maxArgs:0}});t(r)})),f=new n((t=>"function"!=typeof t?t:function(e,r,n){let o,i,a=!1,s=new Promise((t=>{o=function(e){a=!0,t(e)}}));try{i=t(e,r,o)}catch(t){i=Promise.reject(t)}const c=!0!==i&&((l=i)&&"object"==typeof l&&"function"==typeof l.then);var l;if(!0!==i&&!c&&!a)return!1;return(c?i:s).then((t=>{n(t)}),(t=>{let e;e=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",n({__mozWebExtensionPolyfillReject__:!0,message:e})})).catch((t=>{console.error("Failed to send onMessage rejected reply",t)})),!0})),p=({reject:r,resolve:n},o)=>{t.runtime.lastError?t.runtime.lastError.message===e?n():r(new Error(t.runtime.lastError.message)):o&&o.__mozWebExtensionPolyfillReject__?r(new Error(o.message)):n(o)},y=(t,e,r,...n)=>{if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((t,e)=>{const o=p.bind(null,{resolve:t,reject:e});n.push(o),r.sendMessage(...n)}))},g={devtools:{network:{onRequestFinished:l(u)}},runtime:{onMessage:l(f),onMessageExternal:l(f),sendMessage:y.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:y.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},d={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":d},services:{"*":d},websites:{"*":d}},c(t,g,r)};t.exports=r(chrome)}else t.exports=globalThis.browser},void 0===(n=r.apply(e,[t]))||(t.exports=n)},5767:(t,e,r)=>{"use strict";var n=r(2682),o=r(9209),i=r(487),a=r(8075),s=r(5795),c=a("Object.prototype.toString"),l=r(9092)(),u="undefined"==typeof globalThis?r.g:globalThis,f=o(),p=a("String.prototype.slice"),y=Object.getPrototypeOf,g=a("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},d={__proto__:null};n(f,l&&s&&y?function(t){var e=new u[t];if(Symbol.toStringTag in e){var r=y(e),n=s(r,Symbol.toStringTag);if(!n){var o=y(r);n=s(o,Symbol.toStringTag)}d["$"+t]=i(n.get)}}:function(t){var e=new u[t],r=e.slice||e.set;r&&(d["$"+t]=i(r))}),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!l){var e=p(c(t),8,-1);return g(f,e)>-1?e:"Object"===e&&function(t){var e=!1;return n(d,(function(r,n){if(!e)try{r(t),e=p(n,1)}catch(t){}})),e}(t)}return s?function(t){var e=!1;return n(d,(function(r,n){if(!e)try{"$"+r(t)===n&&(e=p(n,1))}catch(t){}})),e}(t):null}},9209:(t,e,r)=>{"use strict";var n=r(6578),o="undefined"==typeof globalThis?r.g:globalThis;t.exports=function(){for(var t=[],e=0;e<n.length;e++)"function"==typeof o[n[e]]&&(t[t.length]=n[e]);return t}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t,e,n=r(5722),o=r(4148),i=r.n(o);e=function*(){const t=yield n.x1.getAllActiveTerms();i()(t);let e=t.find((t=>t.name.search(/DE8W/))),r=t.find((t=>t.name.search(/DE(\/?HL)?-\s{3}-\d+-\d+/))),o=document.getElementById("termFilter");console.log(o),console.log(t),console.log(e),console.log(r)},new((t=void 0)||(t=Promise))((function(r,n){function o(t){try{a(e.next(t))}catch(t){n(t)}}function i(t){try{a(e.throw(t))}catch(t){n(t)}}function a(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(t){t(n)}))).then(o,i)}a((e=e.apply(void 0,[])).next())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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YixFQUNoQixDQUFFLE1BQU9sRSxHQUNSLEdBQXNCLGlCQUFYd2dCLE9BQXFCLE9BQU9BLE1BQ3hDLENBQ0EsQ0FQdUIsR0NBeEI0aEIsRUFBb0JucEMsRUFBSSxDQUFDMEQsRUFBS3MvQixJQUFVbGlDLE9BQU9WLFVBQVVvVSxlQUFlalQsS0FBS21DLEVBQUtzL0IsNkRDSXZFLFlBRVAsTUFBTXlHLFFBQW9CLEtBQUszTixvQkFDL0IsSUFBTzJOLEdBRVAsSUFBSUMsRUFBNkJELEVBQVl2YixNQUFNMEQsR0FBU0EsRUFBS3ByQixLQUFLaUcsT0FBTyxVQUN6RWs5QixFQUEyQkYsRUFBWXZiLE1BQU0wRCxHQUFTQSxFQUFLcHJCLEtBQUtpRyxPQUFPLDhCQUV2RW05QixFQUFTbGxCLFNBQVNtbEIsZUFBZSxjQUNyQzFrQyxRQUFRNkssSUFBSTQ1QixHQUNaemtDLFFBQVE2SyxJQUFJeTVCLEdBQ1p0a0MsUUFBUTZLLElBQUkwNUIsR0FDWnZrQyxRQUFRNkssSUFBSTI1QixFQUVoQixjQWRXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9idWlsZC9hc3NlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fzc2VydC9idWlsZC9pbnRlcm5hbC9hc3NlcnQvYXNzZXJ0aW9uX2Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvaW50ZXJuYWwvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3NlcnQvYnVpbGQvaW50ZXJuYWwvdXRpbC9jb21wYXJpc29ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2NhbGxCb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWZpbmUtZGF0YS1wcm9wZXJ0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWRlZmluZS1wcm9wZXJ0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL2V2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvcmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvc3ludGF4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3VyaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm9yLWVhY2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dvcGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1wcm9wZXJ0eS1kZXNjcmlwdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLXByb3RvL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy10b3N0cmluZ3RhZy9zaGFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzb3duL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1hcmd1bWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWNhbGxhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1nZW5lcmF0b3ItZnVuY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLW5hbi9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtbmFuL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1uYW4vcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLW5hbi9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy10eXBlZC1hcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Bvc3NpYmxlLXR5cGVkLWFycmF5LW5hbWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldC1mdW5jdGlvbi1sZW5ndGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhbnZhcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L3R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC9kaXN0L2Jyb3dzZXItcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doaWNoLXR5cGVkLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdmFpbGFibGUtdHlwZWQtYXJyYXlzL2luZGV4LmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYWNjb3VudC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2Fzc2VydC5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8yYTUxYWU0MjRhNTEzZWM5YTZhYTM0NjZiYWEwY2MxZDU1ZGQ0ZjNiXG5cbi8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZylcbi8vIENvcHlyaWdodCAoYykgMjAwOSBUaG9tYXMgUm9iaW5zb24gPDI4MG5vcnRoLmNvbT5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG9cbi8vIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG4vLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Jcbi8vIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvZXJyb3JzJyksXG4gIF9yZXF1aXJlJGNvZGVzID0gX3JlcXVpcmUuY29kZXMsXG4gIEVSUl9BTUJJR1VPVVNfQVJHVU1FTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfQU1CSUdVT1VTX0FSR1VNRU5ULFxuICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFLFxuICBFUlJfSU5WQUxJRF9BUkdfVkFMVUUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVkFMVUUsXG4gIEVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSxcbiAgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1M7XG52YXIgQXNzZXJ0aW9uRXJyb3IgPSByZXF1aXJlKCcuL2ludGVybmFsL2Fzc2VydC9hc3NlcnRpb25fZXJyb3InKTtcbnZhciBfcmVxdWlyZTIgPSByZXF1aXJlKCd1dGlsLycpLFxuICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG52YXIgX3JlcXVpcmUkdHlwZXMgPSByZXF1aXJlKCd1dGlsLycpLnR5cGVzLFxuICBpc1Byb21pc2UgPSBfcmVxdWlyZSR0eXBlcy5pc1Byb21pc2UsXG4gIGlzUmVnRXhwID0gX3JlcXVpcmUkdHlwZXMuaXNSZWdFeHA7XG52YXIgb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LmFzc2lnbi9wb2x5ZmlsbCcpKCk7XG52YXIgb2JqZWN0SXMgPSByZXF1aXJlKCdvYmplY3QtaXMvcG9seWZpbGwnKSgpO1xudmFyIFJlZ0V4cFByb3RvdHlwZVRlc3QgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJykoJ1JlZ0V4cC5wcm90b3R5cGUudGVzdCcpO1xudmFyIGVycm9yQ2FjaGUgPSBuZXcgTWFwKCk7XG52YXIgaXNEZWVwRXF1YWw7XG52YXIgaXNEZWVwU3RyaWN0RXF1YWw7XG52YXIgcGFyc2VFeHByZXNzaW9uQXQ7XG52YXIgZmluZE5vZGVBcm91bmQ7XG52YXIgZGVjb2RlcjtcbmZ1bmN0aW9uIGxhenlMb2FkQ29tcGFyaXNvbigpIHtcbiAgdmFyIGNvbXBhcmlzb24gPSByZXF1aXJlKCcuL2ludGVybmFsL3V0aWwvY29tcGFyaXNvbnMnKTtcbiAgaXNEZWVwRXF1YWwgPSBjb21wYXJpc29uLmlzRGVlcEVxdWFsO1xuICBpc0RlZXBTdHJpY3RFcXVhbCA9IGNvbXBhcmlzb24uaXNEZWVwU3RyaWN0RXF1YWw7XG59XG5cbi8vIEVzY2FwZSBjb250cm9sIGNoYXJhY3RlcnMgYnV0IG5vdCBcXG4gYW5kIFxcdCB0byBrZWVwIHRoZSBsaW5lIGJyZWFrcyBhbmRcbi8vIGluZGVudGF0aW9uIGludGFjdC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG52YXIgZXNjYXBlU2VxdWVuY2VzUmVnRXhwID0gL1tcXHgwMC1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZl0vZztcbnZhciBtZXRhID0gW1wiXFxcXHUwMDAwXCIsIFwiXFxcXHUwMDAxXCIsIFwiXFxcXHUwMDAyXCIsIFwiXFxcXHUwMDAzXCIsIFwiXFxcXHUwMDA0XCIsIFwiXFxcXHUwMDA1XCIsIFwiXFxcXHUwMDA2XCIsIFwiXFxcXHUwMDA3XCIsICdcXFxcYicsICcnLCAnJywgXCJcXFxcdTAwMGJcIiwgJ1xcXFxmJywgJycsIFwiXFxcXHUwMDBlXCIsIFwiXFxcXHUwMDBmXCIsIFwiXFxcXHUwMDEwXCIsIFwiXFxcXHUwMDExXCIsIFwiXFxcXHUwMDEyXCIsIFwiXFxcXHUwMDEzXCIsIFwiXFxcXHUwMDE0XCIsIFwiXFxcXHUwMDE1XCIsIFwiXFxcXHUwMDE2XCIsIFwiXFxcXHUwMDE3XCIsIFwiXFxcXHUwMDE4XCIsIFwiXFxcXHUwMDE5XCIsIFwiXFxcXHUwMDFhXCIsIFwiXFxcXHUwMDFiXCIsIFwiXFxcXHUwMDFjXCIsIFwiXFxcXHUwMDFkXCIsIFwiXFxcXHUwMDFlXCIsIFwiXFxcXHUwMDFmXCJdO1xudmFyIGVzY2FwZUZuID0gZnVuY3Rpb24gZXNjYXBlRm4oc3RyKSB7XG4gIHJldHVybiBtZXRhW3N0ci5jaGFyQ29kZUF0KDApXTtcbn07XG52YXIgd2FybmVkID0gZmFsc2U7XG5cbi8vIFRoZSBhc3NlcnQgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0aGF0IHRocm93XG4vLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGVcbi8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxuXG52YXIgYXNzZXJ0ID0gbW9kdWxlLmV4cG9ydHMgPSBvaztcbnZhciBOT19FWENFUFRJT05fU0VOVElORUwgPSB7fTtcblxuLy8gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGVcbi8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yXG4vLyBkaXNwbGF5IHB1cnBvc2VzLlxuXG5mdW5jdGlvbiBpbm5lckZhaWwob2JqKSB7XG4gIGlmIChvYmoubWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB0aHJvdyBvYmoubWVzc2FnZTtcbiAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG9iaik7XG59XG5mdW5jdGlvbiBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yLCBzdGFja1N0YXJ0Rm4pIHtcbiAgdmFyIGFyZ3NMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW50ZXJuYWxNZXNzYWdlO1xuICBpZiAoYXJnc0xlbiA9PT0gMCkge1xuICAgIGludGVybmFsTWVzc2FnZSA9ICdGYWlsZWQnO1xuICB9IGVsc2UgaWYgKGFyZ3NMZW4gPT09IDEpIHtcbiAgICBtZXNzYWdlID0gYWN0dWFsO1xuICAgIGFjdHVhbCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAod2FybmVkID09PSBmYWxzZSkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHZhciB3YXJuID0gcHJvY2Vzcy5lbWl0V2FybmluZyA/IHByb2Nlc3MuZW1pdFdhcm5pbmcgOiBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcbiAgICAgIHdhcm4oJ2Fzc2VydC5mYWlsKCkgd2l0aCBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IGlzIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSBhc3NlcnQuc3RyaWN0RXF1YWwoKSBpbnN0ZWFkIG9yIG9ubHkgcGFzcyBhIG1lc3NhZ2UuJywgJ0RlcHJlY2F0aW9uV2FybmluZycsICdERVAwMDk0Jyk7XG4gICAgfVxuICAgIGlmIChhcmdzTGVuID09PSAyKSBvcGVyYXRvciA9ICchPSc7XG4gIH1cbiAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikgdGhyb3cgbWVzc2FnZTtcbiAgdmFyIGVyckFyZ3MgPSB7XG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvciA9PT0gdW5kZWZpbmVkID8gJ2ZhaWwnIDogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm4gfHwgZmFpbFxuICB9O1xuICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXJyQXJncy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxuICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKGVyckFyZ3MpO1xuICBpZiAoaW50ZXJuYWxNZXNzYWdlKSB7XG4gICAgZXJyLm1lc3NhZ2UgPSBpbnRlcm5hbE1lc3NhZ2U7XG4gICAgZXJyLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG4gIHRocm93IGVycjtcbn1cbmFzc2VydC5mYWlsID0gZmFpbDtcblxuLy8gVGhlIEFzc2VydGlvbkVycm9yIGlzIGRlZmluZWQgaW4gaW50ZXJuYWwvZXJyb3IuXG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBBc3NlcnRpb25FcnJvcjtcbmZ1bmN0aW9uIGlubmVyT2soZm4sIGFyZ0xlbiwgdmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHZhciBnZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG4gICAgaWYgKGFyZ0xlbiA9PT0gMCkge1xuICAgICAgZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gICAgICBtZXNzYWdlID0gJ05vIHZhbHVlIGFyZ3VtZW50IHBhc3NlZCB0byBgYXNzZXJ0Lm9rKClgJztcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3cgbWVzc2FnZTtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICBhY3R1YWw6IHZhbHVlLFxuICAgICAgZXhwZWN0ZWQ6IHRydWUsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICc9PScsXG4gICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgfSk7XG4gICAgZXJyLmdlbmVyYXRlZE1lc3NhZ2UgPSBnZW5lcmF0ZWRNZXNzYWdlO1xuICAgIHRocm93IGVycjtcbiAgfVxufVxuXG4vLyBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIXZhbHVlLlxuZnVuY3Rpb24gb2soKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgaW5uZXJPay5hcHBseSh2b2lkIDAsIFtvaywgYXJncy5sZW5ndGhdLmNvbmNhdChhcmdzKSk7XG59XG5hc3NlcnQub2sgPSBvaztcblxuLy8gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoID09LlxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzICovXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICc9PScsXG4gICAgICBzdGFja1N0YXJ0Rm46IGVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3Rcbi8vIGVxdWFsIHdpdGggIT0uXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICchPScsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuYXNzZXJ0LmRlZXBFcXVhbCA9IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG4gIGlmICghaXNEZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdkZWVwRXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBkZWVwRXF1YWxcbiAgICB9KTtcbiAgfVxufTtcblxuLy8gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG5hc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gbm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcbiAgaWYgKGlzRGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90RGVlcEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RGVlcEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuICBpZiAoIWlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZGVlcFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcbiAgaWYgKGlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90RGVlcFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RGVlcFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn1cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG4gIGlmICghb2JqZWN0SXMoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdzdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5hc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuICBpZiAob2JqZWN0SXMoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdub3RTdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG52YXIgQ29tcGFyaXNvbiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlQ2xhc3MoZnVuY3Rpb24gQ29tcGFyaXNvbihvYmosIGtleXMsIGFjdHVhbCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcGFyaXNvbik7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChhY3R1YWwgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYWN0dWFsW2tleV0gPT09ICdzdHJpbmcnICYmIGlzUmVnRXhwKG9ialtrZXldKSAmJiBSZWdFeHBQcm90b3R5cGVUZXN0KG9ialtrZXldLCBhY3R1YWxba2V5XSkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IGFjdHVhbFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KTtcbmZ1bmN0aW9uIGNvbXBhcmVFeGNlcHRpb25LZXkoYWN0dWFsLCBleHBlY3RlZCwga2V5LCBtZXNzYWdlLCBrZXlzLCBmbikge1xuICBpZiAoIShrZXkgaW4gYWN0dWFsKSB8fCAhaXNEZWVwU3RyaWN0RXF1YWwoYWN0dWFsW2tleV0sIGV4cGVjdGVkW2tleV0pKSB7XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAvLyBDcmVhdGUgcGxhY2Vob2xkZXIgb2JqZWN0cyB0byBjcmVhdGUgYSBuaWNlIG91dHB1dC5cbiAgICAgIHZhciBhID0gbmV3IENvbXBhcmlzb24oYWN0dWFsLCBrZXlzKTtcbiAgICAgIHZhciBiID0gbmV3IENvbXBhcmlzb24oZXhwZWN0ZWQsIGtleXMsIGFjdHVhbCk7XG4gICAgICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgICAgYWN0dWFsOiBhLFxuICAgICAgICBleHBlY3RlZDogYixcbiAgICAgICAgb3BlcmF0b3I6ICdkZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgICB9KTtcbiAgICAgIGVyci5hY3R1YWwgPSBhY3R1YWw7XG4gICAgICBlcnIuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICAgIGVyci5vcGVyYXRvciA9IGZuLm5hbWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogZm4ubmFtZSxcbiAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCwgbXNnLCBmbikge1xuICBpZiAodHlwZW9mIGV4cGVjdGVkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGlzUmVnRXhwKGV4cGVjdGVkKSkgcmV0dXJuIFJlZ0V4cFByb3RvdHlwZVRlc3QoZXhwZWN0ZWQsIGFjdHVhbCk7XG4gICAgLy8gYXNzZXJ0LmRvZXNOb3RUaHJvdyBkb2VzIG5vdCBhY2NlcHQgb2JqZWN0cy5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdleHBlY3RlZCcsIFsnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGV4cGVjdGVkKTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJpbWl0aXZlcyBwcm9wZXJseS5cbiAgICBpZiAoX3R5cGVvZihhY3R1YWwpICE9PSAnb2JqZWN0JyB8fCBhY3R1YWwgPT09IG51bGwpIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgICBtZXNzYWdlOiBtc2csXG4gICAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgICAgfSk7XG4gICAgICBlcnIub3BlcmF0b3IgPSBmbi5uYW1lO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV4cGVjdGVkKTtcbiAgICAvLyBTcGVjaWFsIGhhbmRsZSBlcnJvcnMgdG8gbWFrZSBzdXJlIHRoZSBuYW1lIGFuZCB0aGUgbWVzc2FnZSBhcmUgY29tcGFyZWRcbiAgICAvLyBhcyB3ZWxsLlxuICAgIGlmIChleHBlY3RlZCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBrZXlzLnB1c2goJ25hbWUnLCAnbWVzc2FnZScpO1xuICAgIH0gZWxzZSBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVkFMVUUoJ2Vycm9yJywgZXhwZWN0ZWQsICdtYXkgbm90IGJlIGFuIGVtcHR5IG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2YgYWN0dWFsW2tleV0gPT09ICdzdHJpbmcnICYmIGlzUmVnRXhwKGV4cGVjdGVkW2tleV0pICYmIFJlZ0V4cFByb3RvdHlwZVRlc3QoZXhwZWN0ZWRba2V5XSwgYWN0dWFsW2tleV0pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbXBhcmVFeGNlcHRpb25LZXkoYWN0dWFsLCBleHBlY3RlZCwga2V5LCBtc2csIGtleXMsIGZuKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBHdWFyZCBpbnN0YW5jZW9mIGFnYWluc3QgYXJyb3cgZnVuY3Rpb25zIGFzIHRoZXkgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZS5cbiAgaWYgKGV4cGVjdGVkLnByb3RvdHlwZSAhPT0gdW5kZWZpbmVkICYmIGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuZnVuY3Rpb24gZ2V0QWN0dWFsKGZuKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2ZuJywgJ0Z1bmN0aW9uJywgZm4pO1xuICB9XG4gIHRyeSB7XG4gICAgZm4oKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG4gIHJldHVybiBOT19FWENFUFRJT05fU0VOVElORUw7XG59XG5mdW5jdGlvbiBjaGVja0lzUHJvbWlzZShvYmopIHtcbiAgLy8gQWNjZXB0IG5hdGl2ZSBFUzYgcHJvbWlzZXMgYW5kIHByb21pc2VzIHRoYXQgYXJlIGltcGxlbWVudGVkIGluIGEgc2ltaWxhclxuICAvLyB3YXkuIERvIG5vdCBhY2NlcHQgdGhlbmFibGVzIHRoYXQgdXNlIGEgZnVuY3Rpb24gYXMgYG9iamAgYW5kIHRoYXQgaGF2ZSBub1xuICAvLyBgY2F0Y2hgIGhhbmRsZXIuXG5cbiAgLy8gVE9ETzogdGhlbmFibGVzIGFyZSBjaGVja2VkIHVwIHVudGlsIHRoZXkgaGF2ZSB0aGUgY29ycmVjdCBtZXRob2RzLFxuICAvLyBidXQgYWNjb3JkaW5nIHRvIGRvY3VtZW50YXRpb24sIHRoZSBgdGhlbmAgbWV0aG9kIHNob3VsZCByZWNlaXZlXG4gIC8vIHRoZSBgZnVsZmlsbGAgYW5kIGByZWplY3RgIGFyZ3VtZW50cyBhcyB3ZWxsIG9yIGl0IG1heSBiZSBuZXZlciByZXNvbHZlZC5cblxuICByZXR1cm4gaXNQcm9taXNlKG9iaikgfHwgb2JqICE9PSBudWxsICYmIF90eXBlb2Yob2JqKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouY2F0Y2ggPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiB3YWl0Rm9yQWN0dWFsKHByb21pc2VGbikge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdFByb21pc2U7XG4gICAgaWYgKHR5cGVvZiBwcm9taXNlRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFJldHVybiBhIHJlamVjdGVkIHByb21pc2UgaWYgYHByb21pc2VGbmAgdGhyb3dzIHN5bmNocm9ub3VzbHkuXG4gICAgICByZXN1bHRQcm9taXNlID0gcHJvbWlzZUZuKCk7XG4gICAgICAvLyBGYWlsIGluIGNhc2Ugbm8gcHJvbWlzZSBpcyByZXR1cm5lZC5cbiAgICAgIGlmICghY2hlY2tJc1Byb21pc2UocmVzdWx0UHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSgnaW5zdGFuY2Ugb2YgUHJvbWlzZScsICdwcm9taXNlRm4nLCByZXN1bHRQcm9taXNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoZWNrSXNQcm9taXNlKHByb21pc2VGbikpIHtcbiAgICAgIHJlc3VsdFByb21pc2UgPSBwcm9taXNlRm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgncHJvbWlzZUZuJywgWydGdW5jdGlvbicsICdQcm9taXNlJ10sIHByb21pc2VGbik7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXN1bHRQcm9taXNlO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIE5PX0VYQ0VQVElPTl9TRU5USU5FTDtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZXhwZWN0c0Vycm9yKHN0YWNrU3RhcnRGbiwgYWN0dWFsLCBlcnJvciwgbWVzc2FnZSkge1xuICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0KSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2Vycm9yJywgWydPYmplY3QnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGVycm9yKTtcbiAgICB9XG4gICAgaWYgKF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsKSB7XG4gICAgICBpZiAoYWN0dWFsLm1lc3NhZ2UgPT09IGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFUlJfQU1CSUdVT1VTX0FSR1VNRU5UKCdlcnJvci9tZXNzYWdlJywgXCJUaGUgZXJyb3IgbWVzc2FnZSBcXFwiXCIuY29uY2F0KGFjdHVhbC5tZXNzYWdlLCBcIlxcXCIgaXMgaWRlbnRpY2FsIHRvIHRoZSBtZXNzYWdlLlwiKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3R1YWwgPT09IGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0FNQklHVU9VU19BUkdVTUVOVCgnZXJyb3IvbWVzc2FnZScsIFwiVGhlIGVycm9yIFxcXCJcIi5jb25jYXQoYWN0dWFsLCBcIlxcXCIgaXMgaWRlbnRpY2FsIHRvIHRoZSBtZXNzYWdlLlwiKSk7XG4gICAgfVxuICAgIG1lc3NhZ2UgPSBlcnJvcjtcbiAgICBlcnJvciA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChlcnJvciAhPSBudWxsICYmIF90eXBlb2YoZXJyb3IpICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2Vycm9yJywgWydPYmplY3QnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGVycm9yKTtcbiAgfVxuICBpZiAoYWN0dWFsID09PSBOT19FWENFUFRJT05fU0VOVElORUwpIHtcbiAgICB2YXIgZGV0YWlscyA9ICcnO1xuICAgIGlmIChlcnJvciAmJiBlcnJvci5uYW1lKSB7XG4gICAgICBkZXRhaWxzICs9IFwiIChcIi5jb25jYXQoZXJyb3IubmFtZSwgXCIpXCIpO1xuICAgIH1cbiAgICBkZXRhaWxzICs9IG1lc3NhZ2UgPyBcIjogXCIuY29uY2F0KG1lc3NhZ2UpIDogJy4nO1xuICAgIHZhciBmblR5cGUgPSBzdGFja1N0YXJ0Rm4ubmFtZSA9PT0gJ3JlamVjdHMnID8gJ3JlamVjdGlvbicgOiAnZXhjZXB0aW9uJztcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiB1bmRlZmluZWQsXG4gICAgICBleHBlY3RlZDogZXJyb3IsXG4gICAgICBvcGVyYXRvcjogc3RhY2tTdGFydEZuLm5hbWUsXG4gICAgICBtZXNzYWdlOiBcIk1pc3NpbmcgZXhwZWN0ZWQgXCIuY29uY2F0KGZuVHlwZSkuY29uY2F0KGRldGFpbHMpLFxuICAgICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm5cbiAgICB9KTtcbiAgfVxuICBpZiAoZXJyb3IgJiYgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXJyb3IsIG1lc3NhZ2UsIHN0YWNrU3RhcnRGbikpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cbmZ1bmN0aW9uIGV4cGVjdHNOb0Vycm9yKHN0YWNrU3RhcnRGbiwgYWN0dWFsLCBlcnJvciwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBOT19FWENFUFRJT05fU0VOVElORUwpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXJyb3I7XG4gICAgZXJyb3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFlcnJvciB8fCBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGVycm9yKSkge1xuICAgIHZhciBkZXRhaWxzID0gbWVzc2FnZSA/IFwiOiBcIi5jb25jYXQobWVzc2FnZSkgOiAnLic7XG4gICAgdmFyIGZuVHlwZSA9IHN0YWNrU3RhcnRGbi5uYW1lID09PSAnZG9lc05vdFJlamVjdCcgPyAncmVqZWN0aW9uJyA6ICdleGNlcHRpb24nO1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBlcnJvcixcbiAgICAgIG9wZXJhdG9yOiBzdGFja1N0YXJ0Rm4ubmFtZSxcbiAgICAgIG1lc3NhZ2U6IFwiR290IHVud2FudGVkIFwiLmNvbmNhdChmblR5cGUpLmNvbmNhdChkZXRhaWxzLCBcIlxcblwiKSArIFwiQWN0dWFsIG1lc3NhZ2U6IFxcXCJcIi5jb25jYXQoYWN0dWFsICYmIGFjdHVhbC5tZXNzYWdlLCBcIlxcXCJcIiksXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0YWNrU3RhcnRGblxuICAgIH0pO1xuICB9XG4gIHRocm93IGFjdHVhbDtcbn1cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbiB0aHJvd3MocHJvbWlzZUZuKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuICBleHBlY3RzRXJyb3IuYXBwbHkodm9pZCAwLCBbdGhyb3dzLCBnZXRBY3R1YWwocHJvbWlzZUZuKV0uY29uY2F0KGFyZ3MpKTtcbn07XG5hc3NlcnQucmVqZWN0cyA9IGZ1bmN0aW9uIHJlamVjdHMocHJvbWlzZUZuKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuICByZXR1cm4gd2FpdEZvckFjdHVhbChwcm9taXNlRm4pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiBleHBlY3RzRXJyb3IuYXBwbHkodm9pZCAwLCBbcmVqZWN0cywgcmVzdWx0XS5jb25jYXQoYXJncykpO1xuICB9KTtcbn07XG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24gZG9lc05vdFRocm93KGZuKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuICBleHBlY3RzTm9FcnJvci5hcHBseSh2b2lkIDAsIFtkb2VzTm90VGhyb3csIGdldEFjdHVhbChmbildLmNvbmNhdChhcmdzKSk7XG59O1xuYXNzZXJ0LmRvZXNOb3RSZWplY3QgPSBmdW5jdGlvbiBkb2VzTm90UmVqZWN0KGZuKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSA+IDEgPyBfbGVuNSAtIDEgOiAwKSwgX2tleTUgPSAxOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgYXJnc1tfa2V5NSAtIDFdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuICByZXR1cm4gd2FpdEZvckFjdHVhbChmbikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIGV4cGVjdHNOb0Vycm9yLmFwcGx5KHZvaWQgMCwgW2RvZXNOb3RSZWplY3QsIHJlc3VsdF0uY29uY2F0KGFyZ3MpKTtcbiAgfSk7XG59O1xuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbiBpZkVycm9yKGVycikge1xuICBpZiAoZXJyICE9PSBudWxsICYmIGVyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnaWZFcnJvciBnb3QgdW53YW50ZWQgZXhjZXB0aW9uOiAnO1xuICAgIGlmIChfdHlwZW9mKGVycikgPT09ICdvYmplY3QnICYmIHR5cGVvZiBlcnIubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5sZW5ndGggPT09IDAgJiYgZXJyLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gZXJyLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlICs9IGVyci5tZXNzYWdlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlICs9IGluc3BlY3QoZXJyKTtcbiAgICB9XG4gICAgdmFyIG5ld0VyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICBhY3R1YWw6IGVycixcbiAgICAgIGV4cGVjdGVkOiBudWxsLFxuICAgICAgb3BlcmF0b3I6ICdpZkVycm9yJyxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBzdGFja1N0YXJ0Rm46IGlmRXJyb3JcbiAgICB9KTtcblxuICAgIC8vIE1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBoYXZlIGEgc3RhY2sgdHJhY2UhXG4gICAgdmFyIG9yaWdTdGFjayA9IGVyci5zdGFjaztcbiAgICBpZiAodHlwZW9mIG9yaWdTdGFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCByZW1vdmUgYW55IGR1cGxpY2F0ZWQgZnJhbWVzIGZyb20gdGhlIGVycm9yIGZyYW1lcyB0YWtlblxuICAgICAgLy8gZnJvbSB3aXRoaW4gYGlmRXJyb3JgIGFuZCBhZGQgdGhlIG9yaWdpbmFsIGVycm9yIGZyYW1lcyB0byB0aGUgbmV3bHlcbiAgICAgIC8vIGNyZWF0ZWQgb25lcy5cbiAgICAgIHZhciB0bXAyID0gb3JpZ1N0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHRtcDIuc2hpZnQoKTtcbiAgICAgIC8vIEZpbHRlciBhbGwgZnJhbWVzIGV4aXN0aW5nIGluIGVyci5zdGFjay5cbiAgICAgIHZhciB0bXAxID0gbmV3RXJyLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG1wMi5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSBmcmFtZS5cbiAgICAgICAgdmFyIHBvcyA9IHRtcDEuaW5kZXhPZih0bXAyW2ldKTtcbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBPbmx5IGtlZXAgbmV3IGZyYW1lcy5cbiAgICAgICAgICB0bXAxID0gdG1wMS5zbGljZSgwLCBwb3MpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXdFcnIuc3RhY2sgPSBcIlwiLmNvbmNhdCh0bXAxLmpvaW4oJ1xcbicpLCBcIlxcblwiKS5jb25jYXQodG1wMi5qb2luKCdcXG4nKSk7XG4gICAgfVxuICAgIHRocm93IG5ld0VycjtcbiAgfVxufTtcblxuLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9hc3NlcnQuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMmE4NzFkZjNkZmI4ZWE2NjNlZjVlMWY4ZjYyNzAxZWM1MTM4NGVjYlxuZnVuY3Rpb24gaW50ZXJuYWxNYXRjaChzdHJpbmcsIHJlZ2V4cCwgbWVzc2FnZSwgZm4sIGZuTmFtZSkge1xuICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ3JlZ2V4cCcsICdSZWdFeHAnLCByZWdleHApO1xuICB9XG4gIHZhciBtYXRjaCA9IGZuTmFtZSA9PT0gJ21hdGNoJztcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnIHx8IFJlZ0V4cFByb3RvdHlwZVRlc3QocmVnZXhwLCBzdHJpbmcpICE9PSBtYXRjaCkge1xuICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IG1lc3NhZ2U7XG4gICAgfVxuICAgIHZhciBnZW5lcmF0ZWRNZXNzYWdlID0gIW1lc3NhZ2U7XG5cbiAgICAvLyAnVGhlIGlucHV0IHdhcyBleHBlY3RlZCB0byBub3QgbWF0Y2ggdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiAnICtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycgPyAnVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSAnICsgXCJcIi5jb25jYXQoX3R5cGVvZihzdHJpbmcpLCBcIiAoXCIpLmNvbmNhdChpbnNwZWN0KHN0cmluZyksIFwiKVwiKSA6IChtYXRjaCA/ICdUaGUgaW5wdXQgZGlkIG5vdCBtYXRjaCB0aGUgcmVndWxhciBleHByZXNzaW9uICcgOiAnVGhlIGlucHV0IHdhcyBleHBlY3RlZCB0byBub3QgbWF0Y2ggdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiAnKSArIFwiXCIuY29uY2F0KGluc3BlY3QocmVnZXhwKSwgXCIuIElucHV0OlxcblxcblwiKS5jb25jYXQoaW5zcGVjdChzdHJpbmcpLCBcIlxcblwiKSk7XG4gICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICBhY3R1YWw6IHN0cmluZyxcbiAgICAgIGV4cGVjdGVkOiByZWdleHAsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6IGZuTmFtZSxcbiAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICB9KTtcbiAgICBlcnIuZ2VuZXJhdGVkTWVzc2FnZSA9IGdlbmVyYXRlZE1lc3NhZ2U7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5hc3NlcnQubWF0Y2ggPSBmdW5jdGlvbiBtYXRjaChzdHJpbmcsIHJlZ2V4cCwgbWVzc2FnZSkge1xuICBpbnRlcm5hbE1hdGNoKHN0cmluZywgcmVnZXhwLCBtZXNzYWdlLCBtYXRjaCwgJ21hdGNoJyk7XG59O1xuYXNzZXJ0LmRvZXNOb3RNYXRjaCA9IGZ1bmN0aW9uIGRvZXNOb3RNYXRjaChzdHJpbmcsIHJlZ2V4cCwgbWVzc2FnZSkge1xuICBpbnRlcm5hbE1hdGNoKHN0cmluZywgcmVnZXhwLCBtZXNzYWdlLCBkb2VzTm90TWF0Y2gsICdkb2VzTm90TWF0Y2gnKTtcbn07XG5cbi8vIEV4cG9zZSBhIHN0cmljdCBvbmx5IHZhcmlhbnQgb2YgYXNzZXJ0XG5mdW5jdGlvbiBzdHJpY3QoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuICBpbm5lck9rLmFwcGx5KHZvaWQgMCwgW3N0cmljdCwgYXJncy5sZW5ndGhdLmNvbmNhdChhcmdzKSk7XG59XG5hc3NlcnQuc3RyaWN0ID0gb2JqZWN0QXNzaWduKHN0cmljdCwgYXNzZXJ0LCB7XG4gIGVxdWFsOiBhc3NlcnQuc3RyaWN0RXF1YWwsXG4gIGRlZXBFcXVhbDogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCxcbiAgbm90RXF1YWw6IGFzc2VydC5ub3RTdHJpY3RFcXVhbCxcbiAgbm90RGVlcEVxdWFsOiBhc3NlcnQubm90RGVlcFN0cmljdEVxdWFsXG59KTtcbmFzc2VydC5zdHJpY3Quc3RyaWN0ID0gYXNzZXJ0LnN0cmljdDsiLCIvLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL2Fzc2VydC9hc3NlcnRpb25fZXJyb3IuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMDgxNzg0MGY3NzUwMzIxNjlkZGQ3MGM4NWFjMDU5ZjE4ZmZjYzgxY1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG93bktleXMoZSwgcikgeyB2YXIgdCA9IE9iamVjdC5rZXlzKGUpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7IHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlOyB9KSksIHQucHVzaC5hcHBseSh0LCBvKTsgfSByZXR1cm4gdDsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkOyBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzOyBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7IGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpOyBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTsgfSBmdW5jdGlvbiBXcmFwcGVyKCkgeyByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpOyB9IFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IFdyYXBwZXIsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpOyB9OyByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7IH1cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdC5iaW5kKCk7IH0gZWxzZSB7IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7IHJldHVybiBpbnN0YW5jZTsgfTsgfSByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7IHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7IH1cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxudmFyIF9yZXF1aXJlID0gcmVxdWlyZSgndXRpbC8nKSxcbiAgaW5zcGVjdCA9IF9yZXF1aXJlLmluc3BlY3Q7XG52YXIgX3JlcXVpcmUyID0gcmVxdWlyZSgnLi4vZXJyb3JzJyksXG4gIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUyLmNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZW5kc1dpdGhcbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICBpZiAodGhpc19sZW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzX2xlbiA+IHN0ci5sZW5ndGgpIHtcbiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpc19sZW4gLSBzZWFyY2gubGVuZ3RoLCB0aGlzX2xlbikgPT09IHNlYXJjaDtcbn1cblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3JlcGVhdFxuZnVuY3Rpb24gcmVwZWF0KHN0ciwgY291bnQpIHtcbiAgY291bnQgPSBNYXRoLmZsb29yKGNvdW50KTtcbiAgaWYgKHN0ci5sZW5ndGggPT0gMCB8fCBjb3VudCA9PSAwKSByZXR1cm4gJyc7XG4gIHZhciBtYXhDb3VudCA9IHN0ci5sZW5ndGggKiBjb3VudDtcbiAgY291bnQgPSBNYXRoLmZsb29yKE1hdGgubG9nKGNvdW50KSAvIE1hdGgubG9nKDIpKTtcbiAgd2hpbGUgKGNvdW50KSB7XG4gICAgc3RyICs9IHN0cjtcbiAgICBjb3VudC0tO1xuICB9XG4gIHN0ciArPSBzdHIuc3Vic3RyaW5nKDAsIG1heENvdW50IC0gc3RyLmxlbmd0aCk7XG4gIHJldHVybiBzdHI7XG59XG52YXIgYmx1ZSA9ICcnO1xudmFyIGdyZWVuID0gJyc7XG52YXIgcmVkID0gJyc7XG52YXIgd2hpdGUgPSAnJztcbnZhciBrUmVhZGFibGVPcGVyYXRvciA9IHtcbiAgZGVlcFN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIHN0cmljdGx5IGRlZXAtZXF1YWw6JyxcbiAgc3RyaWN0RXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZXF1YWw6JyxcbiAgc3RyaWN0RXF1YWxPYmplY3Q6ICdFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIHJlZmVyZW5jZS1lcXVhbCB0byBcImV4cGVjdGVkXCI6JyxcbiAgZGVlcEVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGxvb3NlbHkgZGVlcC1lcXVhbDonLFxuICBlcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBsb29zZWx5IGVxdWFsOicsXG4gIG5vdERlZXBTdHJpY3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIHN0cmljdGx5IGRlZXAtZXF1YWwgdG86JyxcbiAgbm90U3RyaWN0RXF1YWw6ICdFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIHN0cmljdGx5IHVuZXF1YWwgdG86JyxcbiAgbm90U3RyaWN0RXF1YWxPYmplY3Q6ICdFeHBlY3RlZCBcImFjdHVhbFwiIG5vdCB0byBiZSByZWZlcmVuY2UtZXF1YWwgdG8gXCJleHBlY3RlZFwiOicsXG4gIG5vdERlZXBFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIGxvb3NlbHkgZGVlcC1lcXVhbCB0bzonLFxuICBub3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgbG9vc2VseSB1bmVxdWFsIHRvOicsXG4gIG5vdElkZW50aWNhbDogJ1ZhbHVlcyBpZGVudGljYWwgYnV0IG5vdCByZWZlcmVuY2UtZXF1YWw6J1xufTtcblxuLy8gQ29tcGFyaW5nIHNob3J0IHByaW1pdGl2ZXMgc2hvdWxkIGp1c3Qgc2hvdyA9PT0gLyAhPT0gaW5zdGVhZCBvZiB1c2luZyB0aGVcbi8vIGRpZmYuXG52YXIga01heFNob3J0TGVuZ3RoID0gMTA7XG5mdW5jdGlvbiBjb3B5RXJyb3Ioc291cmNlKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIHRhcmdldCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCAnbWVzc2FnZScsIHtcbiAgICB2YWx1ZTogc291cmNlLm1lc3NhZ2VcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBpbnNwZWN0VmFsdWUodmFsKSB7XG4gIC8vIFRoZSB1dGlsLmluc3BlY3QgZGVmYXVsdCB2YWx1ZXMgY291bGQgYmUgY2hhbmdlZC4gVGhpcyBtYWtlcyBzdXJlIHRoZVxuICAvLyBlcnJvciBtZXNzYWdlcyBjb250YWluIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gbmV2ZXJ0aGVsZXNzLlxuICByZXR1cm4gaW5zcGVjdCh2YWwsIHtcbiAgICBjb21wYWN0OiBmYWxzZSxcbiAgICBjdXN0b21JbnNwZWN0OiBmYWxzZSxcbiAgICBkZXB0aDogMTAwMCxcbiAgICBtYXhBcnJheUxlbmd0aDogSW5maW5pdHksXG4gICAgLy8gQXNzZXJ0IGNvbXBhcmVzIG9ubHkgZW51bWVyYWJsZSBwcm9wZXJ0aWVzICh3aXRoIGEgZmV3IGV4Y2VwdGlvbnMpLlxuICAgIHNob3dIaWRkZW46IGZhbHNlLFxuICAgIC8vIEhhdmluZyBhIGxvbmcgbGluZSBhcyBlcnJvciBpcyBiZXR0ZXIgdGhhbiB3cmFwcGluZyB0aGUgbGluZSBmb3JcbiAgICAvLyBjb21wYXJpc29uIGZvciBub3cuXG4gICAgLy8gVE9ETyhCcmlkZ2VBUik6IGBicmVha0xlbmd0aGAgc2hvdWxkIGJlIGxpbWl0ZWQgYXMgc29vbiBhcyBzb29uIGFzIHdlXG4gICAgLy8gaGF2ZSBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnNwZWN0ZWQgcHJvcGVydGllcyAoaS5lLiwga25vdyB3aGVyZVxuICAgIC8vIGluIHdoYXQgbGluZSB0aGUgcHJvcGVydHkgc3RhcnRzIGFuZCBlbmRzKS5cbiAgICBicmVha0xlbmd0aDogSW5maW5pdHksXG4gICAgLy8gQXNzZXJ0IGRvZXMgbm90IGRldGVjdCBwcm94aWVzIGN1cnJlbnRseS5cbiAgICBzaG93UHJveHk6IGZhbHNlLFxuICAgIHNvcnRlZDogdHJ1ZSxcbiAgICAvLyBJbnNwZWN0IGdldHRlcnMgYXMgd2UgYWxzbyBjaGVjayB0aGVtIHdoZW4gY29tcGFyaW5nIGVudHJpZXMuXG4gICAgZ2V0dGVyczogdHJ1ZVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVyckRpZmYoYWN0dWFsLCBleHBlY3RlZCwgb3BlcmF0b3IpIHtcbiAgdmFyIG90aGVyID0gJyc7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIGxhc3RQb3MgPSAwO1xuICB2YXIgZW5kID0gJyc7XG4gIHZhciBza2lwcGVkID0gZmFsc2U7XG4gIHZhciBhY3R1YWxJbnNwZWN0ZWQgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKTtcbiAgdmFyIGFjdHVhbExpbmVzID0gYWN0dWFsSW5zcGVjdGVkLnNwbGl0KCdcXG4nKTtcbiAgdmFyIGV4cGVjdGVkTGluZXMgPSBpbnNwZWN0VmFsdWUoZXhwZWN0ZWQpLnNwbGl0KCdcXG4nKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgaW5kaWNhdG9yID0gJyc7XG5cbiAgLy8gSW4gY2FzZSBib3RoIHZhbHVlcyBhcmUgb2JqZWN0cyBleHBsaWNpdGx5IG1hcmsgdGhlbSBhcyBub3QgcmVmZXJlbmNlIGVxdWFsXG4gIC8vIGZvciB0aGUgYHN0cmljdEVxdWFsYCBvcGVyYXRvci5cbiAgaWYgKG9wZXJhdG9yID09PSAnc3RyaWN0RXF1YWwnICYmIF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgX3R5cGVvZihleHBlY3RlZCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCAmJiBleHBlY3RlZCAhPT0gbnVsbCkge1xuICAgIG9wZXJhdG9yID0gJ3N0cmljdEVxdWFsT2JqZWN0JztcbiAgfVxuXG4gIC8vIElmIFwiYWN0dWFsXCIgYW5kIFwiZXhwZWN0ZWRcIiBmaXQgb24gYSBzaW5nbGUgbGluZSBhbmQgdGhleSBhcmUgbm90IHN0cmljdGx5XG4gIC8vIGVxdWFsLCBjaGVjayBmdXJ0aGVyIHNwZWNpYWwgaGFuZGxpbmcuXG4gIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDEgJiYgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDEgJiYgYWN0dWFsTGluZXNbMF0gIT09IGV4cGVjdGVkTGluZXNbMF0pIHtcbiAgICB2YXIgaW5wdXRMZW5ndGggPSBhY3R1YWxMaW5lc1swXS5sZW5ndGggKyBleHBlY3RlZExpbmVzWzBdLmxlbmd0aDtcbiAgICAvLyBJZiB0aGUgY2hhcmFjdGVyIGxlbmd0aCBvZiBcImFjdHVhbFwiIGFuZCBcImV4cGVjdGVkXCIgdG9nZXRoZXIgaXMgbGVzcyB0aGFuXG4gICAgLy8ga01heFNob3J0TGVuZ3RoIGFuZCBpZiBuZWl0aGVyIGlzIGFuIG9iamVjdCBhbmQgYXQgbGVhc3Qgb25lIG9mIHRoZW0gaXNcbiAgICAvLyBub3QgYHplcm9gLCB1c2UgdGhlIHN0cmljdCBlcXVhbCBjb21wYXJpc29uIHRvIHZpc3VhbGl6ZSB0aGUgb3V0cHV0LlxuICAgIGlmIChpbnB1dExlbmd0aCA8PSBrTWF4U2hvcnRMZW5ndGgpIHtcbiAgICAgIGlmICgoX3R5cGVvZihhY3R1YWwpICE9PSAnb2JqZWN0JyB8fCBhY3R1YWwgPT09IG51bGwpICYmIChfdHlwZW9mKGV4cGVjdGVkKSAhPT0gJ29iamVjdCcgfHwgZXhwZWN0ZWQgPT09IG51bGwpICYmIChhY3R1YWwgIT09IDAgfHwgZXhwZWN0ZWQgIT09IDApKSB7XG4gICAgICAgIC8vIC0wID09PSArMFxuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoa1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdLCBcIlxcblxcblwiKSArIFwiXCIuY29uY2F0KGFjdHVhbExpbmVzWzBdLCBcIiAhPT0gXCIpLmNvbmNhdChleHBlY3RlZExpbmVzWzBdLCBcIlxcblwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yICE9PSAnc3RyaWN0RXF1YWxPYmplY3QnKSB7XG4gICAgICAvLyBJZiB0aGUgc3RkZXJyIGlzIGEgdHR5IGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxvd2VyIHRoYW4gdGhlIGN1cnJlbnRcbiAgICAgIC8vIGNvbHVtbnMgcGVyIGxpbmUsIGFkZCBhIG1pc21hdGNoIGluZGljYXRvciBiZWxvdyB0aGUgb3V0cHV0LiBJZiBpdCBpc1xuICAgICAgLy8gbm90IGEgdHR5LCB1c2UgYSBkZWZhdWx0IHZhbHVlIG9mIDgwIGNoYXJhY3RlcnMuXG4gICAgICB2YXIgbWF4TGVuZ3RoID0gcHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuaXNUVFkgPyBwcm9jZXNzLnN0ZGVyci5jb2x1bW5zIDogODA7XG4gICAgICBpZiAoaW5wdXRMZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgd2hpbGUgKGFjdHVhbExpbmVzWzBdW2ldID09PSBleHBlY3RlZExpbmVzWzBdW2ldKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVycy5cbiAgICAgICAgaWYgKGkgPiAyKSB7XG4gICAgICAgICAgLy8gQWRkIHBvc2l0aW9uIGluZGljYXRvciBmb3IgdGhlIGZpcnN0IG1pc21hdGNoIGluIGNhc2UgaXQgaXMgYVxuICAgICAgICAgIC8vIHNpbmdsZSBsaW5lIGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGUgY29sdW1uIGxlbmd0aC5cbiAgICAgICAgICBpbmRpY2F0b3IgPSBcIlxcbiAgXCIuY29uY2F0KHJlcGVhdCgnICcsIGkpLCBcIl5cIik7XG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgYWxsIGVuZGluZyBsaW5lcyB0aGF0IG1hdGNoICh0aGlzIG9wdGltaXplcyB0aGUgb3V0cHV0IGZvclxuICAvLyByZWFkYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgbnVtYmVyIG9mIHRvdGFsIGNoYW5nZWQgbGluZXMpLlxuICB2YXIgYSA9IGFjdHVhbExpbmVzW2FjdHVhbExpbmVzLmxlbmd0aCAtIDFdO1xuICB2YXIgYiA9IGV4cGVjdGVkTGluZXNbZXhwZWN0ZWRMaW5lcy5sZW5ndGggLSAxXTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBpZiAoaSsrIDwgMikge1xuICAgICAgZW5kID0gXCJcXG4gIFwiLmNvbmNhdChhKS5jb25jYXQoZW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3RoZXIgPSBhO1xuICAgIH1cbiAgICBhY3R1YWxMaW5lcy5wb3AoKTtcbiAgICBleHBlY3RlZExpbmVzLnBvcCgpO1xuICAgIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDAgfHwgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgIGEgPSBhY3R1YWxMaW5lc1thY3R1YWxMaW5lcy5sZW5ndGggLSAxXTtcbiAgICBiID0gZXhwZWN0ZWRMaW5lc1tleHBlY3RlZExpbmVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIHZhciBtYXhMaW5lcyA9IE1hdGgubWF4KGFjdHVhbExpbmVzLmxlbmd0aCwgZXhwZWN0ZWRMaW5lcy5sZW5ndGgpO1xuICAvLyBTdHJpY3QgZXF1YWwgd2l0aCBpZGVudGljYWwgb2JqZWN0cyB0aGF0IGFyZSBub3QgaWRlbnRpY2FsIGJ5IHJlZmVyZW5jZS5cbiAgLy8gRS5nLiwgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCh7IGE6IFN5bWJvbCgpIH0sIHsgYTogU3ltYm9sKCkgfSlcbiAgaWYgKG1heExpbmVzID09PSAwKSB7XG4gICAgLy8gV2UgaGF2ZSB0byBnZXQgdGhlIHJlc3VsdCBhZ2Fpbi4gVGhlIGxpbmVzIHdlcmUgYWxsIHJlbW92ZWQgYmVmb3JlLlxuICAgIHZhciBfYWN0dWFsTGluZXMgPSBhY3R1YWxJbnNwZWN0ZWQuc3BsaXQoJ1xcbicpO1xuXG4gICAgLy8gT25seSByZW1vdmUgbGluZXMgaW4gY2FzZSBpdCBtYWtlcyBzZW5zZSB0byBjb2xsYXBzZSB0aG9zZS5cbiAgICAvLyBUT0RPOiBBY2NlcHQgZW52IHRvIGFsd2F5cyBzaG93IHRoZSBmdWxsIGVycm9yLlxuICAgIGlmIChfYWN0dWFsTGluZXMubGVuZ3RoID4gMzApIHtcbiAgICAgIF9hY3R1YWxMaW5lc1syNl0gPSBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgICAgd2hpbGUgKF9hY3R1YWxMaW5lcy5sZW5ndGggPiAyNykge1xuICAgICAgICBfYWN0dWFsTGluZXMucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvci5ub3RJZGVudGljYWwsIFwiXFxuXFxuXCIpLmNvbmNhdChfYWN0dWFsTGluZXMuam9pbignXFxuJyksIFwiXFxuXCIpO1xuICB9XG4gIGlmIChpID4gMykge1xuICAgIGVuZCA9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSkuY29uY2F0KGVuZCk7XG4gICAgc2tpcHBlZCA9IHRydWU7XG4gIH1cbiAgaWYgKG90aGVyICE9PSAnJykge1xuICAgIGVuZCA9IFwiXFxuICBcIi5jb25jYXQob3RoZXIpLmNvbmNhdChlbmQpO1xuICAgIG90aGVyID0gJyc7XG4gIH1cbiAgdmFyIHByaW50ZWRMaW5lcyA9IDA7XG4gIHZhciBtc2cgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0gKyBcIlxcblwiLmNvbmNhdChncmVlbiwgXCIrIGFjdHVhbFwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQocmVkLCBcIi0gZXhwZWN0ZWRcIikuY29uY2F0KHdoaXRlKTtcbiAgdmFyIHNraXBwZWRNc2cgPSBcIiBcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlLCBcIiBMaW5lcyBza2lwcGVkXCIpO1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4TGluZXM7IGkrKykge1xuICAgIC8vIE9ubHkgZXh0cmEgZXhwZWN0ZWQgbGluZXMgZXhpc3RcbiAgICB2YXIgY3VyID0gaSAtIGxhc3RQb3M7XG4gICAgaWYgKGFjdHVhbExpbmVzLmxlbmd0aCA8IGkgKyAxKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGV4cGVjdGVkTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChleHBlY3RlZExpbmVzW2kgLSAxXSk7XG4gICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgfVxuICAgICAgLy8gTWFyayB0aGUgY3VycmVudCBsaW5lIGFzIHRoZSBsYXN0IGRpdmVyZ2luZyBvbmUuXG4gICAgICBsYXN0UG9zID0gaTtcbiAgICAgIC8vIEFkZCB0aGUgZXhwZWN0ZWQgbGluZSB0byB0aGUgY2FjaGUuXG4gICAgICBvdGhlciArPSBcIlxcblwiLmNvbmNhdChyZWQsIFwiLVwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lc1tpXSk7XG4gICAgICBwcmludGVkTGluZXMrKztcbiAgICAgIC8vIE9ubHkgZXh0cmEgYWN0dWFsIGxpbmVzIGV4aXN0XG4gICAgfSBlbHNlIGlmIChleHBlY3RlZExpbmVzLmxlbmd0aCA8IGkgKyAxKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH1cbiAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDFdKTtcbiAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICB9XG4gICAgICAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cbiAgICAgIGxhc3RQb3MgPSBpO1xuICAgICAgLy8gQWRkIHRoZSBhY3R1YWwgbGluZSB0byB0aGUgcmVzdWx0LlxuICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIitcIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGFjdHVhbExpbmVzW2ldKTtcbiAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgLy8gTGluZXMgZGl2ZXJnZVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXhwZWN0ZWRMaW5lID0gZXhwZWN0ZWRMaW5lc1tpXTtcbiAgICAgIHZhciBhY3R1YWxMaW5lID0gYWN0dWFsTGluZXNbaV07XG4gICAgICAvLyBJZiB0aGUgbGluZXMgZGl2ZXJnZSwgc3BlY2lmaWNhbGx5IGNoZWNrIGZvciBsaW5lcyB0aGF0IG9ubHkgZGl2ZXJnZSBieVxuICAgICAgLy8gYSB0cmFpbGluZyBjb21tYS4gSW4gdGhhdCBjYXNlIGl0IGlzIGFjdHVhbGx5IGlkZW50aWNhbCBhbmQgd2Ugc2hvdWxkXG4gICAgICAvLyBtYXJrIGl0IGFzIHN1Y2guXG4gICAgICB2YXIgZGl2ZXJnaW5nTGluZXMgPSBhY3R1YWxMaW5lICE9PSBleHBlY3RlZExpbmUgJiYgKCFlbmRzV2l0aChhY3R1YWxMaW5lLCAnLCcpIHx8IGFjdHVhbExpbmUuc2xpY2UoMCwgLTEpICE9PSBleHBlY3RlZExpbmUpO1xuICAgICAgLy8gSWYgdGhlIGV4cGVjdGVkIGxpbmUgaGFzIGEgdHJhaWxpbmcgY29tbWEgYnV0IGlzIG90aGVyd2lzZSBpZGVudGljYWwsXG4gICAgICAvLyBhZGQgYSBjb21tYSBhdCB0aGUgZW5kIG9mIHRoZSBhY3R1YWwgbGluZS4gT3RoZXJ3aXNlIHRoZSBvdXRwdXQgY291bGRcbiAgICAgIC8vIGxvb2sgd2VpcmQgYXMgaW46XG4gICAgICAvL1xuICAgICAgLy8gICBbXG4gICAgICAvLyAgICAgMSAgICAgICAgIC8vIE5vIGNvbW1hIGF0IHRoZSBlbmQhXG4gICAgICAvLyArICAgMlxuICAgICAgLy8gICBdXG4gICAgICAvL1xuICAgICAgaWYgKGRpdmVyZ2luZ0xpbmVzICYmIGVuZHNXaXRoKGV4cGVjdGVkTGluZSwgJywnKSAmJiBleHBlY3RlZExpbmUuc2xpY2UoMCwgLTEpID09PSBhY3R1YWxMaW5lKSB7XG4gICAgICAgIGRpdmVyZ2luZ0xpbmVzID0gZmFsc2U7XG4gICAgICAgIGFjdHVhbExpbmUgKz0gJywnO1xuICAgICAgfVxuICAgICAgaWYgKGRpdmVyZ2luZ0xpbmVzKSB7XG4gICAgICAgIC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIG1vcmUgdGhhbiBvbmUgbGluZSBhYm92ZSBhbmQgdGhlXG4gICAgICAgIC8vIGN1cnJlbnQgbGluZSBpcyBhdCBsZWFzdCBsaW5lIHRocmVlLCBhZGQgc29tZSBvZiB0aGUgZm9ybWVyIGxpbmVzIGFuZFxuICAgICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgICAgaWYgKGN1ciA+IDEgJiYgaSA+IDIpIHtcbiAgICAgICAgICBpZiAoY3VyID4gNCkge1xuICAgICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgICBza2lwcGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1ciA+IDMpIHtcbiAgICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDFdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cbiAgICAgICAgbGFzdFBvcyA9IGk7XG4gICAgICAgIC8vIEFkZCB0aGUgYWN0dWFsIGxpbmUgdG8gdGhlIHJlc3VsdCBhbmQgY2FjaGUgdGhlIGV4cGVjdGVkIGRpdmVyZ2luZ1xuICAgICAgICAvLyBsaW5lIHNvIGNvbnNlY3V0aXZlIGRpdmVyZ2luZyBsaW5lcyBzaG93IHVwIGFzICsrKy0tLSBhbmQgbm90ICstKy0rLS5cbiAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIitcIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGFjdHVhbExpbmUpO1xuICAgICAgICBvdGhlciArPSBcIlxcblwiLmNvbmNhdChyZWQsIFwiLVwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lKTtcbiAgICAgICAgcHJpbnRlZExpbmVzICs9IDI7XG4gICAgICAgIC8vIExpbmVzIGFyZSBpZGVudGljYWxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFkZCBhbGwgY2FjaGVkIGluZm9ybWF0aW9uIHRvIHRoZSByZXN1bHQgYmVmb3JlIGFkZGluZyBvdGhlciB0aGluZ3NcbiAgICAgICAgLy8gYW5kIHJlc2V0IHRoZSBjYWNoZS5cbiAgICAgICAgcmVzICs9IG90aGVyO1xuICAgICAgICBvdGhlciA9ICcnO1xuICAgICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBleGFjdGx5IG9uZSBsaW5lIGFib3ZlIG9yIGlmIGl0IGlzIHRoZVxuICAgICAgICAvLyB2ZXJ5IGZpcnN0IGxpbmUsIGFkZCB0aGUgbGluZSB0byB0aGUgcmVzdWx0LlxuICAgICAgICBpZiAoY3VyID09PSAxIHx8IGkgPT09IDApIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBJbnNwZWN0ZWQgb2JqZWN0IHRvIGJpZyAoU2hvdyB+MjAgcm93cyBtYXgpXG4gICAgaWYgKHByaW50ZWRMaW5lcyA+IDIwICYmIGkgPCBtYXhMaW5lcyAtIDIpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChtc2cpLmNvbmNhdChza2lwcGVkTXNnLCBcIlxcblwiKS5jb25jYXQocmVzLCBcIlxcblwiKS5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKS5jb25jYXQob3RoZXIsIFwiXFxuXCIpICsgXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZykuY29uY2F0KHNraXBwZWQgPyBza2lwcGVkTXNnIDogJycsIFwiXFxuXCIpLmNvbmNhdChyZXMpLmNvbmNhdChvdGhlcikuY29uY2F0KGVuZCkuY29uY2F0KGluZGljYXRvcik7XG59XG52YXIgQXNzZXJ0aW9uRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvciwgX2luc3BlY3QkY3VzdG9tKSB7XG4gIF9pbmhlcml0cyhBc3NlcnRpb25FcnJvciwgX0Vycm9yKTtcbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihBc3NlcnRpb25FcnJvcik7XG4gIGZ1bmN0aW9uIEFzc2VydGlvbkVycm9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFzc2VydGlvbkVycm9yKTtcbiAgICBpZiAoX3R5cGVvZihvcHRpb25zKSAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdvcHRpb25zJywgJ09iamVjdCcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB2YXIgbWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcixcbiAgICAgIHN0YWNrU3RhcnRGbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZuO1xuICAgIHZhciBhY3R1YWwgPSBvcHRpb25zLmFjdHVhbCxcbiAgICAgIGV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgICB2YXIgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMDtcbiAgICBpZiAobWVzc2FnZSAhPSBudWxsKSB7XG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFN0cmluZyhtZXNzYWdlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5pc1RUWSkge1xuICAgICAgICAvLyBSZXNldCBvbiBlYWNoIGNhbGwgdG8gbWFrZSBzdXJlIHdlIGhhbmRsZSBkeW5hbWljYWxseSBzZXQgZW52aXJvbm1lbnRcbiAgICAgICAgLy8gdmFyaWFibGVzIGNvcnJlY3QuXG4gICAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5nZXRDb2xvckRlcHRoICYmIHByb2Nlc3Muc3RkZXJyLmdldENvbG9yRGVwdGgoKSAhPT0gMSkge1xuICAgICAgICAgIGJsdWUgPSBcIlxceDFCWzM0bVwiO1xuICAgICAgICAgIGdyZWVuID0gXCJcXHgxQlszMm1cIjtcbiAgICAgICAgICB3aGl0ZSA9IFwiXFx4MUJbMzltXCI7XG4gICAgICAgICAgcmVkID0gXCJcXHgxQlszMW1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibHVlID0gJyc7XG4gICAgICAgICAgZ3JlZW4gPSAnJztcbiAgICAgICAgICB3aGl0ZSA9ICcnO1xuICAgICAgICAgIHJlZCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBQcmV2ZW50IHRoZSBlcnJvciBzdGFjayBmcm9tIGJlaW5nIHZpc2libGUgYnkgZHVwbGljYXRpbmcgdGhlIGVycm9yXG4gICAgICAvLyBpbiBhIHZlcnkgY2xvc2Ugd2F5IHRvIHRoZSBvcmlnaW5hbCBpbiBjYXNlIGJvdGggc2lkZXMgYXJlIGFjdHVhbGx5XG4gICAgICAvLyBpbnN0YW5jZXMgb2YgRXJyb3IuXG4gICAgICBpZiAoX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwgJiYgX3R5cGVvZihleHBlY3RlZCkgPT09ICdvYmplY3QnICYmIGV4cGVjdGVkICE9PSBudWxsICYmICdzdGFjaycgaW4gYWN0dWFsICYmIGFjdHVhbCBpbnN0YW5jZW9mIEVycm9yICYmICdzdGFjaycgaW4gZXhwZWN0ZWQgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBhY3R1YWwgPSBjb3B5RXJyb3IoYWN0dWFsKTtcbiAgICAgICAgZXhwZWN0ZWQgPSBjb3B5RXJyb3IoZXhwZWN0ZWQpO1xuICAgICAgfVxuICAgICAgaWYgKG9wZXJhdG9yID09PSAnZGVlcFN0cmljdEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ3N0cmljdEVxdWFsJykge1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNyZWF0ZUVyckRpZmYoYWN0dWFsLCBleHBlY3RlZCwgb3BlcmF0b3IpKTtcbiAgICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09ICdub3REZWVwU3RyaWN0RXF1YWwnIHx8IG9wZXJhdG9yID09PSAnbm90U3RyaWN0RXF1YWwnKSB7XG4gICAgICAgIC8vIEluIGNhc2UgdGhlIG9iamVjdHMgYXJlIGVxdWFsIGJ1dCB0aGUgb3BlcmF0b3IgcmVxdWlyZXMgdW5lcXVhbCwgc2hvd1xuICAgICAgICAvLyB0aGUgZmlyc3Qgb2JqZWN0IGFuZCBzYXkgQSBlcXVhbHMgQlxuICAgICAgICB2YXIgYmFzZSA9IGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXTtcbiAgICAgICAgdmFyIHJlcyA9IGluc3BlY3RWYWx1ZShhY3R1YWwpLnNwbGl0KCdcXG4nKTtcblxuICAgICAgICAvLyBJbiBjYXNlIFwiYWN0dWFsXCIgaXMgYW4gb2JqZWN0LCBpdCBzaG91bGQgbm90IGJlIHJlZmVyZW5jZSBlcXVhbC5cbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnbm90U3RyaWN0RXF1YWwnICYmIF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsKSB7XG4gICAgICAgICAgYmFzZSA9IGtSZWFkYWJsZU9wZXJhdG9yLm5vdFN0cmljdEVxdWFsT2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25seSByZW1vdmUgbGluZXMgaW4gY2FzZSBpdCBtYWtlcyBzZW5zZSB0byBjb2xsYXBzZSB0aG9zZS5cbiAgICAgICAgLy8gVE9ETzogQWNjZXB0IGVudiB0byBhbHdheXMgc2hvdyB0aGUgZnVsbCBlcnJvci5cbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAzMCkge1xuICAgICAgICAgIHJlc1syNl0gPSBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgICAgICAgIHdoaWxlIChyZXMubGVuZ3RoID4gMjcpIHtcbiAgICAgICAgICAgIHJlcy5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPbmx5IHByaW50IGEgc2luZ2xlIGlucHV0LlxuICAgICAgICBpZiAocmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJcIi5jb25jYXQoYmFzZSwgXCIgXCIpLmNvbmNhdChyZXNbMF0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwiXCIuY29uY2F0KGJhc2UsIFwiXFxuXFxuXCIpLmNvbmNhdChyZXMuam9pbignXFxuJyksIFwiXFxuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9yZXMgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKTtcbiAgICAgICAgdmFyIG90aGVyID0gJyc7XG4gICAgICAgIHZhciBrbm93bk9wZXJhdG9ycyA9IGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXTtcbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnbm90RGVlcEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ25vdEVxdWFsJykge1xuICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0sIFwiXFxuXFxuXCIpLmNvbmNhdChfcmVzKTtcbiAgICAgICAgICBpZiAoX3Jlcy5sZW5ndGggPiAxMDI0KSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoX3Jlcy5zbGljZSgwLCAxMDIxKSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG90aGVyID0gXCJcIi5jb25jYXQoaW5zcGVjdFZhbHVlKGV4cGVjdGVkKSk7XG4gICAgICAgICAgaWYgKF9yZXMubGVuZ3RoID4gNTEyKSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoX3Jlcy5zbGljZSgwLCA1MDkpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG90aGVyLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgb3RoZXIgPSBcIlwiLmNvbmNhdChvdGhlci5zbGljZSgwLCA1MDkpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnZGVlcEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ2VxdWFsJykge1xuICAgICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KGtub3duT3BlcmF0b3JzLCBcIlxcblxcblwiKS5jb25jYXQoX3JlcywgXCJcXG5cXG5zaG91bGQgZXF1YWxcXG5cXG5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG90aGVyID0gXCIgXCIuY29uY2F0KG9wZXJhdG9yLCBcIiBcIikuY29uY2F0KG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChfcmVzKS5jb25jYXQob3RoZXIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gbGltaXQ7XG4gICAgX3RoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9ICFtZXNzYWdlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ25hbWUnLCB7XG4gICAgICB2YWx1ZTogJ0Fzc2VydGlvbkVycm9yIFtFUlJfQVNTRVJUSU9OXScsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgX3RoaXMuY29kZSA9ICdFUlJfQVNTRVJUSU9OJztcbiAgICBfdGhpcy5hY3R1YWwgPSBhY3R1YWw7XG4gICAgX3RoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICBfdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgc3RhY2tTdGFydEZuKTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBlcnJvciBjb2RlIGluIHRoZSBuYW1lLlxuICAgIF90aGlzLnN0YWNrO1xuICAgIC8vIFJlc2V0IHRoZSBuYW1lLlxuICAgIF90aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gIH1cbiAgX2NyZWF0ZUNsYXNzKEFzc2VydGlvbkVycm9yLCBbe1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIFtcIikuY29uY2F0KHRoaXMuY29kZSwgXCJdOiBcIikuY29uY2F0KHRoaXMubWVzc2FnZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBfaW5zcGVjdCRjdXN0b20sXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHJlY3Vyc2VUaW1lcywgY3R4KSB7XG4gICAgICAvLyBUaGlzIGxpbWl0cyB0aGUgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAgcHJvcGVydHkgZGVmYXVsdCBpbnNwZWN0aW9uIHRvXG4gICAgICAvLyB0aGUgbWluaW11bSBkZXB0aC4gT3RoZXJ3aXNlIHRob3NlIHZhbHVlcyB3b3VsZCBiZSB0b28gdmVyYm9zZSBjb21wYXJlZFxuICAgICAgLy8gdG8gdGhlIGFjdHVhbCBlcnJvciBtZXNzYWdlIHdoaWNoIGNvbnRhaW5zIGEgY29tYmluZWQgdmlldyBvZiB0aGVzZSB0d29cbiAgICAgIC8vIGlucHV0IHZhbHVlcy5cbiAgICAgIHJldHVybiBpbnNwZWN0KHRoaXMsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY3R4KSwge30sIHtcbiAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2UsXG4gICAgICAgIGRlcHRoOiAwXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBBc3NlcnRpb25FcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSwgaW5zcGVjdC5jdXN0b20pO1xubW9kdWxlLmV4cG9ydHMgPSBBc3NlcnRpb25FcnJvcjsiLCIvLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL2Vycm9ycy5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8zYjA0NDk2MmM0OGZlMzEzOTA1ODc3YTk2YjVkMDg5NGE1NDA0ZjZmXG5cbi8qIGVzbGludCBub2RlLWNvcmUvZG9jdW1lbnRlZC1lcnJvcnM6IFwiZXJyb3JcIiAqL1xuLyogZXNsaW50IG5vZGUtY29yZS9hbHBoYWJldGl6ZS1lcnJvcnM6IFwiZXJyb3JcIiAqL1xuLyogZXNsaW50IG5vZGUtY29yZS9wcmVmZXItdXRpbC1mb3JtYXQtZXJyb3JzOiBcImVycm9yXCIgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgd2hvbGUgcG9pbnQgYmVoaW5kIHRoaXMgaW50ZXJuYWwgbW9kdWxlIGlzIHRvIGFsbG93IE5vZGUuanMgdG8gbm9cbi8vIGxvbmdlciBiZSBmb3JjZWQgdG8gdHJlYXQgZXZlcnkgZXJyb3IgbWVzc2FnZSBjaGFuZ2UgYXMgYSBzZW12ZXItbWFqb3Jcbi8vIGNoYW5nZS4gVGhlIE5vZGVFcnJvciBjbGFzc2VzIGhlcmUgYWxsIGV4cG9zZSBhIGBjb2RlYCBwcm9wZXJ0eSB3aG9zZVxuLy8gdmFsdWUgc3RhdGljYWxseSBhbmQgcGVybWFuZW50bHkgaWRlbnRpZmllcyB0aGUgZXJyb3IuIFdoaWxlIHRoZSBlcnJvclxuLy8gbWVzc2FnZSBtYXkgY2hhbmdlLCB0aGUgY29kZSBzaG91bGQgbm90LlxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH1cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxudmFyIGNvZGVzID0ge307XG5cbi8vIExhenkgbG9hZGVkXG52YXIgYXNzZXJ0O1xudmFyIHV0aWw7XG5mdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgQmFzZSkge1xuICBpZiAoIUJhc2UpIHtcbiAgICBCYXNlID0gRXJyb3I7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH1cbiAgfVxuICB2YXIgTm9kZUVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZSkge1xuICAgIF9pbmhlcml0cyhOb2RlRXJyb3IsIF9CYXNlKTtcbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE5vZGVFcnJvcik7XG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHZhciBfdGhpcztcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlRXJyb3IpO1xuICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpKTtcbiAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gX2NyZWF0ZUNsYXNzKE5vZGVFcnJvcik7XG4gIH0oQmFzZSk7XG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcbmZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHtcbiAgICB2YXIgbGVuID0gZXhwZWN0ZWQubGVuZ3RoO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGkpO1xuICAgIH0pO1xuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufVxuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCwgcG9zKSB7XG4gIHJldHVybiBzdHIuc3Vic3RyKCFwb3MgfHwgcG9zIDwgMCA/IDAgOiArcG9zLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xufVxuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZW5kc1dpdGhcbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICBpZiAodGhpc19sZW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzX2xlbiA+IHN0ci5sZW5ndGgpIHtcbiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpc19sZW4gLSBzZWFyY2gubGVuZ3RoLCB0aGlzX2xlbikgPT09IHNlYXJjaDtcbn1cblxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2luY2x1ZGVzXG5mdW5jdGlvbiBpbmNsdWRlcyhzdHIsIHNlYXJjaCwgc3RhcnQpIHtcbiAgaWYgKHR5cGVvZiBzdGFydCAhPT0gJ251bWJlcicpIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cbiAgaWYgKHN0YXJ0ICsgc2VhcmNoLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgfVxufVxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfQU1CSUdVT1VTX0FSR1VNRU5UJywgJ1RoZSBcIiVzXCIgYXJndW1lbnQgaXMgYW1iaWd1b3VzLiAlcycsIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgZnVuY3Rpb24gKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgaWYgKGFzc2VydCA9PT0gdW5kZWZpbmVkKSBhc3NlcnQgPSByZXF1aXJlKCcuLi9hc3NlcnQnKTtcbiAgYXNzZXJ0KHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJywgXCInbmFtZScgbXVzdCBiZSBhIHN0cmluZ1wiKTtcblxuICAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuICB2YXIgZGV0ZXJtaW5lcjtcbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgc3RhcnRzV2l0aChleHBlY3RlZCwgJ25vdCAnKSkge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBub3QgYmUnO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQucmVwbGFjZSgvXm5vdCAvLCAnJyk7XG4gIH0gZWxzZSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IGJlJztcbiAgfVxuICB2YXIgbXNnO1xuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfVxuXG4gIC8vIFRPRE8oQnJpZGdlQVIpOiBJbXByb3ZlIHRoZSBvdXRwdXQgYnkgc2hvd2luZyBgbnVsbGAgYW5kIHNpbWlsYXIuXG4gIG1zZyArPSBcIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQoX3R5cGVvZihhY3R1YWwpKTtcbiAgcmV0dXJuIG1zZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19WQUxVRScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICB2YXIgcmVhc29uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaXMgaW52YWxpZCc7XG4gIGlmICh1dGlsID09PSB1bmRlZmluZWQpIHV0aWwgPSByZXF1aXJlKCd1dGlsLycpO1xuICB2YXIgaW5zcGVjdGVkID0gdXRpbC5pbnNwZWN0KHZhbHVlKTtcbiAgaWYgKGluc3BlY3RlZC5sZW5ndGggPiAxMjgpIHtcbiAgICBpbnNwZWN0ZWQgPSBcIlwiLmNvbmNhdChpbnNwZWN0ZWQuc2xpY2UoMCwgMTI4KSwgXCIuLi5cIik7XG4gIH1cbiAgcmV0dXJuIFwiVGhlIGFyZ3VtZW50ICdcIi5jb25jYXQobmFtZSwgXCInIFwiKS5jb25jYXQocmVhc29uLCBcIi4gUmVjZWl2ZWQgXCIpLmNvbmNhdChpbnNwZWN0ZWQpO1xufSwgVHlwZUVycm9yLCBSYW5nZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFJywgZnVuY3Rpb24gKGlucHV0LCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHlwZTtcbiAgaWYgKHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICB0eXBlID0gXCJpbnN0YW5jZSBvZiBcIi5jb25jYXQodmFsdWUuY29uc3RydWN0b3IubmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdHlwZSA9IFwidHlwZSBcIi5jb25jYXQoX3R5cGVvZih2YWx1ZSkpO1xuICB9XG4gIHJldHVybiBcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnB1dCwgXCIgdG8gYmUgcmV0dXJuZWQgZnJvbSB0aGUgXFxcIlwiKS5jb25jYXQobmFtZSwgXCJcXFwiXCIpICsgXCIgZnVuY3Rpb24gYnV0IGdvdCBcIi5jb25jYXQodHlwZSwgXCIuXCIpO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX01JU1NJTkdfQVJHUycsIGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICBpZiAoYXNzZXJ0ID09PSB1bmRlZmluZWQpIGFzc2VydCA9IHJlcXVpcmUoJy4uL2Fzc2VydCcpO1xuICBhc3NlcnQoYXJncy5sZW5ndGggPiAwLCAnQXQgbGVhc3Qgb25lIGFyZyBuZWVkcyB0byBiZSBzcGVjaWZpZWQnKTtcbiAgdmFyIG1zZyA9ICdUaGUgJztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICBhcmdzID0gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KGEsIFwiXFxcIlwiKTtcbiAgfSk7XG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAxOlxuICAgICAgbXNnICs9IFwiXCIuY29uY2F0KGFyZ3NbMF0sIFwiIGFyZ3VtZW50XCIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgbXNnICs9IFwiXCIuY29uY2F0KGFyZ3NbMF0sIFwiIGFuZCBcIikuY29uY2F0KGFyZ3NbMV0sIFwiIGFyZ3VtZW50c1wiKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBtc2cgKz0gYXJncy5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpO1xuICAgICAgbXNnICs9IFwiLCBhbmQgXCIuY29uY2F0KGFyZ3NbbGVuIC0gMV0sIFwiIGFyZ3VtZW50c1wiKTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBcIlwiLmNvbmNhdChtc2csIFwiIG11c3QgYmUgc3BlY2lmaWVkXCIpO1xufSwgVHlwZUVycm9yKTtcbm1vZHVsZS5leHBvcnRzLmNvZGVzID0gY29kZXM7IiwiLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC91dGlsL2NvbXBhcmlzb25zLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzExMmNjN2MyNzU1MTI1NGFhMmIxNzA5OGZiNzc0ODY3ZjA1ZWQwZDlcblxuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOyByZXR1cm4gYXJyMjsgfVxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KHIsIGwpIHsgdmFyIHQgPSBudWxsID09IHIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIHJbU3ltYm9sLml0ZXJhdG9yXSB8fCByW1wiQEBpdGVyYXRvclwiXTsgaWYgKG51bGwgIT0gdCkgeyB2YXIgZSwgbiwgaSwgdSwgYSA9IFtdLCBmID0gITAsIG8gPSAhMTsgdHJ5IHsgaWYgKGkgPSAodCA9IHQuY2FsbChyKSkubmV4dCwgMCA9PT0gbCkgeyBpZiAoT2JqZWN0KHQpICE9PSB0KSByZXR1cm47IGYgPSAhMTsgfSBlbHNlIGZvciAoOyAhKGYgPSAoZSA9IGkuY2FsbCh0KSkuZG9uZSkgJiYgKGEucHVzaChlLnZhbHVlKSwgYS5sZW5ndGggIT09IGwpOyBmID0gITApOyB9IGNhdGNoIChyKSB7IG8gPSAhMCwgbiA9IHI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghZiAmJiBudWxsICE9IHQucmV0dXJuICYmICh1ID0gdC5yZXR1cm4oKSwgT2JqZWN0KHUpICE9PSB1KSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAobykgdGhyb3cgbjsgfSB9IHJldHVybiBhOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG87IH0gOiBmdW5jdGlvbiAobykgeyByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbzsgfSwgX3R5cGVvZihvKTsgfVxudmFyIHJlZ2V4RmxhZ3NTdXBwb3J0ZWQgPSAvYS9nLmZsYWdzICE9PSB1bmRlZmluZWQ7XG52YXIgYXJyYXlGcm9tU2V0ID0gZnVuY3Rpb24gYXJyYXlGcm9tU2V0KHNldCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgc2V0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFycmF5LnB1c2godmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIGFycmF5O1xufTtcbnZhciBhcnJheUZyb21NYXAgPSBmdW5jdGlvbiBhcnJheUZyb21NYXAobWFwKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBtYXAuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHJldHVybiBhcnJheS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59O1xudmFyIG9iamVjdElzID0gT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogcmVxdWlyZSgnb2JqZWN0LWlzJyk7XG52YXIgb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbXTtcbn07XG52YXIgbnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gPyBOdW1iZXIuaXNOYU4gOiByZXF1aXJlKCdpcy1uYW4nKTtcbmZ1bmN0aW9uIHVuY3VycnlUaGlzKGYpIHtcbiAgcmV0dXJuIGYuY2FsbC5iaW5kKGYpO1xufVxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBvYmplY3RUb1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIF9yZXF1aXJlJHR5cGVzID0gcmVxdWlyZSgndXRpbC8nKS50eXBlcyxcbiAgaXNBbnlBcnJheUJ1ZmZlciA9IF9yZXF1aXJlJHR5cGVzLmlzQW55QXJyYXlCdWZmZXIsXG4gIGlzQXJyYXlCdWZmZXJWaWV3ID0gX3JlcXVpcmUkdHlwZXMuaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzRGF0ZSA9IF9yZXF1aXJlJHR5cGVzLmlzRGF0ZSxcbiAgaXNNYXAgPSBfcmVxdWlyZSR0eXBlcy5pc01hcCxcbiAgaXNSZWdFeHAgPSBfcmVxdWlyZSR0eXBlcy5pc1JlZ0V4cCxcbiAgaXNTZXQgPSBfcmVxdWlyZSR0eXBlcy5pc1NldCxcbiAgaXNOYXRpdmVFcnJvciA9IF9yZXF1aXJlJHR5cGVzLmlzTmF0aXZlRXJyb3IsXG4gIGlzQm94ZWRQcmltaXRpdmUgPSBfcmVxdWlyZSR0eXBlcy5pc0JveGVkUHJpbWl0aXZlLFxuICBpc051bWJlck9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzTnVtYmVyT2JqZWN0LFxuICBpc1N0cmluZ09iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzU3RyaW5nT2JqZWN0LFxuICBpc0Jvb2xlYW5PYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc0Jvb2xlYW5PYmplY3QsXG4gIGlzQmlnSW50T2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNCaWdJbnRPYmplY3QsXG4gIGlzU3ltYm9sT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNTeW1ib2xPYmplY3QsXG4gIGlzRmxvYXQzMkFycmF5ID0gX3JlcXVpcmUkdHlwZXMuaXNGbG9hdDMyQXJyYXksXG4gIGlzRmxvYXQ2NEFycmF5ID0gX3JlcXVpcmUkdHlwZXMuaXNGbG9hdDY0QXJyYXk7XG5mdW5jdGlvbiBpc05vbkluZGV4KGtleSkge1xuICBpZiAoa2V5Lmxlbmd0aCA9PT0gMCB8fCBrZXkubGVuZ3RoID4gMTApIHJldHVybiB0cnVlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjb2RlID0ga2V5LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIFRoZSBtYXhpbXVtIHNpemUgZm9yIGFuIGFycmF5IGlzIDIgKiogMzIgLTEuXG4gIHJldHVybiBrZXkubGVuZ3RoID09PSAxMCAmJiBrZXkgPj0gTWF0aC5wb3coMiwgMzIpO1xufVxuZnVuY3Rpb24gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkuZmlsdGVyKGlzTm9uSW5kZXgpLmNvbmNhdChvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsdWUpLmZpbHRlcihPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmJpbmQodmFsdWUpKSk7XG59XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvYmxvYi82ODBlOWU1ZTQ4OGYyMmFhYzI3NTk5YTU3ZGM4NDRhNjMxNTkyOGRkL2luZGV4LmpzXG4vLyBvcmlnaW5hbCBub3RpY2U6XG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXTtcbiAgICAgIHkgPSBiW2ldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbnZhciBPTkxZX0VOVU1FUkFCTEUgPSB1bmRlZmluZWQ7XG52YXIga1N0cmljdCA9IHRydWU7XG52YXIga0xvb3NlID0gZmFsc2U7XG52YXIga05vSXRlcmF0b3IgPSAwO1xudmFyIGtJc0FycmF5ID0gMTtcbnZhciBrSXNTZXQgPSAyO1xudmFyIGtJc01hcCA9IDM7XG5cbi8vIENoZWNrIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSBzb3VyY2UgYW5kIGZsYWdzXG5mdW5jdGlvbiBhcmVTaW1pbGFyUmVnRXhwcyhhLCBiKSB7XG4gIHJldHVybiByZWdleEZsYWdzU3VwcG9ydGVkID8gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3MgOiBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTtcbn1cbmZ1bmN0aW9uIGFyZVNpbWlsYXJGbG9hdEFycmF5cyhhLCBiKSB7XG4gIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBhLmJ5dGVMZW5ndGg7IG9mZnNldCsrKSB7XG4gICAgaWYgKGFbb2Zmc2V0XSAhPT0gYltvZmZzZXRdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYXJlU2ltaWxhclR5cGVkQXJyYXlzKGEsIGIpIHtcbiAgaWYgKGEuYnl0ZUxlbmd0aCAhPT0gYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGEuYnVmZmVyLCBhLmJ5dGVPZmZzZXQsIGEuYnl0ZUxlbmd0aCksIG5ldyBVaW50OEFycmF5KGIuYnVmZmVyLCBiLmJ5dGVPZmZzZXQsIGIuYnl0ZUxlbmd0aCkpID09PSAwO1xufVxuZnVuY3Rpb24gYXJlRXF1YWxBcnJheUJ1ZmZlcnMoYnVmMSwgYnVmMikge1xuICByZXR1cm4gYnVmMS5ieXRlTGVuZ3RoID09PSBidWYyLmJ5dGVMZW5ndGggJiYgY29tcGFyZShuZXcgVWludDhBcnJheShidWYxKSwgbmV3IFVpbnQ4QXJyYXkoYnVmMikpID09PSAwO1xufVxuZnVuY3Rpb24gaXNFcXVhbEJveGVkUHJpbWl0aXZlKHZhbDEsIHZhbDIpIHtcbiAgaWYgKGlzTnVtYmVyT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyT2JqZWN0KHZhbDIpICYmIG9iamVjdElzKE51bWJlci5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpLCBOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKSk7XG4gIH1cbiAgaWYgKGlzU3RyaW5nT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nT2JqZWN0KHZhbDIpICYmIFN0cmluZy5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuICBpZiAoaXNCb29sZWFuT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzQm9vbGVhbk9iamVjdCh2YWwyKSAmJiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuICBpZiAoaXNCaWdJbnRPYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNCaWdJbnRPYmplY3QodmFsMikgJiYgQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xuICB9XG4gIHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWwyKSAmJiBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG59XG5cbi8vIE5vdGVzOiBUeXBlIHRhZ3MgYXJlIGhpc3RvcmljYWwgW1tDbGFzc11dIHByb3BlcnRpZXMgdGhhdCBjYW4gYmUgc2V0IGJ5XG4vLyBGdW5jdGlvblRlbXBsYXRlOjpTZXRDbGFzc05hbWUoKSBpbiBDKysgb3IgU3ltYm9sLnRvU3RyaW5nVGFnIGluIEpTXG4vLyBhbmQgcmV0cmlldmVkIHVzaW5nIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopIGluIEpTXG4vLyBTZWUgaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuLy8gZm9yIGEgbGlzdCBvZiB0YWdzIHByZS1kZWZpbmVkIGluIHRoZSBzcGVjLlxuLy8gVGhlcmUgYXJlIHNvbWUgdW5zcGVjaWZpZWQgdGFncyBpbiB0aGUgd2lsZCB0b28gKGUuZy4gdHlwZWQgYXJyYXkgdGFncykuXG4vLyBTaW5jZSB0YWdzIGNhbiBiZSBhbHRlcmVkLCB0aGV5IG9ubHkgc2VydmUgZmFzdCBmYWlsdXJlc1xuLy9cbi8vIFR5cGVkIGFycmF5cyBhbmQgYnVmZmVycyBhcmUgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlIGNvbnRlbnQgaW4gdGhlaXJcbi8vIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIuIFRoaXMgb3B0aW1pemF0aW9uIHJlcXVpcmVzIHRoYXQgaXQnc1xuLy8gcmVhc29uYWJsZSB0byBpbnRlcnByZXQgdGhlaXIgdW5kZXJseWluZyBtZW1vcnkgaW4gdGhlIHNhbWUgd2F5LFxuLy8gd2hpY2ggaXMgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlaXIgdHlwZSB0YWdzLlxuLy8gKGUuZy4gYSBVaW50OEFycmF5IGFuZCBhIFVpbnQxNkFycmF5IHdpdGggdGhlIHNhbWUgbWVtb3J5IGNvbnRlbnRcbi8vIGNvdWxkIHN0aWxsIGJlIGRpZmZlcmVudCBiZWNhdXNlIHRoZXkgd2lsbCBiZSBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSkuXG4vL1xuLy8gRm9yIHN0cmljdCBjb21wYXJpc29uLCBvYmplY3RzIHNob3VsZCBoYXZlXG4vLyBhKSBUaGUgc2FtZSBidWlsdC1pbiB0eXBlIHRhZ3Ncbi8vIGIpIFRoZSBzYW1lIHByb3RvdHlwZXMuXG5cbmZ1bmN0aW9uIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MpIHtcbiAgLy8gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAodmFsMSA9PT0gdmFsMikge1xuICAgIGlmICh2YWwxICE9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gc3RyaWN0ID8gb2JqZWN0SXModmFsMSwgdmFsMikgOiB0cnVlO1xuICB9XG5cbiAgLy8gQ2hlY2sgbW9yZSBjbG9zZWx5IGlmIHZhbDEgYW5kIHZhbDIgYXJlIGVxdWFsLlxuICBpZiAoc3RyaWN0KSB7XG4gICAgaWYgKF90eXBlb2YodmFsMSkgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbDEgPT09ICdudW1iZXInICYmIG51bWJlcklzTmFOKHZhbDEpICYmIG51bWJlcklzTmFOKHZhbDIpO1xuICAgIH1cbiAgICBpZiAoX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcgfHwgdmFsMSA9PT0gbnVsbCB8fCB2YWwyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsMSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsMSA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHZhbDIgPT09IG51bGwgfHwgX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICByZXR1cm4gdmFsMSA9PSB2YWwyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodmFsMiA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB2YXIgdmFsMVRhZyA9IG9iamVjdFRvU3RyaW5nKHZhbDEpO1xuICB2YXIgdmFsMlRhZyA9IG9iamVjdFRvU3RyaW5nKHZhbDIpO1xuICBpZiAodmFsMVRhZyAhPT0gdmFsMlRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwxKSkge1xuICAgIC8vIENoZWNrIGZvciBzcGFyc2UgYXJyYXlzIGFuZCBnZW5lcmFsIGZhc3QgcGF0aFxuICAgIGlmICh2YWwxLmxlbmd0aCAhPT0gdmFsMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGtleXMxID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDEsIE9OTFlfRU5VTUVSQUJMRSk7XG4gICAgdmFyIGtleXMyID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDIsIE9OTFlfRU5VTUVSQUJMRSk7XG4gICAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNBcnJheSwga2V5czEpO1xuICB9XG4gIC8vIFticm93c2VyaWZ5XSBUaGlzIHRyaWdnZXJzIG9uIGNlcnRhaW4gdHlwZXMgaW4gSUUgKE1hcC9TZXQpIHNvIHdlIGRvbid0XG4gIC8vIHdhbid0IHRvIGVhcmx5IHJldHVybiBvdXQgb2YgdGhlIHJlc3Qgb2YgdGhlIGNoZWNrcy4gSG93ZXZlciB3ZSBjYW4gY2hlY2tcbiAgLy8gaWYgdGhlIHNlY29uZCB2YWx1ZSBpcyBvbmUgb2YgdGhlc2UgdmFsdWVzIGFuZCB0aGUgZmlyc3QgaXNuJ3QuXG4gIGlmICh2YWwxVGFnID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIC8vIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvcik7XG4gICAgaWYgKCFpc01hcCh2YWwxKSAmJiBpc01hcCh2YWwyKSB8fCAhaXNTZXQodmFsMSkgJiYgaXNTZXQodmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzRGF0ZSh2YWwxKSkge1xuICAgIGlmICghaXNEYXRlKHZhbDIpIHx8IERhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbCh2YWwxKSAhPT0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZS5jYWxsKHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHZhbDEpKSB7XG4gICAgaWYgKCFpc1JlZ0V4cCh2YWwyKSB8fCAhYXJlU2ltaWxhclJlZ0V4cHModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNOYXRpdmVFcnJvcih2YWwxKSB8fCB2YWwxIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAvLyBEbyBub3QgY29tcGFyZSB0aGUgc3RhY2sgYXMgaXQgbWlnaHQgZGlmZmVyIGV2ZW4gdGhvdWdoIHRoZSBlcnJvciBpdHNlbGZcbiAgICAvLyBpcyBvdGhlcndpc2UgaWRlbnRpY2FsLlxuICAgIGlmICh2YWwxLm1lc3NhZ2UgIT09IHZhbDIubWVzc2FnZSB8fCB2YWwxLm5hbWUgIT09IHZhbDIubmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyVmlldyh2YWwxKSkge1xuICAgIGlmICghc3RyaWN0ICYmIChpc0Zsb2F0MzJBcnJheSh2YWwxKSB8fCBpc0Zsb2F0NjRBcnJheSh2YWwxKSkpIHtcbiAgICAgIGlmICghYXJlU2ltaWxhckZsb2F0QXJyYXlzKHZhbDEsIHZhbDIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhcmVTaW1pbGFyVHlwZWRBcnJheXModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQnVmZmVyLmNvbXBhcmUgcmV0dXJucyB0cnVlLCBzbyB2YWwxLmxlbmd0aCA9PT0gdmFsMi5sZW5ndGguIElmIHRoZXkgYm90aFxuICAgIC8vIG9ubHkgY29udGFpbiBudW1lcmljIGtleXMsIHdlIGRvbid0IG5lZWQgdG8gZXhhbSBmdXJ0aGVyIHRoYW4gY2hlY2tpbmdcbiAgICAvLyB0aGUgc3ltYm9scy5cbiAgICB2YXIgX2tleXMgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMSwgT05MWV9FTlVNRVJBQkxFKTtcbiAgICB2YXIgX2tleXMyID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDIsIE9OTFlfRU5VTUVSQUJMRSk7XG4gICAgaWYgKF9rZXlzLmxlbmd0aCAhPT0gX2tleXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IsIF9rZXlzKTtcbiAgfSBlbHNlIGlmIChpc1NldCh2YWwxKSkge1xuICAgIGlmICghaXNTZXQodmFsMikgfHwgdmFsMS5zaXplICE9PSB2YWwyLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtJc1NldCk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsMSkpIHtcbiAgICBpZiAoIWlzTWFwKHZhbDIpIHx8IHZhbDEuc2l6ZSAhPT0gdmFsMi5zaXplKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNNYXApO1xuICB9IGVsc2UgaWYgKGlzQW55QXJyYXlCdWZmZXIodmFsMSkpIHtcbiAgICBpZiAoIWFyZUVxdWFsQXJyYXlCdWZmZXJzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQm94ZWRQcmltaXRpdmUodmFsMSkgJiYgIWlzRXF1YWxCb3hlZFByaW1pdGl2ZSh2YWwxLCB2YWwyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IpO1xufVxuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZXModmFsLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwsIGspO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGl0ZXJhdGlvblR5cGUsIGFLZXlzKSB7XG4gIC8vIEZvciBhbGwgcmVtYWluaW5nIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5LCBvYmplY3RzIGFuZCBNYXBzLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5IGhhdmluZzpcbiAgLy8gYSkgVGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAvLyBiKSBUaGUgc2FtZSBzZXQgb2Yga2V5cy9pbmRleGVzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpXG4gIC8vIGMpIEVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleS9pbmRleFxuICAvLyBkKSBGb3IgU2V0cyBhbmQgTWFwcywgZXF1YWwgY29udGVudHNcbiAgLy8gTm90ZTogdGhpcyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDUpIHtcbiAgICBhS2V5cyA9IE9iamVjdC5rZXlzKHZhbDEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKHZhbDIpO1xuXG4gICAgLy8gVGhlIHBhaXIgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzLlxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIENoZWFwIGtleSB0ZXN0XG4gIHZhciBpID0gMDtcbiAgZm9yICg7IGkgPCBhS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkodmFsMiwgYUtleXNbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChzdHJpY3QgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gNSkge1xuICAgIHZhciBzeW1ib2xLZXlzQSA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyh2YWwxKTtcbiAgICBpZiAoc3ltYm9sS2V5c0EubGVuZ3RoICE9PSAwKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHN5bWJvbEtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBzeW1ib2xLZXlzQVtpXTtcbiAgICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbDEsIGtleSkpIHtcbiAgICAgICAgICBpZiAoIXByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbDIsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJc0VudW1lcmFibGUodmFsMiwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHN5bWJvbEtleXNCID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbDIpO1xuICAgICAgaWYgKHN5bWJvbEtleXNBLmxlbmd0aCAhPT0gc3ltYm9sS2V5c0IubGVuZ3RoICYmIGdldEVudW1lcmFibGVzKHZhbDIsIHN5bWJvbEtleXNCKS5sZW5ndGggIT09IGNvdW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9zeW1ib2xLZXlzQiA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyh2YWwyKTtcbiAgICAgIGlmIChfc3ltYm9sS2V5c0IubGVuZ3RoICE9PSAwICYmIGdldEVudW1lcmFibGVzKHZhbDIsIF9zeW1ib2xLZXlzQikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGFLZXlzLmxlbmd0aCA9PT0gMCAmJiAoaXRlcmF0aW9uVHlwZSA9PT0ga05vSXRlcmF0b3IgfHwgaXRlcmF0aW9uVHlwZSA9PT0ga0lzQXJyYXkgJiYgdmFsMS5sZW5ndGggPT09IDAgfHwgdmFsMS5zaXplID09PSAwKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gVXNlIG1lbW9zIHRvIGhhbmRsZSBjeWNsZXMuXG4gIGlmIChtZW1vcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWVtb3MgPSB7XG4gICAgICB2YWwxOiBuZXcgTWFwKCksXG4gICAgICB2YWwyOiBuZXcgTWFwKCksXG4gICAgICBwb3NpdGlvbjogMFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gV2UgcHJldmVudCB1cCB0byB0d28gbWFwLmhhcyh4KSBjYWxscyBieSBkaXJlY3RseSByZXRyaWV2aW5nIHRoZSB2YWx1ZVxuICAgIC8vIGFuZCBjaGVja2luZyBmb3IgdW5kZWZpbmVkLiBUaGUgbWFwIGNhbiBvbmx5IGNvbnRhaW4gbnVtYmVycywgc28gaXQgaXNcbiAgICAvLyBzYWZlIHRvIGNoZWNrIGZvciB1bmRlZmluZWQgb25seS5cbiAgICB2YXIgdmFsMk1lbW9BID0gbWVtb3MudmFsMS5nZXQodmFsMSk7XG4gICAgaWYgKHZhbDJNZW1vQSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdmFsMk1lbW9CID0gbWVtb3MudmFsMi5nZXQodmFsMik7XG4gICAgICBpZiAodmFsMk1lbW9CICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZhbDJNZW1vQSA9PT0gdmFsMk1lbW9CO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vcy5wb3NpdGlvbisrO1xuICB9XG4gIG1lbW9zLnZhbDEuc2V0KHZhbDEsIG1lbW9zLnBvc2l0aW9uKTtcbiAgbWVtb3MudmFsMi5zZXQodmFsMiwgbWVtb3MucG9zaXRpb24pO1xuICB2YXIgYXJlRXEgPSBvYmpFcXVpdih2YWwxLCB2YWwyLCBzdHJpY3QsIGFLZXlzLCBtZW1vcywgaXRlcmF0aW9uVHlwZSk7XG4gIG1lbW9zLnZhbDEuZGVsZXRlKHZhbDEpO1xuICBtZW1vcy52YWwyLmRlbGV0ZSh2YWwyKTtcbiAgcmV0dXJuIGFyZUVxO1xufVxuZnVuY3Rpb24gc2V0SGFzRXF1YWxFbGVtZW50KHNldCwgdmFsMSwgc3RyaWN0LCBtZW1vKSB7XG4gIC8vIEdvIGxvb2tpbmcuXG4gIHZhciBzZXRWYWx1ZXMgPSBhcnJheUZyb21TZXQoc2V0KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsMiA9IHNldFZhbHVlc1tpXTtcbiAgICBpZiAoaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBtYXRjaGluZyBlbGVtZW50IHRvIG1ha2Ugc3VyZSB3ZSBkbyBub3QgY2hlY2sgdGhhdCBhZ2Fpbi5cbiAgICAgIHNldC5kZWxldGUodmFsMik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9FcXVhbGl0eV9jb21wYXJpc29uc19hbmRfc2FtZW5lc3MjTG9vc2VfZXF1YWxpdHlfdXNpbmdcbi8vIFNhZGx5IGl0IGlzIG5vdCBwb3NzaWJsZSB0byBkZXRlY3QgY29ycmVzcG9uZGluZyB2YWx1ZXMgcHJvcGVybHkgaW4gY2FzZSB0aGVcbi8vIHR5cGUgaXMgYSBzdHJpbmcsIG51bWJlciwgYmlnaW50IG9yIGJvb2xlYW4uIFRoZSByZWFzb24gaXMgdGhhdCB0aG9zZSB2YWx1ZXNcbi8vIGNhbiBtYXRjaCBsb3RzIG9mIGRpZmZlcmVudCBzdHJpbmcgdmFsdWVzIChlLmcuLCAxbiA9PSAnKzAwMDAxJykuXG5mdW5jdGlvbiBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSkge1xuICBzd2l0Y2ggKF90eXBlb2YocHJpbSkpIHtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIC8vIE9ubHkgcGFzcyBpbiBudWxsIGFzIG9iamVjdCFcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcHJpbSA9ICtwcmltO1xuICAgIC8vIExvb3NlIGVxdWFsIGVudHJpZXMgZXhpc3Qgb25seSBpZiB0aGUgc3RyaW5nIGlzIHBvc3NpYmxlIHRvIGNvbnZlcnQgdG9cbiAgICAvLyBhIHJlZ3VsYXIgbnVtYmVyIGFuZCBub3QgTmFOLlxuICAgIC8vIEZhbGwgdGhyb3VnaFxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAobnVtYmVySXNOYU4ocHJpbSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gc2V0TWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHByaW0pIHtcbiAgdmFyIGFsdFZhbHVlID0gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pO1xuICBpZiAoYWx0VmFsdWUgIT0gbnVsbCkgcmV0dXJuIGFsdFZhbHVlO1xuICByZXR1cm4gYi5oYXMoYWx0VmFsdWUpICYmICFhLmhhcyhhbHRWYWx1ZSk7XG59XG5mdW5jdGlvbiBtYXBNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgcHJpbSwgaXRlbSwgbWVtbykge1xuICB2YXIgYWx0VmFsdWUgPSBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSk7XG4gIGlmIChhbHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGFsdFZhbHVlO1xuICB9XG4gIHZhciBjdXJCID0gYi5nZXQoYWx0VmFsdWUpO1xuICBpZiAoY3VyQiA9PT0gdW5kZWZpbmVkICYmICFiLmhhcyhhbHRWYWx1ZSkgfHwgIWlubmVyRGVlcEVxdWFsKGl0ZW0sIGN1ckIsIGZhbHNlLCBtZW1vKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gIWEuaGFzKGFsdFZhbHVlKSAmJiBpbm5lckRlZXBFcXVhbChpdGVtLCBjdXJCLCBmYWxzZSwgbWVtbyk7XG59XG5mdW5jdGlvbiBzZXRFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gVGhpcyBpcyBhIGxhemlseSBpbml0aWF0ZWQgU2V0IG9mIGVudHJpZXMgd2hpY2ggaGF2ZSB0byBiZSBjb21wYXJlZFxuICAvLyBwYWlyd2lzZS5cbiAgdmFyIHNldCA9IG51bGw7XG4gIHZhciBhVmFsdWVzID0gYXJyYXlGcm9tU2V0KGEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsID0gYVZhbHVlc1tpXTtcbiAgICAvLyBOb3RlOiBDaGVja2luZyBmb3IgdGhlIG9iamVjdHMgZmlyc3QgaW1wcm92ZXMgdGhlIHBlcmZvcm1hbmNlIGZvciBvYmplY3RcbiAgICAvLyBoZWF2eSBzZXRzIGJ1dCBpdCBpcyBhIG1pbm9yIHNsb3cgZG93biBmb3IgcHJpbWl0aXZlcy4gQXMgdGhleSBhcmUgZmFzdFxuICAgIC8vIHRvIGNoZWNrIHRoaXMgaW1wcm92ZXMgdGhlIHdvcnN0IGNhc2Ugc2NlbmFyaW8gaW5zdGVhZC5cbiAgICBpZiAoX3R5cGVvZih2YWwpID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBkb2Vzbid0IGV4aXN0IGluIHRoZSBzZWNvbmQgc2V0IGl0cyBhbiBub3QgbnVsbFxuICAgICAgLy8gb2JqZWN0IChvciBub24gc3RyaWN0IG9ubHk6IGEgbm90IG1hdGNoaW5nIHByaW1pdGl2ZSkgd2UnbGwgbmVlZCB0byBnb1xuICAgICAgLy8gaHVudGluZyBmb3Igc29tZXRoaW5nIHRoYXRzIGRlZXAtKHN0cmljdC0pZXF1YWwgdG8gaXQuIFRvIG1ha2UgdGhpc1xuICAgICAgLy8gTyhuIGxvZyBuKSBjb21wbGV4aXR5IHdlIGhhdmUgdG8gY29weSB0aGVzZSB2YWx1ZXMgaW4gYSBuZXcgc2V0IGZpcnN0LlxuICAgICAgc2V0LmFkZCh2YWwpO1xuICAgIH0gZWxzZSBpZiAoIWIuaGFzKHZhbCkpIHtcbiAgICAgIGlmIChzdHJpY3QpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gRmFzdCBwYXRoIHRvIGRldGVjdCBtaXNzaW5nIHN0cmluZywgc3ltYm9sLCB1bmRlZmluZWQgYW5kIG51bGwgdmFsdWVzLlxuICAgICAgaWYgKCFzZXRNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgdmFsKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH1cbiAgICAgIHNldC5hZGQodmFsKTtcbiAgICB9XG4gIH1cbiAgaWYgKHNldCAhPT0gbnVsbCkge1xuICAgIHZhciBiVmFsdWVzID0gYXJyYXlGcm9tU2V0KGIpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBiVmFsdWVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF92YWwgPSBiVmFsdWVzW19pXTtcbiAgICAgIC8vIFdlIGhhdmUgdG8gY2hlY2sgaWYgYSBwcmltaXRpdmUgdmFsdWUgaXMgYWxyZWFkeVxuICAgICAgLy8gbWF0Y2hpbmcgYW5kIG9ubHkgaWYgaXQncyBub3QsIGdvIGh1bnRpbmcgZm9yIGl0LlxuICAgICAgaWYgKF90eXBlb2YoX3ZhbCkgPT09ICdvYmplY3QnICYmIF92YWwgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgIWEuaGFzKF92YWwpICYmICFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNldC5zaXplID09PSAwO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gbWFwSGFzRXF1YWxFbnRyeShzZXQsIG1hcCwga2V5MSwgaXRlbTEsIHN0cmljdCwgbWVtbykge1xuICAvLyBUbyBiZSBhYmxlIHRvIGhhbmRsZSBjYXNlcyBsaWtlOlxuICAvLyAgIE1hcChbW3t9LCAnYSddLCBbe30sICdiJ11dKSB2cyBNYXAoW1t7fSwgJ2InXSwgW3t9LCAnYSddXSlcbiAgLy8gLi4uIHdlIG5lZWQgdG8gY29uc2lkZXIgKmFsbCogbWF0Y2hpbmcga2V5cywgbm90IGp1c3QgdGhlIGZpcnN0IHdlIGZpbmQuXG4gIHZhciBzZXRWYWx1ZXMgPSBhcnJheUZyb21TZXQoc2V0KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5MiA9IHNldFZhbHVlc1tpXTtcbiAgICBpZiAoaW5uZXJEZWVwRXF1YWwoa2V5MSwga2V5Miwgc3RyaWN0LCBtZW1vKSAmJiBpbm5lckRlZXBFcXVhbChpdGVtMSwgbWFwLmdldChrZXkyKSwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgc2V0LmRlbGV0ZShrZXkyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBtYXBFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW8pIHtcbiAgdmFyIHNldCA9IG51bGw7XG4gIHZhciBhRW50cmllcyA9IGFycmF5RnJvbU1hcChhKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhRW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfYUVudHJpZXMkaSA9IF9zbGljZWRUb0FycmF5KGFFbnRyaWVzW2ldLCAyKSxcbiAgICAgIGtleSA9IF9hRW50cmllcyRpWzBdLFxuICAgICAgaXRlbTEgPSBfYUVudHJpZXMkaVsxXTtcbiAgICBpZiAoX3R5cGVvZihrZXkpID09PSAnb2JqZWN0JyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgfVxuICAgICAgc2V0LmFkZChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBCeSBkaXJlY3RseSByZXRyaWV2aW5nIHRoZSB2YWx1ZSB3ZSBwcmV2ZW50IGFub3RoZXIgYi5oYXMoa2V5KSBjaGVjayBpblxuICAgICAgLy8gYWxtb3N0IGFsbCBwb3NzaWJsZSBjYXNlcy5cbiAgICAgIHZhciBpdGVtMiA9IGIuZ2V0KGtleSk7XG4gICAgICBpZiAoaXRlbTIgPT09IHVuZGVmaW5lZCAmJiAhYi5oYXMoa2V5KSB8fCAhaW5uZXJEZWVwRXF1YWwoaXRlbTEsIGl0ZW0yLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAgIGlmIChzdHJpY3QpIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gRmFzdCBwYXRoIHRvIGRldGVjdCBtaXNzaW5nIHN0cmluZywgc3ltYm9sLCB1bmRlZmluZWQgYW5kIG51bGxcbiAgICAgICAgLy8ga2V5cy5cbiAgICAgICAgaWYgKCFtYXBNaWdodEhhdmVMb29zZVByaW0oYSwgYiwga2V5LCBpdGVtMSwgbWVtbykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzZXQgIT09IG51bGwpIHtcbiAgICB2YXIgYkVudHJpZXMgPSBhcnJheUZyb21NYXAoYik7XG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgYkVudHJpZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIF9iRW50cmllcyRfaSA9IF9zbGljZWRUb0FycmF5KGJFbnRyaWVzW19pMl0sIDIpLFxuICAgICAgICBfa2V5ID0gX2JFbnRyaWVzJF9pWzBdLFxuICAgICAgICBpdGVtID0gX2JFbnRyaWVzJF9pWzFdO1xuICAgICAgaWYgKF90eXBlb2YoX2tleSkgPT09ICdvYmplY3QnICYmIF9rZXkgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwgX2tleSwgaXRlbSwgc3RyaWN0LCBtZW1vKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmICghYS5oYXMoX2tleSkgfHwgIWlubmVyRGVlcEVxdWFsKGEuZ2V0KF9rZXkpLCBpdGVtLCBmYWxzZSwgbWVtbykpICYmICFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwgX2tleSwgaXRlbSwgZmFsc2UsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNldC5zaXplID09PSAwO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBrZXlzLCBtZW1vcywgaXRlcmF0aW9uVHlwZSkge1xuICAvLyBTZXRzIGFuZCBtYXBzIGRvbid0IGhhdmUgdGhlaXIgZW50cmllcyBhY2Nlc3NpYmxlIHZpYSBub3JtYWwgb2JqZWN0XG4gIC8vIHByb3BlcnRpZXMuXG4gIHZhciBpID0gMDtcbiAgaWYgKGl0ZXJhdGlvblR5cGUgPT09IGtJc1NldCkge1xuICAgIGlmICghc2V0RXF1aXYoYSwgYiwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXRlcmF0aW9uVHlwZSA9PT0ga0lzTWFwKSB7XG4gICAgaWYgKCFtYXBFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpdGVyYXRpb25UeXBlID09PSBrSXNBcnJheSkge1xuICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KGEsIGkpKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkoYiwgaSkgfHwgIWlubmVyRGVlcEVxdWFsKGFbaV0sIGJbaV0sIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhc093blByb3BlcnR5KGIsIGkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFycmF5IGlzIHNwYXJzZS5cbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIGZvciAoOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c0FbaV07XG4gICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShiLCBrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleXNBLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSBwYWlyIG11c3QgaGF2ZSBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXkuXG4gIC8vIFBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3Q6XG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9rZXkyID0ga2V5c1tpXTtcbiAgICBpZiAoIWlubmVyRGVlcEVxdWFsKGFbX2tleTJdLCBiW19rZXkyXSwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBpc0RlZXBFcXVhbCh2YWwxLCB2YWwyKSB7XG4gIHJldHVybiBpbm5lckRlZXBFcXVhbCh2YWwxLCB2YWwyLCBrTG9vc2UpO1xufVxuZnVuY3Rpb24gaXNEZWVwU3RyaWN0RXF1YWwodmFsMSwgdmFsMikge1xuICByZXR1cm4gaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwga1N0cmljdCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWVwRXF1YWw6IGlzRGVlcEVxdWFsLFxuICBpc0RlZXBTdHJpY3RFcXVhbDogaXNEZWVwU3RyaWN0RXF1YWxcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBzZXRGdW5jdGlvbkxlbmd0aCA9IHJlcXVpcmUoJ3NldC1mdW5jdGlvbi1sZW5ndGgnKTtcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRtYXggPSBHZXRJbnRyaW5zaWMoJyVNYXRoLm1heCUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ2luYWxGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRyZXR1cm4gc2V0RnVuY3Rpb25MZW5ndGgoXG5cdFx0ZnVuYyxcblx0XHQxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpLFxuXHRcdHRydWVcblx0KTtcbn07XG5cbnZhciBhcHBseUJpbmQgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbn07XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0JGRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnYXBwbHknLCB7IHZhbHVlOiBhcHBseUJpbmQgfSk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgJFN5bnRheEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3N5bnRheCcpO1xudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgZ29wZCA9IHJlcXVpcmUoJ2dvcGQnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lRGF0YVByb3BlcnR5KFxuXHRvYmosXG5cdHByb3BlcnR5LFxuXHR2YWx1ZVxuKSB7XG5cdGlmICghb2JqIHx8ICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgb2JqYCBtdXN0IGJlIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uYCcpO1xuXHR9XG5cdGlmICh0eXBlb2YgcHJvcGVydHkgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ3N5bWJvbCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYHByb3BlcnR5YCBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgc3ltYm9sYCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzNdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25FbnVtZXJhYmxlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuIG9yIG51bGwnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgdHlwZW9mIGFyZ3VtZW50c1s0XSAhPT0gJ2Jvb2xlYW4nICYmIGFyZ3VtZW50c1s0XSAhPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbm9uV3JpdGFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNSAmJiB0eXBlb2YgYXJndW1lbnRzWzVdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzVdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25Db25maWd1cmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNiAmJiB0eXBlb2YgYXJndW1lbnRzWzZdICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGxvb3NlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHR2YXIgbm9uRW51bWVyYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblx0dmFyIG5vbldyaXRhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiBudWxsO1xuXHR2YXIgbm9uQ29uZmlndXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiBudWxsO1xuXHR2YXIgbG9vc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gNiA/IGFyZ3VtZW50c1s2XSA6IGZhbHNlO1xuXG5cdC8qIEB0eXBlIHtmYWxzZSB8IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPHVua25vd24+fSAqL1xuXHR2YXIgZGVzYyA9ICEhZ29wZCAmJiBnb3BkKG9iaiwgcHJvcGVydHkpO1xuXG5cdGlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0XHQkZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wZXJ0eSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiBub25Db25maWd1cmFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2MuY29uZmlndXJhYmxlIDogIW5vbkNvbmZpZ3VyYWJsZSxcblx0XHRcdGVudW1lcmFibGU6IG5vbkVudW1lcmFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2MuZW51bWVyYWJsZSA6ICFub25FbnVtZXJhYmxlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IG5vbldyaXRhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLndyaXRhYmxlIDogIW5vbldyaXRhYmxlXG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAobG9vc2UgfHwgKCFub25FbnVtZXJhYmxlICYmICFub25Xcml0YWJsZSAmJiAhbm9uQ29uZmlndXJhYmxlKSkge1xuXHRcdC8vIG11c3QgZmFsbCBiYWNrIHRvIFtbU2V0XV0sIGFuZCB3YXMgbm90IGV4cGxpY2l0bHkgYXNrZWQgdG8gbWFrZSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlLCBvciBub24tY29uZmlndXJhYmxlXG5cdFx0b2JqW3Byb3BlcnR5XSA9IHZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGRlZmluaW5nIGEgcHJvcGVydHkgYXMgbm9uLWNvbmZpZ3VyYWJsZSwgbm9uLXdyaXRhYmxlLCBvciBub24tZW51bWVyYWJsZS4nKTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woJ2ZvbycpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIGRlZmluZURhdGFQcm9wZXJ0eSA9IHJlcXVpcmUoJ2RlZmluZS1kYXRhLXByb3BlcnR5Jyk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IHJlcXVpcmUoJ2hhcy1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpKCk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBwcmVkaWNhdGUpIHtcblx0aWYgKG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0aWYgKHByZWRpY2F0ZSA9PT0gdHJ1ZSkge1xuXHRcdFx0aWYgKG9iamVjdFtuYW1lXSA9PT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoIWlzRnVuY3Rpb24ocHJlZGljYXRlKSB8fCAhcHJlZGljYXRlKCkpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdGRlZmluZURhdGFQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHZhbHVlLCB0cnVlKTtcblx0fSBlbHNlIHtcblx0XHRkZWZpbmVEYXRhUHJvcGVydHkob2JqZWN0LCBuYW1lLCB2YWx1ZSk7XG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gY29uY2F0LmNhbGwocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcHNbaV0sIG1hcFtwcm9wc1tpXV0sIHByZWRpY2F0ZXNbcHJvcHNbaV1dKTtcblx0fVxufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpIHx8IGZhbHNlO1xuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRkZWZpbmVQcm9wZXJ0eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZXZhbCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFdmFsRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yYW5nZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBSYW5nZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yZWYnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmVmZXJlbmNlRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3N5bnRheCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBTeW50YXhFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBUeXBlRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3VyaScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBVUklFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZvckVhY2hBcnJheSA9IGZ1bmN0aW9uIGZvckVhY2hBcnJheShhcnJheSwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCBpKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hTdHJpbmcgPSBmdW5jdGlvbiBmb3JFYWNoU3RyaW5nKHN0cmluZywgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAvLyBubyBzdWNoIHRoaW5nIGFzIGEgc3BhcnNlIHN0cmluZy5cbiAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hPYmplY3QgPSBmdW5jdGlvbiBmb3JFYWNoT2JqZWN0KG9iamVjdCwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgayBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIG9iamVjdFtrXSwgaywgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChsaXN0LCBpdGVyYXRvciwgdGhpc0FyZykge1xuICAgIGlmICghaXNDYWxsYWJsZShpdGVyYXRvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY2VpdmVyO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgcmVjZWl2ZXIgPSB0aGlzQXJnO1xuICAgIH1cblxuICAgIGlmICh0b1N0ci5jYWxsKGxpc3QpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgIGZvckVhY2hBcnJheShsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZvckVhY2hTdHJpbmcobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3JFYWNoT2JqZWN0KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG52YXIgY29uY2F0dHkgPSBmdW5jdGlvbiBjb25jYXR0eShhLCBiKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycltpXSA9IGFbaV07XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhcnJbaiArIGEubGVuZ3RoXSA9IGJbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBzbGljeSA9IGZ1bmN0aW9uIHNsaWN5KGFyckxpa2UsIG9mZnNldCkge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gb2Zmc2V0IHx8IDAsIGogPSAwOyBpIDwgYXJyTGlrZS5sZW5ndGg7IGkgKz0gMSwgaiArPSAxKSB7XG4gICAgICAgIGFycltqXSA9IGFyckxpa2VbaV07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgam9pbnkgPSBmdW5jdGlvbiAoYXJyLCBqb2luZXIpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGFycltpXTtcbiAgICAgICAgaWYgKGkgKyAxIDwgYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RyICs9IGpvaW5lcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5hcHBseSh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWN5KGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgKTtcblxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBtYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJnc1tpXSA9ICckJyArIGk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGpvaW55KGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMnKTtcbnZhciAkRXZhbEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL2V2YWwnKTtcbnZhciAkUmFuZ2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yYW5nZScpO1xudmFyICRSZWZlcmVuY2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yZWYnKTtcbnZhciAkU3ludGF4RXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvc3ludGF4Jyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJFVSSUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3VyaScpO1xuXG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgaGFzUHJvdG8gPSByZXF1aXJlKCdoYXMtcHJvdG8nKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgKFxuXHRoYXNQcm90b1xuXHRcdD8gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblx0XHQ6IG51bGxcbik7XG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQmlnSW50NjRBcnJheSUnOiB0eXBlb2YgQmlnSW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQ2NEFycmF5LFxuXHQnJUJpZ1VpbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdVaW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdVaW50NjRBcnJheSxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6ICRFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiAkRXZhbEVycm9yLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmluYWxpemF0aW9uUmVnaXN0cnklJzogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHQnJUZ1bmN0aW9uJSc6ICRGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6ICRSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6ICRSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCclUmVnRXhwJSc6IFJlZ0V4cCxcblx0JyVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCclU2V0SXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogJFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG5pZiAoZ2V0UHJvdG8pIHtcblx0dHJ5IHtcblx0XHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2hhZG93cmVhbG0vcHVsbC8zODQjaXNzdWVjb21tZW50LTEzNjQyNjQyMjlcblx0XHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0XHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcblx0fVxufVxuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuICYmIGdldFByb3RvKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXNvd24nKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgZmlyc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAwLCAxKTtcblx0dmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG5cdGlmIChmaXJzdCA9PT0gJyUnICYmIGxhc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWAnKTtcblx0fSBlbHNlIGlmIChsYXN0ID09PSAnJScgJiYgZmlyc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgb3BlbmluZyBgJWAnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IG51bWJlciB8fCBtYXRjaDtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljTmFtZSA9IG5hbWU7XG5cdHZhciBhbGlhcztcblx0aWYgKGhhc093bihMRUdBQ1lfQUxJQVNFUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHRhbGlhcyA9IExFR0FDWV9BTElBU0VTW2ludHJpbnNpY05hbWVdO1xuXHRcdGludHJpbnNpY05hbWUgPSAnJScgKyBhbGlhc1swXSArICclJztcblx0fVxuXG5cdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHR2YXIgdmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY05hbWVdO1xuXHRcdGlmICh2YWx1ZSA9PT0gbmVlZHNFdmFsKSB7XG5cdFx0XHR2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFsaWFzOiBhbGlhcyxcblx0XHRcdG5hbWU6IGludHJpbnNpY05hbWUsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG5cblx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHRpZiAoJGV4ZWMoL14lP1teJV0qJT8kLywgbmFtZSkgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdgJWAgbWF5IG5vdCBiZSBwcmVzZW50IGFueXdoZXJlIGJ1dCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGludHJpbnNpYyBuYW1lJyk7XG5cdH1cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJywgdHJ1ZSk7XG5cbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCdlcy1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSBmdW5jdGlvbiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkge1xuXHRyZXR1cm4gISEkZGVmaW5lUHJvcGVydHk7XG59O1xuXG5oYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnID0gZnVuY3Rpb24gaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcoKSB7XG5cdC8vIG5vZGUgdjAuNiBoYXMgYSBidWcgd2hlcmUgYXJyYXkgbGVuZ3RocyBjYW4gYmUgU2V0IGJ1dCBub3QgRGVmaW5lZFxuXHRpZiAoISRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRkZWZpbmVQcm9wZXJ0eShbXSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDEgfSkubGVuZ3RoICE9PSAxO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSW4gRmlyZWZveCA0LTIyLCBkZWZpbmluZyBsZW5ndGggb24gYW4gYXJyYXkgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVzdCA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHRmb286IHt9XG59O1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzUHJvdG8oKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3I6IFRTIGVycm9ycyBvbiBhbiBpbmhlcml0ZWQgcHJvcGVydHkgZm9yIHNvbWUgcmVhc29uXG5cdHJldHVybiB7IF9fcHJvdG9fXzogdGVzdCB9LmZvbyA9PT0gdGVzdC5mb29cblx0XHQmJiAhKHRlc3QgaW5zdGFuY2VvZiAkT2JqZWN0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNUb1N0cmluZ1RhZ1NoYW1zKCkge1xuXHRyZXR1cm4gaGFzU3ltYm9scygpICYmICEhU3ltYm9sLnRvU3RyaW5nVGFnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcbnZhciAkaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoY2FsbCwgJGhhc093bik7XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG5cbnZhciBpc1N0YW5kYXJkQXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGhhc1RvU3RyaW5nVGFnICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiAkdG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbnZhciBpc0xlZ2FjeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChpc1N0YW5kYXJkQXJndW1lbnRzKHZhbHVlKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlKSAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdCR0b1N0cmluZyh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gaXNTdGFuZGFyZEFyZ3VtZW50cyhhcmd1bWVudHMpO1xufSgpKTtcblxuaXNTdGFuZGFyZEFyZ3VtZW50cy5pc0xlZ2FjeUFyZ3VtZW50cyA9IGlzTGVnYWN5QXJndW1lbnRzOyAvLyBmb3IgdGVzdHNcblxubW9kdWxlLmV4cG9ydHMgPSBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID8gaXNTdGFuZGFyZEFyZ3VtZW50cyA6IGlzTGVnYWN5QXJndW1lbnRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWZsZWN0QXBwbHkgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdCAhPT0gbnVsbCAmJiBSZWZsZWN0LmFwcGx5O1xudmFyIGJhZEFycmF5TGlrZTtcbnZhciBpc0NhbGxhYmxlTWFya2VyO1xuaWYgKHR5cGVvZiByZWZsZWN0QXBwbHkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuXHR0cnkge1xuXHRcdGJhZEFycmF5TGlrZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2xlbmd0aCcsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBpc0NhbGxhYmxlTWFya2VyO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlzQ2FsbGFibGVNYXJrZXIgPSB7fTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuXHRcdHJlZmxlY3RBcHBseShmdW5jdGlvbiAoKSB7IHRocm93IDQyOyB9LCBudWxsLCBiYWRBcnJheUxpa2UpO1xuXHR9IGNhdGNoIChfKSB7XG5cdFx0aWYgKF8gIT09IGlzQ2FsbGFibGVNYXJrZXIpIHtcblx0XHRcdHJlZmxlY3RBcHBseSA9IG51bGw7XG5cdFx0fVxuXHR9XG59IGVsc2Uge1xuXHRyZWZsZWN0QXBwbHkgPSBudWxsO1xufVxuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgb2JqZWN0Q2xhc3MgPSAnW29iamVjdCBPYmplY3RdJztcbnZhciBmbkNsYXNzID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbnZhciBnZW5DbGFzcyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG52YXIgZGRhQ2xhc3MgPSAnW29iamVjdCBIVE1MQWxsQ29sbGVjdGlvbl0nOyAvLyBJRSAxMVxudmFyIGRkYUNsYXNzMiA9ICdbb2JqZWN0IEhUTUwgZG9jdW1lbnQuYWxsIGNsYXNzXSc7XG52YXIgZGRhQ2xhc3MzID0gJ1tvYmplY3QgSFRNTENvbGxlY3Rpb25dJzsgLy8gSUUgOS0xMFxudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZzsgLy8gYmV0dGVyOiB1c2UgYGhhcy10b3N0cmluZ3RhZ2BcblxudmFyIGlzSUU2OCA9ICEoMCBpbiBbLF0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNwYXJzZS1hcnJheXMsIGNvbW1hLXNwYWNpbmdcblxudmFyIGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCgpIHsgcmV0dXJuIGZhbHNlOyB9O1xuaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ29iamVjdCcpIHtcblx0Ly8gRmlyZWZveCAzIGNhbm9uaWNhbGl6ZXMgRERBIHRvIHVuZGVmaW5lZCB3aGVuIGl0J3Mgbm90IGFjY2Vzc2VkIGRpcmVjdGx5XG5cdHZhciBhbGwgPSBkb2N1bWVudC5hbGw7XG5cdGlmICh0b1N0ci5jYWxsKGFsbCkgPT09IHRvU3RyLmNhbGwoZG9jdW1lbnQuYWxsKSkge1xuXHRcdGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCh2YWx1ZSkge1xuXHRcdFx0LyogZ2xvYmFscyBkb2N1bWVudDogZmFsc2UgKi9cblx0XHRcdC8vIGluIElFIDYtOCwgdHlwZW9mIGRvY3VtZW50LmFsbCBpcyBcIm9iamVjdFwiIGFuZCBpdCdzIHRydXRoeVxuXHRcdFx0aWYgKChpc0lFNjggfHwgIXZhbHVlKSAmJiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0c3RyID09PSBkZGFDbGFzc1xuXHRcdFx0XHRcdFx0fHwgc3RyID09PSBkZGFDbGFzczJcblx0XHRcdFx0XHRcdHx8IHN0ciA9PT0gZGRhQ2xhc3MzIC8vIG9wZXJhIDEyLjE2XG5cdFx0XHRcdFx0XHR8fCBzdHIgPT09IG9iamVjdENsYXNzIC8vIElFIDYtOFxuXHRcdFx0XHRcdCkgJiYgdmFsdWUoJycpID09IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmxlY3RBcHBseVxuXHQ/IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJlZmxlY3RBcHBseSh2YWx1ZSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoZSAhPT0gaXNDYWxsYWJsZU1hcmtlcikgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR9XG5cdFx0cmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpICYmIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTtcblx0fVxuXHQ6IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKGhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7IH1cblx0XHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRpZiAoc3RyQ2xhc3MgIT09IGZuQ2xhc3MgJiYgc3RyQ2xhc3MgIT09IGdlbkNsYXNzICYmICEoL15cXFtvYmplY3QgSFRNTC8pLnRlc3Qoc3RyQ2xhc3MpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG5cdH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBpc0ZuUmVnZXggPSAvXlxccyooPzpmdW5jdGlvbik/XFwqLztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgZ2V0R2VuZXJhdG9yRnVuYyA9IGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gZnVuY3Rpb24qKCkge30nKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdH1cbn07XG52YXIgR2VuZXJhdG9yRnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNHZW5lcmF0b3JGdW5jdGlvbihmbikge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChpc0ZuUmVnZXgudGVzdChmblRvU3RyLmNhbGwoZm4pKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHR2YXIgc3RyID0gdG9TdHIuY2FsbChmbik7XG5cdFx0cmV0dXJuIHN0ciA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblx0fVxuXHRpZiAoIWdldFByb3RvKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICh0eXBlb2YgR2VuZXJhdG9yRnVuY3Rpb24gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIGdlbmVyYXRvckZ1bmMgPSBnZXRHZW5lcmF0b3JGdW5jKCk7XG5cdFx0R2VuZXJhdG9yRnVuY3Rpb24gPSBnZW5lcmF0b3JGdW5jID8gZ2V0UHJvdG8oZ2VuZXJhdG9yRnVuYykgOiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gZ2V0UHJvdG8oZm4pID09PSBHZW5lcmF0b3JGdW5jdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIuaXNuYW4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgTnVtYmVyKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmIChOdW1iZXIuaXNOYU4gJiYgTnVtYmVyLmlzTmFOKE5hTikgJiYgIU51bWJlci5pc05hTignYScpKSB7XG5cdFx0cmV0dXJuIE51bWJlci5pc05hTjtcblx0fVxuXHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1OdW1iZXJJc05hTigpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE51bWJlciwgeyBpc05hTjogcG9seWZpbGwgfSwge1xuXHRcdGlzTmFOOiBmdW5jdGlvbiB0ZXN0SXNOYU4oKSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpY2hUeXBlZEFycmF5ID0gcmVxdWlyZSgnd2hpY2gtdHlwZWQtYXJyYXknKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNUeXBlZEFycmF5KHZhbHVlKSB7XG5cdHJldHVybiAhIXdoaWNoVHlwZWRBcnJheSh2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbnVtYmVySXNOYU4gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXMoYSwgYikge1xuXHRpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG5cdFx0cmV0dXJuIDEgLyBhID09PSAxIC8gYjtcblx0fVxuXHRpZiAoYSA9PT0gYikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmIChudW1iZXJJc05hTihhKSAmJiBudW1iZXJJc05hTihiKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgT2JqZWN0KTtcblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5pcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5pcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU9iamVjdElzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IGlzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXM6IGZ1bmN0aW9uIHRlc3RPYmplY3RJcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QuaXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzU2hpbTtcbmlmICghT2JqZWN0LmtleXMpIHtcblx0Ly8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblx0dmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cdHZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZ2xvYmFsLXJlcXVpcmVcblx0dmFyIGlzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cdHZhciBoYXNEb250RW51bUJ1ZyA9ICFpc0VudW1lcmFibGUuY2FsbCh7IHRvU3RyaW5nOiBudWxsIH0sICd0b1N0cmluZycpO1xuXHR2YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtZXJhYmxlLmNhbGwoZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcblx0dmFyIGRvbnRFbnVtcyA9IFtcblx0XHQndG9TdHJpbmcnLFxuXHRcdCd0b0xvY2FsZVN0cmluZycsXG5cdFx0J3ZhbHVlT2YnLFxuXHRcdCdoYXNPd25Qcm9wZXJ0eScsXG5cdFx0J2lzUHJvdG90eXBlT2YnLFxuXHRcdCdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG5cdFx0J2NvbnN0cnVjdG9yJ1xuXHRdO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUgPSBmdW5jdGlvbiAobykge1xuXHRcdHZhciBjdG9yID0gby5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcblx0fTtcblx0dmFyIGV4Y2x1ZGVkS2V5cyA9IHtcblx0XHQkYXBwbGljYXRpb25DYWNoZTogdHJ1ZSxcblx0XHQkY29uc29sZTogdHJ1ZSxcblx0XHQkZXh0ZXJuYWw6IHRydWUsXG5cdFx0JGZyYW1lOiB0cnVlLFxuXHRcdCRmcmFtZUVsZW1lbnQ6IHRydWUsXG5cdFx0JGZyYW1lczogdHJ1ZSxcblx0XHQkaW5uZXJIZWlnaHQ6IHRydWUsXG5cdFx0JGlubmVyV2lkdGg6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmNoYW5nZTogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuZXJyb3I6IHRydWUsXG5cdFx0JG91dGVySGVpZ2h0OiB0cnVlLFxuXHRcdCRvdXRlcldpZHRoOiB0cnVlLFxuXHRcdCRwYWdlWE9mZnNldDogdHJ1ZSxcblx0XHQkcGFnZVlPZmZzZXQ6IHRydWUsXG5cdFx0JHBhcmVudDogdHJ1ZSxcblx0XHQkc2Nyb2xsTGVmdDogdHJ1ZSxcblx0XHQkc2Nyb2xsVG9wOiB0cnVlLFxuXHRcdCRzY3JvbGxYOiB0cnVlLFxuXHRcdCRzY3JvbGxZOiB0cnVlLFxuXHRcdCRzZWxmOiB0cnVlLFxuXHRcdCR3ZWJraXRJbmRleGVkREI6IHRydWUsXG5cdFx0JHdlYmtpdFN0b3JhZ2VJbmZvOiB0cnVlLFxuXHRcdCR3aW5kb3c6IHRydWVcblx0fTtcblx0dmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRmb3IgKHZhciBrIGluIHdpbmRvdykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYgKCFleGNsdWRlZEtleXNbJyQnICsga10gJiYgaGFzLmNhbGwod2luZG93LCBrKSAmJiB3aW5kb3dba10gIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1trXSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUod2luZG93W2tdKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSgpKTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0LyogZ2xvYmFsIHdpbmRvdyAqL1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnKSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdFx0dmFyIGlzT2JqZWN0ID0gb2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnO1xuXHRcdHZhciBpc0Z1bmN0aW9uID0gdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHRcdHZhciBpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpO1xuXHRcdHZhciBpc1N0cmluZyA9IGlzT2JqZWN0ICYmIHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdFx0dmFyIHRoZUtleXMgPSBbXTtcblxuXHRcdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gYSBub24tb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXHRcdGlmIChpc1N0cmluZyAmJiBvYmplY3QubGVuZ3RoID4gMCAmJiAhaGFzLmNhbGwob2JqZWN0LCAwKSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGlzQXJndW1lbnRzICYmIG9iamVjdC5sZW5ndGggPiAwKSB7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG9iamVjdC5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGopKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhuYW1lKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaGFzRG9udEVudW1CdWcpIHtcblx0XHRcdHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcblxuXHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBkb250RW51bXMubGVuZ3RoOyArK2spIHtcblx0XHRcdFx0aWYgKCEoc2tpcENvbnN0cnVjdG9yICYmIGRvbnRFbnVtc1trXSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bXNba10pKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtc1trXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRoZUtleXM7XG5cdH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpO1xuXG52YXIgb3JpZ0tleXMgPSBPYmplY3Qua2V5cztcbnZhciBrZXlzU2hpbSA9IG9yaWdLZXlzID8gZnVuY3Rpb24ga2V5cyhvKSB7IHJldHVybiBvcmlnS2V5cyhvKTsgfSA6IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIG9yaWdpbmFsS2V5cyA9IE9iamVjdC5rZXlzO1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmIChPYmplY3Qua2V5cykge1xuXHRcdHZhciBrZXlzV29ya3NXaXRoQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0XHRcdC8vIFNhZmFyaSA1LjAgYnVnXG5cdFx0XHR2YXIgYXJncyA9IE9iamVjdC5rZXlzKGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gYXJncyAmJiBhcmdzLmxlbmd0aCA9PT0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHR9KDEsIDIpKTtcblx0XHRpZiAoIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMpIHtcblx0XHRcdE9iamVjdC5rZXlzID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcblx0XHRcdFx0aWYgKGlzQXJncyhvYmplY3QpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhzbGljZS5jYWxsKG9iamVjdCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMob2JqZWN0KTtcblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdE9iamVjdC5rZXlzID0ga2V5c1NoaW07XG5cdH1cblx0cmV0dXJuIE9iamVjdC5rZXlzIHx8IGtleXNTaGltO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczYtc2hpbVxudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpKCk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIHRvT2JqZWN0ID0gT2JqZWN0O1xudmFyICRwdXNoID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucHVzaCcpO1xudmFyICRwcm9wSXNFbnVtZXJhYmxlID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlJyk7XG52YXIgb3JpZ2luYWxHZXRTeW1ib2xzID0gaGFzU3ltYm9scyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgOiBudWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlMSkge1xuXHRpZiAodGFyZ2V0ID09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7IH1cblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTsgLy8gc3RlcCAxXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIHRvOyAvLyBzdGVwIDJcblx0fVxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7ICsrcykge1xuXHRcdHZhciBmcm9tID0gdG9PYmplY3QoYXJndW1lbnRzW3NdKTsgLy8gc3RlcCAzLmEuaVxuXG5cdFx0Ly8gc3RlcCAzLmEuaWk6XG5cdFx0dmFyIGtleXMgPSBvYmplY3RLZXlzKGZyb20pO1xuXHRcdHZhciBnZXRTeW1ib2xzID0gaGFzU3ltYm9scyAmJiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyB8fCBvcmlnaW5hbEdldFN5bWJvbHMpO1xuXHRcdGlmIChnZXRTeW1ib2xzKSB7XG5cdFx0XHR2YXIgc3ltcyA9IGdldFN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHN5bXMubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dmFyIGtleSA9IHN5bXNbal07XG5cdFx0XHRcdGlmICgkcHJvcElzRW51bWVyYWJsZShmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdFx0JHB1c2goa2V5cywga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIHN0ZXAgMy5hLmlpaTpcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdHZhciBuZXh0S2V5ID0ga2V5c1tpXTtcblx0XHRcdGlmICgkcHJvcElzRW51bWVyYWJsZShmcm9tLCBuZXh0S2V5KSkgeyAvLyBzdGVwIDMuYS5paWkuMlxuXHRcdFx0XHR2YXIgcHJvcFZhbHVlID0gZnJvbVtuZXh0S2V5XTsgLy8gc3RlcCAzLmEuaWlpLjIuYVxuXHRcdFx0XHR0b1tuZXh0S2V5XSA9IHByb3BWYWx1ZTsgLy8gc3RlcCAzLmEuaWlpLjIuYlxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bzsgLy8gc3RlcCA0XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBsYWNrc1Byb3BlckVudW1lcmF0aW9uT3JkZXIgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHQvKlxuXHQgKiB2OCwgc3BlY2lmaWNhbGx5IGluIG5vZGUgNC54LCBoYXMgYSBidWcgd2l0aCBpbmNvcnJlY3QgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXJcblx0ICogbm90ZTogdGhpcyBkb2VzIG5vdCBkZXRlY3QgdGhlIGJ1ZyB1bmxlc3MgdGhlcmUncyAyMCBjaGFyYWN0ZXJzXG5cdCAqL1xuXHR2YXIgc3RyID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jztcblx0dmFyIGxldHRlcnMgPSBzdHIuc3BsaXQoJycpO1xuXHR2YXIgbWFwID0ge307XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGV0dGVycy5sZW5ndGg7ICsraSkge1xuXHRcdG1hcFtsZXR0ZXJzW2ldXSA9IGxldHRlcnNbaV07XG5cdH1cblx0dmFyIG9iaiA9IE9iamVjdC5hc3NpZ24oe30sIG1hcCk7XG5cdHZhciBhY3R1YWwgPSAnJztcblx0Zm9yICh2YXIgayBpbiBvYmopIHtcblx0XHRhY3R1YWwgKz0gaztcblx0fVxuXHRyZXR1cm4gc3RyICE9PSBhY3R1YWw7XG59O1xuXG52YXIgYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbiB8fCAhT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdC8qXG5cdCAqIEZpcmVmb3ggMzcgc3RpbGwgaGFzIFwicGVuZGluZyBleGNlcHRpb25cIiBsb2dpYyBpbiBpdHMgT2JqZWN0LmFzc2lnbiBpbXBsZW1lbnRhdGlvbixcblx0ICogd2hpY2ggaXMgNzIlIHNsb3dlciB0aGFuIG91ciBzaGltLCBhbmQgRmlyZWZveCA0MCdzIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbi5cblx0ICovXG5cdHZhciB0aHJvd2VyID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHsgMTogMiB9KTtcblx0dHJ5IHtcblx0XHRPYmplY3QuYXNzaWduKHRocm93ZXIsICd4eScpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIHRocm93ZXJbMV0gPT09ICd5Jztcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0aWYgKGxhY2tzUHJvcGVyRW51bWVyYXRpb25PcmRlcigpKSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cdGlmIChhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucygpKSB7XG5cdFx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xuXHR9XG5cdHJldHVybiBPYmplY3QuYXNzaWduO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gW1xuXHQnRmxvYXQzMkFycmF5Jyxcblx0J0Zsb2F0NjRBcnJheScsXG5cdCdJbnQ4QXJyYXknLFxuXHQnSW50MTZBcnJheScsXG5cdCdJbnQzMkFycmF5Jyxcblx0J1VpbnQ4QXJyYXknLFxuXHQnVWludDhDbGFtcGVkQXJyYXknLFxuXHQnVWludDE2QXJyYXknLFxuXHQnVWludDMyQXJyYXknLFxuXHQnQmlnSW50NjRBcnJheScsXG5cdCdCaWdVaW50NjRBcnJheSdcbl07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1kYXRhLXByb3BlcnR5Jyk7XG52YXIgaGFzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdoYXMtcHJvcGVydHktZGVzY3JpcHRvcnMnKSgpO1xudmFyIGdPUEQgPSByZXF1aXJlKCdnb3BkJyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkZmxvb3IgPSBHZXRJbnRyaW5zaWMoJyVNYXRoLmZsb29yJScpO1xuXG4vKiogQHR5cGVkZWYgeyguLi5hcmdzOiB1bmtub3duW10pID0+IHVua25vd259IEZ1bmMgKi9cblxuLyoqIEB0eXBlIHs8VCBleHRlbmRzIEZ1bmMgPSBGdW5jPihmbjogVCwgbGVuZ3RoOiBudW1iZXIsIGxvb3NlPzogYm9vbGVhbikgPT4gVH0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0RnVuY3Rpb25MZW5ndGgoZm4sIGxlbmd0aCkge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BmbmAgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0fVxuXHRpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicgfHwgbGVuZ3RoIDwgMCB8fCBsZW5ndGggPiAweEZGRkZGRkZGIHx8ICRmbG9vcihsZW5ndGgpICE9PSBsZW5ndGgpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGxlbmd0aGAgbXVzdCBiZSBhIHBvc2l0aXZlIDMyLWJpdCBpbnRlZ2VyJyk7XG5cdH1cblxuXHR2YXIgbG9vc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiAhIWFyZ3VtZW50c1syXTtcblxuXHR2YXIgZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSA9IHRydWU7XG5cdHZhciBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgPSB0cnVlO1xuXHRpZiAoJ2xlbmd0aCcgaW4gZm4gJiYgZ09QRCkge1xuXHRcdHZhciBkZXNjID0gZ09QRChmbiwgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0ZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoZGVzYyAmJiAhZGVzYy53cml0YWJsZSkge1xuXHRcdFx0ZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgfHwgZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIHx8ICFsb29zZSkge1xuXHRcdGlmIChoYXNEZXNjcmlwdG9ycykge1xuXHRcdFx0ZGVmaW5lKC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqLyAoZm4pLCAnbGVuZ3RoJywgbGVuZ3RoLCB0cnVlLCB0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVmaW5lKC8qKiBAdHlwZSB7UGFyYW1ldGVyczxkZWZpbmU+WzBdfSAqLyAoZm4pLCAnbGVuZ3RoJywgbGVuZ3RoKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZuO1xufTtcbiIsIi8qIFZlcnkgSW5pdGlhbCByZWZhY3RvciB0byBKUyB1c2luZyBDaGF0R1BUNFxyXG5OT1RFOiBBbG1vc3QgYWxsIG9mIHRoaXMgY29kZSBoYXMgaGFkIHRvIGJlIHJld3JpdHRlbiBzaW5jZSB0aGVuLlxyXG5BbmQgc3RhcnRpbmcgdG8gY29udmVydCB0byB0c1xyXG4gKi9cclxuXHJcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHtEb3dubG9hZHMsIHJ1bnRpbWV9IGZyb20gJ3dlYmV4dGVuc2lvbi1wb2x5ZmlsbCdcclxuaW1wb3J0IHtcclxuICAgIERpY3QsXHJcbiAgICBJQ2FudmFzRGF0YSwgSUNvdXJzZURhdGEsXHJcbiAgICBJTW9kdWxlRGF0YSxcclxuICAgIElNb2R1bGVJdGVtRGF0YSxcclxuICAgIElQYWdlRGF0YSxcclxuICAgIElUZXJtRGF0YSxcclxuICAgIExvb2tVcFRhYmxlLFxyXG4gICAgTW9kdWxlSXRlbVR5cGVcclxufSBmcm9tIFwiLi9jYW52YXNEYXRhRGVmc1wiO1xyXG5pbXBvcnQgRG93bmxvYWRPcHRpb25zVHlwZSA9IERvd25sb2Fkcy5Eb3dubG9hZE9wdGlvbnNUeXBlO1xyXG5cclxuLy9jb25zdCBIT01FVElMRV9XSURUSCA9IDUwMDtcclxuXHJcblxyXG5pbnRlcmZhY2UgSUNhbnZhc0NhbGxDb25maWcgZXh0ZW5kcyBEaWN0IHtcclxuICAgIGZldGNoSW5pdD86IFJlcXVlc3RJbml0LFxyXG4gICAgcXVlcnlQYXJhbXM/OiBEaWN0XHJcbn1cclxuXHJcbmludGVyZmFjZSBJVXBkYXRlQ2FsbGJhY2sge1xyXG4gICAgKGN1cnJlbnQ6IG51bWJlciwgdG90YWw6IG51bWJlcik6IFByb21pc2U8bnVtYmVyPlxyXG59XHJcblxyXG5cclxuY29uc3QgdHlwZV9sdXQ6IERpY3QgPSB7XHJcbiAgICAnQXNzaWdubWVudCc6ICdhc3NpZ25tZW50JyxcclxuICAgICdEaXNjdXNzaW9uJzogJ2Rpc2N1c3Npb25fdG9waWMnLFxyXG4gICAgJ1F1aXonOiAncXVpeicsXHJcbiAgICAnQXR0YWNobWVudCc6ICdhdHRhY2htZW50JyxcclxuICAgICdFeHRlcm5hbCBUb29sJzogJ2V4dGVybmFsX3Rvb2wnLFxyXG4gICAgJ0ZpbGUnOiAnZmlsZScsXHJcbiAgICAnUGFnZSc6ICd3aWtpX3BhZ2UnXHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkRmlsZShvcHRpb25zOiBEb3dubG9hZE9wdGlvbnNUeXBlKSB7XHJcbiAgICBhd2FpdCBydW50aW1lLnNlbmRNZXNzYWdlKCdkb3dubG9hZEZpbGUnLCBvcHRpb25zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc2l6ZWRJbWFnZShpbWdTcmM6IHN0cmluZywgdGFyZ2V0V2lkdGg6IG51bWJlciwgdGFyZ2V0SGVpZ2h0OiBudWxsIHwgbnVtYmVyID0gbnVsbCk6IFByb21pc2U8SW1hZ2VEYXRhPiB7XHJcbiAgICBhc3NlcnQoZG9jdW1lbnQpO1xyXG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIGltYWdlLmxvYWRpbmcgPSAnZWFnZXInO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBsZXQgY2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGVkXCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhpbWFnZS5zcmMsIGltYWdlLmhlaWdodCwgaW1hZ2Uud2lkdGgpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgY29uc3QgdEN0eCA9IHRhcmdldENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgICAgICBpZiAoIXRDdHgpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRDdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdEN0eC5pbWFnZVNtb290aGluZ1F1YWxpdHkgPSBcImhpZ2hcIjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gaW1hZ2Uud2lkdGggLyBpbWFnZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHRhcmdldEhlaWdodCA9IHRhcmdldEhlaWdodCA/IHRhcmdldEhlaWdodCA6IHRhcmdldFdpZHRoIC8gYXNwZWN0UmF0aW87XHJcbiAgICAgICAgICAgIHRhcmdldENhbnZhcy53aWR0aCA9IHRhcmdldFdpZHRoO1xyXG4gICAgICAgICAgICB0YXJnZXRDYW52YXMuaGVpZ2h0ID0gdGFyZ2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICB0Q3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUodEN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRpbmdcIiwgaW1nU3JjKTtcclxuICAgICAgICBpbWFnZS5zcmMgPSBpbWdTcmM7XHJcbiAgICAgICAgaWYgKGltYWdlLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpbWFnZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybURhdGFpZnkoZGF0YTogRGljdCkge1xyXG4gICAgY29uc29sZS5sb2coJ2Zvcm0nLCBkYXRhKTtcclxuICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9yIChsZXQga2V5IGluIGRhdGEpIHtcclxuICAgICAgICBhZGRUb0Zvcm1EYXRhKGZvcm1EYXRhLCBrZXksIGRhdGFba2V5XSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRvY3VtZW50KSB7XHJcbiAgICAgICAgY29uc3QgZWw6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0W25hbWU9J2F1dGhlbnRpY2l0eV90b2tlbiddXCIpO1xyXG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2l0eVRva2VuID0gZWwgPyBlbC52YWx1ZSA6IG51bGw7XHJcbiAgICAgICAgaWYgKGF1dGhlbnRpY2l0eVRva2VuKSBmb3JtRGF0YS5hcHBlbmQoJ2F1dGhlbnRpY2l0eV90b2tlbicsIGF1dGhlbnRpY2l0eVRva2VuKTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGVudHJ5IG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVudHJ5WzBdLCBlbnRyeVsxXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZm9ybURhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZFRvRm9ybURhdGEoZm9ybURhdGE6IEZvcm1EYXRhLCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSB8IERpY3QgfCBbXSkge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiB2YWx1ZSkge1xyXG4gICAgICAgICAgICBhZGRUb0Zvcm1EYXRhKGZvcm1EYXRhLCBgJHtrZXl9W11gLCBpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBmb3IgKGxldCBpdGVtS2V5IGluIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1WYWx1ZSA9IHZhbHVlW2l0ZW1LZXldO1xyXG4gICAgICAgICAgICBhZGRUb0Zvcm1EYXRhKGZvcm1EYXRhLCBrZXkubGVuZ3RoID4gMCA/IGAke2tleX1bJHtpdGVtS2V5fV1gIDogaXRlbUtleSwgaXRlbVZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kdWxlV2Vla051bWJlcihtb2R1bGU6IERpY3QpIHtcclxuICAgIGNvbnN0IHJlZ2V4ID0gLyh3ZWVrfG1vZHVsZSkgKFxcZCspL2k7XHJcbiAgICBsZXQgbWF0Y2ggPSBtb2R1bGUubmFtZS5tYXRjaChyZWdleCk7XHJcbiAgICBsZXQgd2Vla051bWJlciA9ICFtYXRjaCA/IG51bGwgOiBOdW1iZXIobWF0Y2hbMV0pO1xyXG4gICAgaWYgKCF3ZWVrTnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgbW9kdWxlSXRlbSBvZiBtb2R1bGUuaXRlbXMpIHtcclxuICAgICAgICAgICAgaWYgKCFtb2R1bGVJdGVtLmhhc093blByb3BlcnR5KCd0aXRsZScpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSBtb2R1bGVJdGVtLnRpdGxlLm1hdGNoKHJlZ2V4KTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICB3ZWVrTnVtYmVyID0gbWF0Y2hbMl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd2Vla051bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRha2VzIGluIGEgbW9kdWxlIGl0ZW0gYW5kIHJldHVybnMgYW4gb2JqZWN0IHNwZWNpZnlpbmcgaXRzIHR5cGUgYW5kIGNvbnRlbnQgaWRcclxuICogQHBhcmFtIGl0ZW1cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJdGVtVHlwZUFuZElkKFxyXG4gICAgaXRlbTogSU1vZHVsZUl0ZW1EYXRhXHJcbik6IFByb21pc2U8eyB0eXBlOiBNb2R1bGVJdGVtVHlwZSwgaWQ6IG51bWJlciB9PiB7XHJcbiAgICBsZXQgaWQ7XHJcbiAgICBsZXQgdHlwZTtcclxuICAgIGFzc2VydCh0eXBlX2x1dC5oYXNPd25Qcm9wZXJ0eShpdGVtLnR5cGUpLCBcIlVuZXhwZWN0ZWQgdHlwZSBcIiArIGl0ZW0udHlwZSk7XHJcblxyXG4gICAgdHlwZSA9IHR5cGVfbHV0W2l0ZW0udHlwZV07XHJcbiAgICBpZiAodHlwZSA9PT0gXCJ3aWtpX3BhZ2VcIikge1xyXG4gICAgICAgIGFzc2VydChpdGVtLnVybCk7IC8vd2lraV9wYWdlIGl0ZW1zIGFsd2F5cyBoYXZlIGEgdXJsIHBhcmFtXHJcbiAgICAgICAgY29uc3QgcGFnZURhdGEgPSBhd2FpdCBmZXRjaEpzb24oaXRlbS51cmwpIGFzIElQYWdlRGF0YTtcclxuICAgICAgICBpZCA9IHBhZ2VEYXRhLnBhZ2VfaWQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlkID0gaXRlbS5jb250ZW50X2lkO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7dHlwZSwgaWR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gcXVlcnlQYXJhbXNcclxuICogQHJldHVybnMge1VSTFNlYXJjaFBhcmFtc30gVGhlIGNvcnJlY3RseSBmb3JtYXR0ZWQgcGFyYW1ldGVyc1xyXG4gKi9cclxuZnVuY3Rpb24gc2VhcmNoUGFyYW1zRnJvbU9iamVjdChxdWVyeVBhcmFtczogc3RyaW5nW11bXSB8IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pOiBVUkxTZWFyY2hQYXJhbXMge1xyXG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlQYXJhbXMpO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBnZXRBcGlQYWdlZERhdGEodXJsOiBzdHJpbmcsIGNvbmZpZzogSUNhbnZhc0NhbGxDb25maWcgfCBudWxsID0gbnVsbCk6IFByb21pc2U8SUNhbnZhc0RhdGFbXT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGdldFBhZ2VkRGF0YShgL2FwaS92MS8ke3VybH1gLCBjb25maWcpXHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHVybCBUaGUgZW50aXJlIHBhdGggb2YgdGhlIHVybFxyXG4gKiBAcGFyYW0gY29uZmlnIGEgY29uZmlndXJhdGlvbiBvYmplY3Qgb2YgdHlwZSBJQ2FudmFzQ2FsbENvbmZpZ1xyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxEaWN0W10+fVxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0UGFnZWREYXRhKFxyXG4gICAgdXJsOiBzdHJpbmcsIGNvbmZpZzogSUNhbnZhc0NhbGxDb25maWcgfCBudWxsID0gbnVsbCk6IFByb21pc2U8SUNhbnZhc0RhdGFbXT4ge1xyXG5cclxuICAgIGlmIChjb25maWc/LnF1ZXJ5UGFyYW1zKSB7XHJcbiAgICAgICAgdXJsICs9ICc/JyArIHNlYXJjaFBhcmFtc0Zyb21PYmplY3QoY29uZmlnLnF1ZXJ5UGFyYW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXJsLmluY2x1ZGVzKCd1bmRlZmluZWQnKSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHVybCk7XHJcbiAgICB9XHJcbiAgICAvKiBSZXR1cm5zIGEgbGlzdCBvZiBkYXRhIGZyb20gYSBHRVQgcmVxdWVzdCwgZ29pbmcgdGhyb3VnaCBtdWx0aXBsZSBwYWdlcyBvZiBkYXRhIHJlcXVlc3RzIGFzIG5lY2Vzc2FyeSAqL1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBjb25maWc/LmZldGNoSW5pdCk7XHJcbiAgICBsZXQgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICBsZXQgdmFsdWVzID0gQXJyYXkuZnJvbShPYmplY3QudmFsdWVzKGRhdGEpKTtcclxuICAgICAgICBpZiAodmFsdWVzKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSB2YWx1ZXMuZmluZCgoYSkgPT4gQXJyYXkuaXNBcnJheShhKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXNzZXJ0KEFycmF5LmlzQXJyYXkoZGF0YSkpO1xyXG5cclxuICAgIGxldCBuZXh0X3BhZ2VfbGluayA9IFwiIVwiO1xyXG4gICAgd2hpbGUgKG5leHRfcGFnZV9saW5rLmxlbmd0aCAhPT0gMCAmJlxyXG4gICAgcmVzcG9uc2UgJiZcclxuICAgIHJlc3BvbnNlLmhlYWRlcnMuaGFzKFwiTGlua1wiKSAmJiByZXNwb25zZS5vaykge1xyXG4gICAgICAgIGNvbnN0IGxpbmsgPSByZXNwb25zZS5oZWFkZXJzLmdldChcIkxpbmtcIik7XHJcbiAgICAgICAgYXNzZXJ0KGxpbmspO1xyXG4gICAgICAgIGNvbnN0IHBhZ2luYXRpb25MaW5rcyA9IGxpbmsuc3BsaXQoXCIsXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBuZXh0TGluayA9IHBhZ2luYXRpb25MaW5rcy5maW5kKChsaW5rKSA9PiBsaW5rLmluY2x1ZGVzKCduZXh0JykpO1xyXG4gICAgICAgIGlmIChuZXh0TGluaykge1xyXG4gICAgICAgICAgICBuZXh0X3BhZ2VfbGluayA9IG5leHRMaW5rLnNwbGl0KFwiO1wiKVswXS5zcGxpdChcIjxcIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xyXG4gICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGZldGNoKG5leHRfcGFnZV9saW5rLCBjb25maWc/LmZldGNoSW5pdCk7XHJcbiAgICAgICAgICAgIGxldCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzcG9uc2VEYXRhID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlcyA9IEFycmF5LmZyb20oT2JqZWN0LnZhbHVlcyhkYXRhKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VEYXRhID0gdmFsdWVzPy5maW5kKChhKSA9PiBBcnJheS5pc0FycmF5KGEpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGF0YSA9IGRhdGEuY29uY2F0KHJlc3BvbnNlRGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV4dF9wYWdlX2xpbmsgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hKc29uKFxyXG4gICAgdXJsOiBzdHJpbmcsIGNvbmZpZzogSUNhbnZhc0NhbGxDb25maWcgfCBudWxsID0gbnVsbCk6IFByb21pc2U8SUNhbnZhc0RhdGEgfCBJQ2FudmFzRGF0YVtdPiB7XHJcbiAgICBpZiAoY29uZmlnPy5xdWVyeVBhcmFtcykge1xyXG4gICAgICAgIHVybCArPSAnPycgKyBuZXcgVVJMU2VhcmNoUGFyYW1zKGNvbmZpZy5xdWVyeVBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICBjb25maWcgPz89IHt9O1xyXG4gICAgaWYgKCFkb2N1bWVudCkge1xyXG4gICAgICAgIGNvbmZpZy5mZXRjaEluaXQgPz89IHt9O1xyXG4gICAgICAgIGNvbmZpZy5mZXRjaEluaXQuaGVhZGVycyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBjb25maWcuZmV0Y2hJbml0KTtcclxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGZXRjaGVzIGEganNvbiBvYmplY3QgZnJvbSAvYXBpL3YxLyR7dXJsfVxyXG4gKiBAcGFyYW0gdXJsXHJcbiAqIEBwYXJhbSBjb25maWcgcXVlcnkgYW5kIGZldGNoIHBhcmFtc1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hBcGlKc29uKHVybDogc3RyaW5nLCBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnIHwgbnVsbCA9IG51bGwpIHtcclxuICAgIHVybCA9IGAvYXBpL3YxLyR7dXJsfWA7XHJcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2hKc29uKHVybCwgY29uZmlnKTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hPbmVBcGlKc29uKHVybDogc3RyaW5nLCBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnIHwgbnVsbCA9IG51bGwpIHtcclxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBmZXRjaEFwaUpzb24odXJsLCBjb25maWcpO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkgcmV0dXJuIHJlc3VsdFswXTtcclxuICAgIHJldHVybiA8SUNhbnZhc0RhdGE+cmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogIEEgYmFzZSBjbGFzcyBmb3Igb2JqZWN0cyB0aGF0IGludGVyYWN0IHdpdGggdGhlIENhbnZhcyBBUElcclxuICovXHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZUNhbnZhc09iamVjdCB7XHJcbiAgICBzdGF0aWMgaWRQcm9wZXJ0eSA9ICdpZCc7IC8vIFRoZSBmaWVsZCBuYW1lIG9mIHRoZSBpZCBvZiB0aGUgY2FudmFzIG9iamVjdCB0eXBlXHJcbiAgICBzdGF0aWMgbmFtZVByb3BlcnR5OiBzdHJpbmcgfCBudWxsID0gbnVsbDsgLy8gVGhlIGZpZWxkIG5hbWUgb2YgdGhlIHByaW1hcnkgbmFtZSBvZiB0aGUgY2FudmFzIG9iamVjdCB0eXBlXHJcbiAgICBzdGF0aWMgY29udGVudFVybFRlbXBsYXRlOiBzdHJpbmcgfCBudWxsID0gbnVsbDsgLy8gQSB0ZW1wbGF0ZWQgdXJsIHRvIGdldCBhIHNpbmdsZSBpdGVtXHJcbiAgICBzdGF0aWMgYWxsQ29udGVudFVybFRlbXBsYXRlOiBzdHJpbmcgfCBudWxsID0gbnVsbDsgLy8gQSB0ZW1wbGF0ZWQgdXJsIHRvIGdldCBhbGwgaXRlbXNcclxuICAgIHByb3RlY3RlZCBjYW52YXNEYXRhOiBJQ2FudmFzRGF0YTtcclxuICAgIHByb3RlY3RlZCBhY2NvdW50SWQ6IG51bGwgfCBudW1iZXIgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IElDYW52YXNEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXNEYXRhID0gZGF0YSB8fCB7fTsgLy8gQSBkaWN0IGhvbGRpbmcgdGhlIGRlY29kZWQganNvbiByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0IGluIENhbnZhc1xyXG4gICAgfVxyXG5cclxuICAgIGdldENsYXNzKCk6IHR5cGVvZiBCYXNlQ29udGVudEl0ZW0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBCYXNlQ29udGVudEl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuY2FudmFzRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXRlbShpdGVtOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXNEYXRhW2l0ZW1dIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG15Q2xhc3MoKSB7XHJcbiAgICAgICAgcmV0dXJuICg8dHlwZW9mIEJhc2VDb250ZW50SXRlbT50aGlzLmNvbnN0cnVjdG9yKVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lS2V5KCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLm15Q2xhc3MubmFtZVByb3BlcnR5KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5teUNsYXNzLm5hbWVQcm9wZXJ0eTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0IGNvbnRlbnRVcmxQYXRoKCk6IG51bGwgfCBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gPHR5cGVvZiBCYXNlQ2FudmFzT2JqZWN0PnRoaXMuY29uc3RydWN0b3I7XHJcblxyXG4gICAgICAgIGFzc2VydCh0eXBlb2YgdGhpcy5hY2NvdW50SWQgPT09ICdudW1iZXInKTtcclxuICAgICAgICBhc3NlcnQodHlwZW9mIGNvbnN0cnVjdG9yLmNvbnRlbnRVcmxUZW1wbGF0ZSA9PT0gJ3N0cmluZycpO1xyXG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvci5jb250ZW50VXJsVGVtcGxhdGVcclxuICAgICAgICAgICAgLnJlcGxhY2UoJ3tjb250ZW50X2lkfScsIHRoaXMuaWQudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgLnJlcGxhY2UoJ3thY2NvdW50X2lkfScsIHRoaXMuYWNjb3VudElkLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBodG1sQ29udGVudFVybCgpIHtcclxuICAgICAgICByZXR1cm4gYC8ke3RoaXMuY29udGVudFVybFBhdGh9YDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmF3RGF0YSgpIHtcclxuICAgICAgICBjb25zdCBvdXQ6IElDYW52YXNEYXRhID0ge1xyXG4gICAgICAgICAgICBpZDogTmFOLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuY2FudmFzRGF0YSkge1xyXG4gICAgICAgICAgICBvdXRba2V5XSA9IHRoaXMuY2FudmFzRGF0YVtrZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhc0RhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGdldERhdGFCeUlkKGNvbnRlbnRJZDogbnVtYmVyLCBjb3Vyc2U6IENvdXJzZSB8IG51bGwgPSBudWxsLCBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnIHwgbnVsbCA9IG51bGwpOiBQcm9taXNlPElDYW52YXNEYXRhPiB7XHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsUGF0aEZyb21JZHMoY29udGVudElkLCBjb3Vyc2UgPyBjb3Vyc2UuaWQgOiBudWxsKTtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoQXBpSnNvbih1cmwsIGNvbmZpZyk7XHJcbiAgICAgICAgYXNzZXJ0KCFBcnJheS5pc0FycmF5KHJlc3BvbnNlKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRCeUlkKGNvbnRlbnRJZDogbnVtYmVyLCBjb3Vyc2U6IENvdXJzZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhhd2FpdCB0aGlzLmdldERhdGFCeUlkKGNvbnRlbnRJZCwgY291cnNlKSlcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0VXJsUGF0aEZyb21JZHMoXHJcbiAgICAgICAgY29udGVudElkOiBudW1iZXIsXHJcbiAgICAgICAgY291cnNlSWQ6IG51bWJlciB8IG51bGwpIHtcclxuICAgICAgICBhc3NlcnQodHlwZW9mIHRoaXMuY29udGVudFVybFRlbXBsYXRlID09PSAnc3RyaW5nJyk7XHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuY29udGVudFVybFRlbXBsYXRlXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKCd7Y29udGVudF9pZH0nLCBjb250ZW50SWQudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgIGlmIChjb3Vyc2VJZCkgdXJsID0gdXJsLnJlcGxhY2UoJ3tjb3Vyc2VfaWR9JywgY291cnNlSWQudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB1cmw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvdXJzZUlkIC0gVGhlIGNvdXJzZSBJRCB0byBnZXQgZWxlbWVudHMgd2l0aGluLCBpZiBhcHBsaWNhYmxlXHJcbiAgICAgKiBAcGFyYW0gYWNjb3VudElkIC0gVGhlIGFjY291bnQgSUQgdG8gZ2V0IGVsZW1lbnRzIHdpdGhpbiwgaWYgYXBwbGljYWJsZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0QWxsVXJsKGNvdXJzZUlkOiBudW1iZXIgfCBudWxsID0gbnVsbCwgYWNjb3VudElkOiBudW1iZXIgfCBudWxsID0gbnVsbCkge1xyXG4gICAgICAgIGFzc2VydCh0eXBlb2YgdGhpcy5hbGxDb250ZW50VXJsVGVtcGxhdGUgPT09ICdzdHJpbmcnKTtcclxuICAgICAgICBsZXQgcmVwbGFjZWQgPSB0aGlzLmFsbENvbnRlbnRVcmxUZW1wbGF0ZTtcclxuXHJcbiAgICAgICAgaWYgKGNvdXJzZUlkKSByZXBsYWNlZCA9IHJlcGxhY2VkLnJlcGxhY2UoJ3tjb3Vyc2VfaWR9JywgY291cnNlSWQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgaWYgKGFjY291bnRJZCkgcmVwbGFjZWQgPSByZXBsYWNlZC5yZXBsYWNlKCd7YWNjb3VudF9pZH0nLCBhY2NvdW50SWQudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRBbGwoY29uZmlnOiBJQ2FudmFzQ2FsbENvbmZpZyB8IG51bGwgPSBudWxsKSB7XHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0QWxsVXJsKCk7XHJcbiAgICAgICAgbGV0IGRhdGEgPSBhd2FpdCBnZXRBcGlQYWdlZERhdGEodXJsLCBjb25maWcpO1xyXG4gICAgICAgIHJldHVybiBkYXRhLm1hcChpdGVtID0+IG5ldyB0aGlzKGl0ZW0pKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0IGlkKCk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmNhbnZhc0RhdGFbKDx0eXBlb2YgQmFzZUNhbnZhc09iamVjdD50aGlzLmNvbnN0cnVjdG9yKS5pZFByb3BlcnR5XTtcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIGxldCBuYW1lUHJvcGVydHkgPSB0aGlzLmdldENsYXNzKCkubmFtZVByb3BlcnR5O1xyXG4gICAgICAgIGFzc2VydChuYW1lUHJvcGVydHkpXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SXRlbShuYW1lUHJvcGVydHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNhdmVEYXRhKGRhdGE6IERpY3QpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5jb250ZW50VXJsUGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IGZldGNoQXBpSnNvbih0aGlzLmNvbnRlbnRVcmxQYXRoLCB7XHJcbiAgICAgICAgICAgIGZldGNoSW5pdDoge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhaWZ5KGRhdGEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZGVsZXRlKCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLmNvbnRlbnRVcmxQYXRoKTtcclxuICAgICAgICByZXR1cm4gYXdhaXQgZmV0Y2hBcGlKc29uKHRoaXMuY29udGVudFVybFBhdGgsIHtmZXRjaEluaXQ6IHttZXRob2Q6ICdERUxFVEUnfX0pXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQWNjb3VudCBleHRlbmRzIEJhc2VDYW52YXNPYmplY3Qge1xyXG4gICAgc3RhdGljIG5hbWVQcm9wZXJ0eSA9ICduYW1lJzsgLy8gVGhlIGZpZWxkIG5hbWUgb2YgdGhlIHByaW1hcnkgbmFtZSBvZiB0aGUgY2FudmFzIG9iamVjdCB0eXBlXHJcbiAgICBzdGF0aWMgY29udGVudFVybFRlbXBsYXRlID0gJ2FjY291bnRzL3tjb250ZW50X2lkfSc7IC8vIEEgdGVtcGxhdGVkIHVybCB0byBnZXQgYSBzaW5nbGUgaXRlbVxyXG4gICAgc3RhdGljIGFsbENvbnRlbnRVcmxUZW1wbGF0ZSA9ICdhY2NvdW50cyc7IC8vIEEgdGVtcGxhdGVkIHVybCB0byBnZXQgYWxsIGl0ZW1zXHJcbiAgICBwcml2YXRlIHN0YXRpYyBhY2NvdW50OiBBY2NvdW50O1xyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRGcm9tVXJsKHVybDogc3RyaW5nIHwgbnVsbCA9IG51bGwpIHtcclxuICAgICAgICBpZiAodXJsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHVybCA9IGRvY3VtZW50LmRvY3VtZW50VVJJO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2ggPSAvYWNjb3VudHNcXC8oXFxkKykvLmV4ZWModXJsKTtcclxuICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobWF0Y2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRCeUlkKHBhcnNlSW50KG1hdGNoWzFdKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRCeUlkKGFjY291bnRJZDogbnVtYmVyLCBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZ2V0RGF0YUJ5SWQoYWNjb3VudElkLCBudWxsLCBjb25maWcpXHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoKVxyXG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudChkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0Um9vdEFjY291bnQocmVzZXRDYWNoZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IGFjY291bnRzOiBBY2NvdW50W10gPSA8QWNjb3VudFtdPmF3YWl0IHRoaXMuZ2V0QWxsKCk7XHJcbiAgICAgICAgaWYgKCFyZXNldENhY2hlICYmIHRoaXMuaGFzT3duUHJvcGVydHkoJ2FjY291bnQnKSAmJiB0aGlzLmFjY291bnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJvb3QgPSBhY2NvdW50cy5maW5kKChhKSA9PiBhLnJvb3RBY2NvdW50SWQgPT09IG51bGwpO1xyXG4gICAgICAgIGFzc2VydChyb290KTtcclxuICAgICAgICB0aGlzLmFjY291bnQgPSByb290O1xyXG4gICAgICAgIHJldHVybiByb290O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXQgcm9vdEFjY291bnRJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXNEYXRhWydyb290X2FjY291bnRfaWQnXVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvdXJzZSBleHRlbmRzIEJhc2VDYW52YXNPYmplY3Qge1xyXG4gICAgc3RhdGljIENPREVfUkVHRVggPSAvXiguK1teX10pP18/KFxcd3s0fVxcZHszfSkvaTsgLy8gQWRhcHRlZCB0byBKYXZhU2NyaXB0J3MgcmVnZXggc3ludGF4LlxyXG4gICAgcHJpdmF0ZSBfbW9kdWxlczogSU1vZHVsZURhdGFbXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgbW9kdWxlc0J5V2Vla051bWJlcjogTG9va1VwVGFibGU8SU1vZHVsZURhdGE+IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY29udGVudENsYXNzZXM6ICh0eXBlb2YgQmFzZUNvbnRlbnRJdGVtKVtdID0gW107XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGdldEZyb21VcmwodXJsOiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh1cmwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdXJsID0gZG9jdW1lbnQuZG9jdW1lbnRVUkk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtYXRjaCA9IC9jb3Vyc2VzXFwvKFxcZCspLy5leGVjKHVybCk7XHJcbiAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1hdGNoKTtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldElkRnJvbVVybCh1cmwpO1xyXG4gICAgICAgICAgICBpZiAoIWlkKSByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QnlJZChpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRJZEZyb21VcmwodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSAvY291cnNlc1xcLyhcXGQrKS8uZXhlYyh1cmwpO1xyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgYSBzdHJpbmcgbG9va3MgbGlrZSBhIGNvdXJzZSBjb2RlXHJcbiAgICAgKiBAcGFyYW0gY29kZVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc3RyaW5nSXNDb3Vyc2VDb2RlKGNvZGU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNPREVfUkVHRVguZXhlYyhjb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhpcyBsaWJyYXJ5J3MgY2xhc3MgY29ycmVzcG9uZGluZyB0byB0aGUgY3VycmVudCB1cmwsIGRyYXdpbmcgZnJvbSBDb3Vyc2UuY29udGVudENsYXNzZXMuXHJcbiAgICAgKiBDbGFzc2VzIGNhbiBiZSBpbmNsdWRlZCBpbiBDb3Vyc2UuY29udGVudENsYXNzZXMgdXNpbmcgdGhlIGRlY29yYXRvciBAY29udGVudENsYXNzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVybFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0Q29udGVudENsYXNzRnJvbVVybCh1cmw6IHN0cmluZyB8IG51bGwgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKCF1cmwpIHVybCA9IGRvY3VtZW50LmRvY3VtZW50VVJJO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBjbGFzc18gb2YgdGhpcy5jb250ZW50Q2xhc3Nlcykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjbGFzc18sIGNsYXNzXy5jb250ZW50VXJsUGFydCk7XHJcbiAgICAgICAgICAgIGlmIChjbGFzc18uY29udGVudFVybFBhcnQgJiYgdXJsLmluY2x1ZGVzKGNsYXNzXy5jb250ZW50VXJsUGFydCkpIHJldHVybiBjbGFzc187XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0QnlJZChjb3Vyc2VJZDogbnVtYmVyLCBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoT25lQXBpSnNvbihgY291cnNlcy8ke2NvdXJzZUlkfWAsIGNvbmZpZyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb3Vyc2UoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgZ2V0Q291cnNlc0J5U3RyaW5nKGNvZGU6IHN0cmluZywgdGVybTogVGVybSB8IG51bGwgPSBudWxsLCBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnID0ge30pIHtcclxuICAgICAgICBsZXQgY291cnNlRGF0YUxpc3Q6IElDYW52YXNEYXRhW10gfCBudWxsID0gbnVsbDtcclxuICAgICAgICBjb25zdCBhY2NvdW50SWRzQnlOYW1lID0gYXdhaXQgQ291cnNlLmdldEFjY291bnRJZHNCeU5hbWUoKTtcclxuICAgICAgICBmb3IgKGxldCBhY2NvdW50S2V5IGluIGFjY291bnRJZHNCeU5hbWUpIHtcclxuICAgICAgICAgICAgbGV0IGFjY291bnRJZCA9IGFjY291bnRJZHNCeU5hbWVbYWNjb3VudEtleV07XHJcbiAgICAgICAgICAgIGxldCB1cmwgPSBgYWNjb3VudHMvJHthY2NvdW50SWR9L2NvdXJzZXNgO1xyXG4gICAgICAgICAgICBjb25maWcucXVlcnlQYXJhbXMgPSBjb25maWcucXVlcnlQYXJhbXMgfHwge307XHJcbiAgICAgICAgICAgIGNvbmZpZy5xdWVyeVBhcmFtc1snc2VhcmNoX3Rlcm0nXSA9IGNvZGU7XHJcbiAgICAgICAgICAgIGlmICh0ZXJtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcucXVlcnlQYXJhbXNbJ2Vucm9sbG1lbnRfdGVybV9pZCddID0gdGVybS5pZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb3Vyc2VEYXRhTGlzdCA9IGF3YWl0IGdldEFwaVBhZ2VkRGF0YSh1cmwsIGNvbmZpZyk7XHJcbiAgICAgICAgICAgIGlmIChjb3Vyc2VEYXRhTGlzdCAmJiBjb3Vyc2VEYXRhTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFjb3Vyc2VEYXRhTGlzdCB8fCBjb3Vyc2VEYXRhTGlzdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY291cnNlRGF0YUxpc3QubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBjb3Vyc2VEYXRhTGlzdC5zb3J0KChhLCBiKSA9PiBiLmlkIC0gYS5pZCk7IC8vIFNvcnQgY291cnNlcyBieSBJRCBpbiBkZXNjZW5kaW5nIG9yZGVyXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY291cnNlRGF0YUxpc3QubWFwKGNvdXJzZURhdGEgPT4gbmV3IENvdXJzZShjb3Vyc2VEYXRhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGdldEFsbEJ5Q29kZShjb2RlOiBzdHJpbmcsIHRlcm06IFRlcm0gfCBudWxsID0gbnVsbCwgY29uZmlnOiBJQ2FudmFzQ2FsbENvbmZpZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENvdXJzZXNCeVN0cmluZyhjb2RlLCB0ZXJtLCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRCeUNvZGUoY29kZTogc3RyaW5nLCB0ZXJtOiBUZXJtIHwgbnVsbCA9IG51bGwsIGNvbmZpZzogSUNhbnZhc0NhbGxDb25maWcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb25zdCBjb3Vyc2VzID0gYXdhaXQgdGhpcy5nZXRDb3Vyc2VzQnlTdHJpbmcoY29kZSwgdGVybSwgY29uZmlnKTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb3Vyc2VzKSkgcmV0dXJuIGNvdXJzZXNbMF07XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGdldEFjY291bnRJZHNCeU5hbWUoKTogUHJvbWlzZTxEaWN0PiB7XHJcbiAgICAgICAgbGV0IGNvdXJzZSA9IGF3YWl0IENvdXJzZS5nZXRGcm9tVXJsKCk7XHJcbiAgICAgICAgaWYgKCFjb3Vyc2UpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiWW91IG11c3QgYmUgb24gYSBjYW52YXMgcGFnZSB0byBnZXQgYWNjb3VudHNcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ3Jvb3QnOiBjb3Vyc2UuY2FudmFzRGF0YVsncm9vdF9hY2NvdW50X2lkJ10sXHJcbiAgICAgICAgICAgICdjdXJyZW50JzogY291cnNlLmNhbnZhc0RhdGFbJ2FjY291bnRJZCddXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvLyBzdGF0aWMgYXN5bmMgY291cnNlRXZlbnQoY291cnNlczogQ291cnNlW10sIGV2ZW50OiBzdHJpbmcsIGFjY291bnRJZDogbnVtYmVyKSB7XHJcbiAgICAvLyAgICAgY29uc3QgdXJsID0gYGFjY291bnRzLyR7YWNjb3VudElkfS9jb3Vyc2VzYDsgLy8gQXNzdW1pbmcgQVBJX1VSTCBhbmQgQUNDT1VOVF9JRCBhcmUgZGVmaW5lZCBlbHNld2hlcmVcclxuICAgIC8vICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgLy8gICAgICAgICAnZXZlbnQnOiBldmVudCxcclxuICAgIC8vICAgICAgICAgJ2NvdXJzZV9pZHNbXSc6IGNvdXJzZXMubWFwKGNvdXJzZSA9PiBjb3Vyc2UuaWQpXHJcbiAgICAvLyAgICAgfTtcclxuICAgIC8vICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgLy8gICAgICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgLy8gICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgIC8vICAgICAgICAgY29uc29sZS5lcnJvcihhd2FpdCByZXNwb25zZS50ZXh0KCkpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICBnZXQgY29udGVudFVybFBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBjb3Vyc2VzLyR7dGhpcy5pZH1gO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb3Vyc2VVcmwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHRtbENvbnRlbnRVcmw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvdXJzZUNvZGUoKTogbnVsbCB8IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG1hdGNoID0gdGhpcy5jb2RlTWF0Y2g7XHJcbiAgICAgICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgbGV0IHByZWZpeCA9IG1hdGNoWzFdIHx8IFwiXCI7XHJcbiAgICAgICAgbGV0IGNvdXJzZUNvZGUgPSBtYXRjaFsyXSB8fCBcIlwiO1xyXG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9XyR7Y291cnNlQ29kZX1gO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBmdWxsQ291cnNlQ29kZSgpOiBudWxsIHwgc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXNEYXRhLmNvdXJzZV9jb2RlXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvZGVNYXRjaCgpIHtcclxuICAgICAgICByZXR1cm4gQ291cnNlLkNPREVfUkVHRVguZXhlYyh0aGlzLmNhbnZhc0RhdGEuY291cnNlX2NvZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBiYXNlQ29kZSgpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSB0aGlzLmNvZGVNYXRjaDtcclxuICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsyXSA6ICcnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXQgdGVybUlkKCk6IG51bWJlciB8IG51bGwge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5jYW52YXNEYXRhIGFzIElDb3Vyc2VEYXRhKS5lbnJvbGxtZW50X3Rlcm1faWQ7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGFzeW5jIGdldFRlcm0oKTogUHJvbWlzZTxUZXJtIHwgbnVsbD4ge1xyXG4gICAgICAgIGlmICh0aGlzLnRlcm1JZCkgcmV0dXJuIFRlcm0uZ2V0VGVybUJ5SWQodGhpcy50ZXJtSWQpXHJcbiAgICAgICAgZWxzZSByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29kZVByZWZpeCgpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSB0aGlzLmNvZGVNYXRjaDtcclxuICAgICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc0JsdWVwcmludCgpIHtcclxuICAgICAgICByZXR1cm4gJ2JsdWVwcmludCcgaW4gdGhpcy5jYW52YXNEYXRhICYmIHRoaXMuY2FudmFzRGF0YVsnYmx1ZXByaW50J107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzUHVibGlzaGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhc0RhdGFbJ3dvcmtmbG93X3N0YXRlJ10gPT09ICdhdmFpbGFibGUnO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldE1vZHVsZXMoKTogUHJvbWlzZTxJTW9kdWxlRGF0YVtdPiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21vZHVsZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZHVsZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBtb2R1bGVzID0gPElNb2R1bGVEYXRhW10+YXdhaXQgZ2V0QXBpUGFnZWREYXRhKGAke3RoaXMuY29udGVudFVybFBhdGh9L21vZHVsZXM/aW5jbHVkZVtdPWl0ZW1zJmluY2x1ZGVbXT1jb250ZW50X2RldGFpbHNgKTtcclxuICAgICAgICB0aGlzLl9tb2R1bGVzID0gbW9kdWxlcztcclxuICAgICAgICByZXR1cm4gbW9kdWxlcztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRDb250ZW50SXRlbUZyb21VcmwodXJsOiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xyXG4gICAgICAgIGxldCBDb250ZW50Q2xhc3MgPSBDb3Vyc2UuZ2V0Q29udGVudENsYXNzRnJvbVVybCh1cmwpO1xyXG4gICAgICAgIGlmICghQ29udGVudENsYXNzKSByZXR1cm4gbnVsbDtcclxuICAgICAgICByZXR1cm4gQ29udGVudENsYXNzLmdldEZyb21VcmwodXJsKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRNb2R1bGVzQnlXZWVrTnVtYmVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZHVsZXNCeVdlZWtOdW1iZXIpIHJldHVybiB0aGlzLm1vZHVsZXNCeVdlZWtOdW1iZXI7XHJcbiAgICAgICAgbGV0IG1vZHVsZXMgPSBhd2FpdCB0aGlzLmdldE1vZHVsZXMoKTtcclxuICAgICAgICBsZXQgbW9kdWxlc0J5V2Vla051bWJlcjogTG9va1VwVGFibGU8SU1vZHVsZURhdGE+ID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgbW9kdWxlIG9mIG1vZHVsZXMpIHtcclxuICAgICAgICAgICAgbGV0IHdlZWtOdW1iZXIgPSBnZXRNb2R1bGVXZWVrTnVtYmVyKG1vZHVsZSk7XHJcbiAgICAgICAgICAgIGlmICh3ZWVrTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGVzQnlXZWVrTnVtYmVyW3dlZWtOdW1iZXJdID0gbW9kdWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubW9kdWxlc0J5V2Vla051bWJlciA9IG1vZHVsZXNCeVdlZWtOdW1iZXI7XHJcbiAgICAgICAgcmV0dXJuIG1vZHVsZXNCeVdlZWtOdW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBsaW5rcyB0byBpdGVtcyBpbiBhIGdpdmVuIG1vZHVsZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBtb2R1bGVPcldlZWtOdW1iZXJcclxuICAgICAqIEBwYXJhbSB0YXJnZXQgQW4gb2JqZWN0IHNwZWNpZnlpbmcgYW4gaXRlbSBvciBpdGVtcyB0byBsb29rIGZvclxyXG4gICAgICogdHlwZSAtIHNwZWNpZmllcyB0aGUgdHlwZSxcclxuICAgICAqIHNlYXJjaCAtIGEgc3RyaW5nIHRvIHNlYXJjaCBmb3IgaW4gdGl0bGVzLiBvcHRpb25hbC5cclxuICAgICAqIGluZGV4IC0gcmV0dXJuIHRoZSBpbmRleHRoIG9uZSBvZiB0aGVzZSBpbiB0aGUgd2VlayAobWludXMgdGhlIGludHJvIGluIHdlZWsgMSwgd2hpY2ggc2hvdWxkIGJlIGluZGV4IDApXHJcbiAgICAgKiBpZiBub25lIGlzIHNwZWNpZmllZCwgcmV0dXJuIGFsbCBtYXRjaGVzXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldE1vZHVsZUl0ZW1MaW5rcyhtb2R1bGVPcldlZWtOdW1iZXI6IG51bWJlciB8IERpY3QsIHRhcmdldDogSU1vZHVsZUl0ZW1EYXRhIHwge1xyXG4gICAgICAgIHR5cGU6IE1vZHVsZUl0ZW1UeXBlLFxyXG4gICAgICAgIHNlYXJjaD86IHN0cmluZyB8IG51bGwsXHJcbiAgICAgICAgaW5kZXg/OiBudW1iZXIgfCBudWxsLFxyXG4gICAgfSk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgICAgICBhc3NlcnQodGFyZ2V0Lmhhc093blByb3BlcnR5KCd0eXBlJykpO1xyXG4gICAgICAgIGxldCB0YXJnZXRUeXBlOiBNb2R1bGVJdGVtVHlwZSA9IHRhcmdldC50eXBlO1xyXG4gICAgICAgIGxldCB1cmw6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGxldCBjb250ZW50U2VhcmNoU3RyaW5nID0gdGFyZ2V0Lmhhc093blByb3BlcnR5KCdzZWFyY2gnKSA/IHRhcmdldC5zZWFyY2ggOiBudWxsO1xyXG4gICAgICAgIGxldCB0YXJnZXRJbmRleCA9IGlzTmFOKHRhcmdldC5pbmRleCkgPyBudWxsIDogdGFyZ2V0LmluZGV4O1xyXG4gICAgICAgIGxldCB0YXJnZXRNb2R1bGVXZWVrTnVtYmVyO1xyXG4gICAgICAgIGxldCB0YXJnZXRNb2R1bGU7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVPcldlZWtOdW1iZXIgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIGxldCBtb2R1bGVzID0gYXdhaXQgdGhpcy5nZXRNb2R1bGVzQnlXZWVrTnVtYmVyKCk7XHJcbiAgICAgICAgICAgIGFzc2VydChtb2R1bGVzLmhhc093blByb3BlcnR5KG1vZHVsZU9yV2Vla051bWJlcikpO1xyXG4gICAgICAgICAgICB0YXJnZXRNb2R1bGVXZWVrTnVtYmVyID0gbW9kdWxlT3JXZWVrTnVtYmVyO1xyXG4gICAgICAgICAgICB0YXJnZXRNb2R1bGUgPSBtb2R1bGVzW3RhcmdldE1vZHVsZVdlZWtOdW1iZXJdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldE1vZHVsZSA9IG1vZHVsZU9yV2Vla051bWJlcjtcclxuICAgICAgICAgICAgdGFyZ2V0TW9kdWxlV2Vla051bWJlciA9IGdldE1vZHVsZVdlZWtOdW1iZXIodGFyZ2V0TW9kdWxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVybHMgPSBbXTtcclxuICAgICAgICBpZiAodGFyZ2V0TW9kdWxlICYmIHR5cGVvZiB0YXJnZXRUeXBlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAvL0lmIGl0J3MgYSBwYWdlLCBqdXN0IHNlYXJjaCBmb3IgdGhlIHBhcmFtZXRlciBzdHJpbmdcclxuICAgICAgICAgICAgaWYgKHRhcmdldFR5cGUgPT09ICdQYWdlJyAmJiBjb250ZW50U2VhcmNoU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZXMgPSBhd2FpdCB0aGlzLmdldFBhZ2VzKHtcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtczoge3NlYXJjaF90ZXJtOiBjb250ZW50U2VhcmNoU3RyaW5nfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHBhZ2VzLmZvckVhY2goKHBhZ2UpID0+IHVybHMucHVzaChwYWdlLmh0bWxDb250ZW50VXJsKSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIC8vSWYgaXQncyBhbnl0aGluZyBlbHNlLCBnZXQgb25seSB0aG9zZSBpdGVtcyBpbiB0aGUgbW9kdWxlIGFuZCBzZXQgdXJsIHRvIHRoZSB0YXJnZXRJbmRleHRoIG9uZS5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAvL2J1bXAgaW5kZXggZm9yIHdlZWsgMSB0byBhY2NvdW50IGZvciBpbnRybyBkaXNjdXNzaW9uIC8gY2hlY2tpbmcgZm9yIHJ1YnJpYyB3b3VsZCByZXF1aXJlIHB1bGxpbmcgdG9vIG11Y2ggZGF0YVxyXG4gICAgICAgICAgICAgICAgLy9hbmQgdG9vIG11Y2ggcGVyZm9ybWFuY2Ugb3ZlcmhlYWRcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJbmRleCAmJiB0YXJnZXRUeXBlID09PSAnRGlzY3Vzc2lvbicgJiYgdGFyZ2V0TW9kdWxlV2Vla051bWJlciA9PT0gMSkgdGFyZ2V0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoaW5nVHlwZUl0ZW1zID0gdGFyZ2V0TW9kdWxlLml0ZW1zLmZpbHRlcigoaXRlbTogSU1vZHVsZUl0ZW1EYXRhKSA9PiBpdGVtLnR5cGUgPT09IHRhcmdldFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldEluZGV4ICYmIG1hdGNoaW5nVHlwZUl0ZW1zLmxlbmd0aCA+PSB0YXJnZXRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vV2UgcmVmZXIgdG8gYW5kIG51bWJlciB0aGUgYXNzaWdubWVudHMgaW5kZXhlZCBhdCAxLCBidXQgdGhlIGFycmF5IGlzIGluZGV4ZWQgYXQgMFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEl0ZW0gPSBtYXRjaGluZ1R5cGVJdGVtc1t0YXJnZXRJbmRleCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHVybHMucHVzaCh0YXJnZXRJdGVtLmh0bWxfdXJsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRhcmdldEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBtYXRjaGluZ1R5cGVJdGVtcykgdXJscy5wdXNoKGl0ZW0uaHRtbF91cmwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVybHM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0U3lsbGFidXMoKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICBpZiAoISgnc3lsbGFidXNfYm9keScgaW4gdGhpcy5jYW52YXNEYXRhKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgQ291cnNlLmdldEJ5SWQodGhpcy5pZCwgeydpbmNsdWRlW10nOiAnc3lsbGFidXNfYm9keSd9KTtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXNEYXRhWydzeWxsYWJ1c19ib2R5J10gPSBkYXRhLmNhbnZhc0RhdGFbJ3N5bGxhYnVzX2JvZHknXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzRGF0YVsnc3lsbGFidXNfYm9keSddO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0cyBhbGwgYXNzaWdubWVudHMgaW4gYSBjb3Vyc2VcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFzc2lnbm1lbnRbXT59XHJcbiAgICAgKiBAcGFyYW0gY29uZmlnXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldEFzc2lnbm1lbnRzKGNvbmZpZzogSUNhbnZhc0NhbGxDb25maWcgPSB7XHJcbiAgICAgICAgcXVlcnlQYXJhbXM6IHsnaW5jbHVkZSc6IFsnZHVlX2F0J119XHJcbiAgICB9KTogUHJvbWlzZTxBc3NpZ25tZW50W10+IHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgQXNzaWdubWVudC5nZXRBbGxJbkNvdXJzZSh0aGlzLCBjb25maWcpIGFzIEFzc2lnbm1lbnRbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqR2V0cyBhbGwgcXVpenplcyBpbiBhIGNvdXJzZVxyXG4gICAgICogQHBhcmFtIHF1ZXJ5UGFyYW1zIGEganNvbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBxdWVyeSBwYXJhbSBzdHJpbmcuIERlZmF1bHRzIHRvIGluY2x1ZGluZyBkdWUgZGF0ZXMgICAgICpcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFF1aXpbXT59XHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGdldFF1aXp6ZXMocXVlcnlQYXJhbXMgPSB7J2luY2x1ZGUnOiBbJ2R1ZV9hdCddfSk6IFByb21pc2U8UXVpeltdPiB7XHJcbiAgICAgICAgcmV0dXJuIDxRdWl6W10+YXdhaXQgUXVpei5nZXRBbGxJbkNvdXJzZSh0aGlzLCB7cXVlcnlQYXJhbXN9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRBc3NvY2lhdGVkQ291cnNlcygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNCbHVlcHJpbnQpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBjb25zdCB1cmwgPSBgY291cnNlcy8ke3RoaXMuaWR9L2JsdWVwcmludF90ZW1wbGF0ZXMvZGVmYXVsdC9hc3NvY2lhdGVkX2NvdXJzZXNgO1xyXG4gICAgICAgIGNvbnN0IGNvdXJzZXMgPSBhd2FpdCBnZXRBcGlQYWdlZERhdGEodXJsLCB7cXVlcnlQYXJhbXM6IHtwZXJfcGFnZTogNTB9fSk7XHJcbiAgICAgICAgcmV0dXJuIGNvdXJzZXMubWFwKGNvdXJzZURhdGEgPT4gbmV3IENvdXJzZShjb3Vyc2VEYXRhKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0U3Vic2VjdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvdjEvY291cnNlcy8ke3RoaXMuaWR9L3NlY3Rpb25zYDtcclxuICAgICAgICByZXR1cm4gYXdhaXQgZmV0Y2hBcGlKc29uKHVybCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFRhYnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IGZldGNoQXBpSnNvbihgY291cnNlcy8ke3RoaXMuaWR9L3RhYnNgKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRGcm9udFBhZ2UoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoT25lQXBpSnNvbihgJHt0aGlzLmNvbnRlbnRVcmxQYXRofS9mcm9udF9wYWdlYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZShkYXRhLCB0aGlzKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFiKGxhYmVsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXNEYXRhLnRhYnMuZmluZCgodGFiOiBEaWN0KSA9PiB0YWIubGFiZWwgPT09IGxhYmVsKSB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldE5hdmlnYXRpb25UYWJIaWRkZW4obGFiZWw6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCB0YWIgPSB0aGlzLmdldFRhYihsYWJlbCk7XHJcbiAgICAgICAgaWYgKCF0YWIpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gYXdhaXQgZmV0Y2hBcGlKc29uKGBjb3Vyc2VzLyR7dGhpcy5pZH0vdGFicy8ke3RhYi5pZH1gLCB7XHJcbiAgICAgICAgICAgIHF1ZXJ5UGFyYW1zOiB7J2hpZGRlbic6IHZhbHVlfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNoYW5nZVN5bGxhYnVzKG5ld0h0bWw6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY2FudmFzRGF0YVsnc3lsbGFidXNfYm9keSddID0gbmV3SHRtbDtcclxuICAgICAgICByZXR1cm4gYXdhaXQgZmV0Y2hBcGlKc29uKGBjb3Vyc2VzLyR7dGhpcy5pZH1gLCB7XHJcbiAgICAgICAgICAgIGZldGNoSW5pdDoge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsnY291cnNlW3N5bGxhYnVzX2JvZHldJzogbmV3SHRtbH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRQb3RlbnRpYWxTZWN0aW9ucyh0ZXJtOiBUZXJtKSB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IENvdXJzZS5nZXRBbGxCeUNvZGUodGhpcy5iYXNlQ29kZSwgdGVybSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9ja0JsdWVwcmludCgpIHtcclxuICAgICAgICBjb25zdCBtb2R1bGVzID0gYXdhaXQgdGhpcy5nZXRNb2R1bGVzKCk7XHJcbiAgICAgICAgbGV0IGl0ZW1zOiBJTW9kdWxlSXRlbURhdGFbXSA9IFtdO1xyXG4gICAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KC4uLm1vZHVsZXMubWFwKChhKSA9PiAoPElNb2R1bGVJdGVtRGF0YVtdPltdKS5jb25jYXQoLi4uYS5pdGVtcykpKTtcclxuICAgICAgICBjb25zdCBwcm9taXNlcyA9IGl0ZW1zLm1hcChhc3luYyAoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmNvbnRlbnRVcmxQYXRofS9ibHVlcHJpbnRfdGVtcGxhdGVzL2RlZmF1bHQvcmVzdHJpY3RfaXRlbWA7XHJcbiAgICAgICAgICAgIGxldCB7dHlwZSwgaWR9ID0gYXdhaXQgZ2V0SXRlbVR5cGVBbmRJZChpdGVtKTtcclxuICAgICAgICAgICAgbGV0IGJvZHkgPSB7XHJcbiAgICAgICAgICAgICAgICBcImNvbnRlbnRfdHlwZVwiOiB0eXBlLFxyXG4gICAgICAgICAgICAgICAgXCJjb250ZW50X2lkXCI6IGlkLFxyXG4gICAgICAgICAgICAgICAgXCJyZXN0cmljdGVkXCI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBcIl9tZXRob2RcIjogJ1BVVCdcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coYm9keSk7XHJcbiAgICAgICAgICAgIGF3YWl0IGZldGNoQXBpSnNvbih1cmwsIHtcclxuICAgICAgICAgICAgICAgIGZldGNoSW5pdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogZm9ybURhdGFpZnkoYm9keSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0QXNCbHVlcHJpbnQoKSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYGNvdXJzZXMvJHt0aGlzLmlkfWA7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHtcclxuICAgICAgICAgICAgJ2NvdXJzZVtibHVlcHJpbnRdJzogdHJ1ZSxcclxuICAgICAgICAgICAgJ2NvdXJzZVt1c2VfYmx1ZXByaW50X3Jlc3RyaWN0aW9uc19ieV9vYmplY3RfdHlwZV0nOiAwLFxyXG4gICAgICAgICAgICAnY291cnNlW2JsdWVwcmludF9yZXN0cmljdGlvbnNdW2NvbnRlbnRdJzogMSxcclxuICAgICAgICAgICAgJ2NvdXJzZVtibHVlcHJpbnRfcmVzdHJpY3Rpb25zXVtwb2ludHNdJzogMSxcclxuICAgICAgICAgICAgJ2NvdXJzZVtibHVlcHJpbnRfcmVzdHJpY3Rpb25zXVtkdWVfZGF0ZXNdJzogMSxcclxuICAgICAgICAgICAgJ2NvdXJzZVtibHVlcHJpbnRfcmVzdHJpY3Rpb25zXVthdmFpbGFiaWxpdHlfZGF0ZXNdJzogMSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmNhbnZhc0RhdGEgPSBhd2FpdCBmZXRjaE9uZUFwaUpzb24odXJsLCB7XHJcbiAgICAgICAgICAgIGZldGNoSW5pdDoge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJlc2V0Q2FjaGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1bnNldEFzQmx1ZXByaW50KCkge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGBjb3Vyc2VzLyR7dGhpcy5pZH1gO1xyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XHJcbiAgICAgICAgICAgICdjb3Vyc2VbYmx1ZXByaW50XSc6IGZhbHNlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jYW52YXNEYXRhID0gYXdhaXQgZmV0Y2hPbmVBcGlKc29uKHVybCwge1xyXG4gICAgICAgICAgICBmZXRjaEluaXQ6IHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5yZXNldENhY2hlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXRDYWNoZSgpIHtcclxuICAgICAgICAvL2RlbGV0ZSB0aGlzLnN1YnNlY3Rpb25zO1xyXG4gICAgICAgIC8vZGVsZXRlIHRoaXMuYXNzb2NpYXRlZENvdXJzZXM7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcHVibGlzaCgpIHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgY291cnNlcy8ke3RoaXMuaWR9YDtcclxuICAgICAgICBjb25zdCBjb3Vyc2VEYXRhID0gYXdhaXQgZmV0Y2hPbmVBcGlKc29uKHVybCwge1xyXG4gICAgICAgICAgICBmZXRjaEluaXQ6IHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7J29mZmVyJzogdHJ1ZX0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zb2xlLmxvZyhjb3Vyc2VEYXRhKTtcclxuICAgICAgICB0aGlzLmNhbnZhc0RhdGEgPSBjb3Vyc2VEYXRhO1xyXG4gICAgICAgIHRoaXMucmVzZXRDYWNoZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVucHVibGlzaCgpIHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgY291cnNlcy8ke3RoaXMuaWR9YDtcclxuICAgICAgICBhd2FpdCBmZXRjaEFwaUpzb24odXJsLCB7XHJcbiAgICAgICAgICAgIGZldGNoSW5pdDoge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsnY291cnNlW2V2ZW50XSc6ICdjbGFpbSd9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jYW52YXNEYXRhID0gKGF3YWl0IENvdXJzZS5nZXRCeUlkKHRoaXMuaWQpKS5yYXdEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNvbnRlbnRVcGRhdGVzQW5kRml4ZXMoX2ZpeGVzVG9SdW4gPSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IE5vdEltcGxlbWVudGVkRXhjZXB0aW9uKCk7XHJcbiAgICAgICAgLy8gYXdhaXQgdGhpcy5zZXROYXZpZ2F0aW9uVGFiSGlkZGVuKCdEcm9wb3V0IERldGVjdGl2ZScsIGZhbHNlKTtcclxuICAgICAgICAvLyBhd2FpdCB0aGlzLnNldE5hdmlnYXRpb25UYWJIaWRkZW4oJ0JpZ0JsdWVCdXR0b24nLCBmYWxzZSk7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBjb25zdCBhcHBsaWVkVG8gPSBbXTtcclxuICAgICAgICAvLyBpZiAoZml4ZXNUb1J1biA9PT0gbnVsbCkge1xyXG4gICAgICAgIC8vICAgICBmaXhlc1RvUnVuID0gdGhpcy5maXhlc1RvUnVuO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGZvciAoY29uc3QgcGFnZSBvZiBFdmFsRml4LmZpbmRDb250ZW50KHRoaXMpKSB7XHJcbiAgICAgICAgLy8gICAgIHBhZ2UuZGVsZXRlKCk7XHJcbiAgICAgICAgLy8gICAgIGFwcGxpZWRUby5wdXNoKHBhZ2UpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIGZvciAoY29uc3QgZml4U2V0IG9mIGZpeGVzVG9SdW4pIHtcclxuICAgICAgICAvLyAgICAgY29uc3QgcGFnZXMgPSBmaXhTZXQuZmluZENvbnRlbnQodGhpcyk7XHJcbiAgICAgICAgLy8gICAgIGZvciAoY29uc3QgcGFnZSBvZiBwYWdlcykge1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc3QgdGV4dCA9IGZpeFNldC5maXgocGFnZS5ib2R5KTtcclxuICAgICAgICAvLyAgICAgICAgIHBhZ2UudXBkYXRlQ29udGVudCh0ZXh0KTtcclxuICAgICAgICAvLyAgICAgICAgIGFwcGxpZWRUby5wdXNoKHBhZ2UpO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gY29uc3Qgc3lsbGFidXMgPSBTeWxsYWJ1c0ZpeC5maXgodGhpcy5zeWxsYWJ1cyk7XHJcbiAgICAgICAgLy8gYXdhaXQgZmV0Y2hBcGlKc29uKGBjb3Vyc2VzLyR7dGhpcy5pZH1gLCB7fSwge1xyXG4gICAgICAgIC8vICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgICAgIC8vICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7J2NvdXJzZVtzeWxsYWJ1c19ib2R5XSc6IHN5bGxhYnVzfSlcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICAvLyB0aGlzLmNhbnZhc0RhdGFbJ3N5bGxhYnVzX2JvZHknXSA9IHN5bGxhYnVzO1xyXG4gICAgICAgIC8vIHJldHVybiBhcHBsaWVkVG87XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmVzZXQocHJvbXB0ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChwcm9tcHQgJiYgIWNvbmZpcm0oYEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZXNldCAke3RoaXMuY291cnNlQ29kZX0/YCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsID0gYC9jb3Vyc2VzLyR7dGhpcy5pZH0vcmVzZXRfY29udGVudGA7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoT25lQXBpSnNvbih1cmwsIHtmZXRjaEluaXQ6IHttZXRob2Q6ICdQT1NUJ319KTtcclxuICAgICAgICB0aGlzLmNhbnZhc0RhdGFbJ2lkJ10gPSBkYXRhLmlkO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOT1QgSU1QTEVNRU5URURcclxuICAgICAqIEBwYXJhbSBwcm9tcHQgRWl0aGVyIGEgYm9vbGVhbiBvciBhbiBhc3luYyBmdW5jdGlvbiB0aGF0IHRha2VzIGluIGEgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBjb3Vyc2UgYW5kIHJldHVybnMgYSBib29sZWFuXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlQ2FsbGJhY2tcclxuICAgICAqL1xyXG4gICAgYXN5bmMgaW1wb3J0RGV2Q291cnNlKFxyXG4gICAgICAgIHByb21wdDogKChzb3VyY2U6IENvdXJzZSwgZGVzdGluYXRpb246IENvdXJzZSkgPT4gUHJvbWlzZTxib29sZWFuPikgfCBmYWxzZSA9IGZhbHNlLFxyXG4gICAgICAgIHVwZGF0ZUNhbGxiYWNrOiBJVXBkYXRlQ2FsbGJhY2sgfCB1bmRlZmluZWRcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IGRldkNvdXJzZSA9IGF3YWl0IHRoaXMuZ2V0UGFyZW50Q291cnNlKCk7XHJcblxyXG4gICAgICAgIGlmICghZGV2Q291cnNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBDb3Vyc2VOb3RGb3VuZEV4Y2VwdGlvbihgREVWIG5vdCBmb3VuZCBmb3IgJHt0aGlzLm5hbWV9LmApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocHJvbXB0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbkNvbnRpbnVlID0gYXdhaXQgcHJvbXB0KGRldkNvdXJzZSwgdGhpcyk7XHJcbiAgICAgICAgICAgIGlmICghY2FuQ29udGludWUpIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuaW1wb3J0Q291cnNlKGRldkNvdXJzZSwgdXBkYXRlQ2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGltcG9ydENvdXJzZShjb3Vyc2U6IENvdXJzZSwgdXBkYXRlQ2FsbGJhY2s6IElVcGRhdGVDYWxsYmFjayB8IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdldFBhcmVudENvdXJzZShyZXR1cm5fZGV2X3NlYXJjaCA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IG1pZ3JhdGlvbnMgPSBhd2FpdCBnZXRBcGlQYWdlZERhdGEoYGNvdXJzZXMvJHt0aGlzLmlkfS9jb250ZW50X21pZ3JhdGlvbnNgKTtcclxuXHJcbiAgICAgICAgaWYgKG1pZ3JhdGlvbnMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbm8gbWlncmF0aW9ucyBmb3VuZCcpO1xyXG4gICAgICAgICAgICBpZiAocmV0dXJuX2Rldl9zZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb3Vyc2UuZ2V0QnlDb2RlKCdERVZfJyArIHRoaXMuYmFzZUNvZGUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1pZ3JhdGlvbnMuc29ydCgoYSwgYikgPT4gYi5pZCAtIGEuaWQpO1xyXG5cclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBtaWdyYXRpb24gb2YgbWlncmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvdXJzZSA9IGF3YWl0IENvdXJzZS5nZXRCeUlkKG1pZ3JhdGlvblsnc2V0dGluZ3MnXVsnc291cmNlX2NvdXJzZV9pZCddKVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvdXJzZS5jb2RlUHJlZml4ID09PSBcIkRFVlwiKSByZXR1cm4gY291cnNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgQ291cnNlLmdldEJ5Q29kZSgnREVWXycgKyB0aGlzLmJhc2VDb2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2VuZXJhdGVIb21lVGlsZXMoKSB7XHJcbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IGF3YWl0IHRoaXMuZ2V0TW9kdWxlcygpO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2VzOiBQcm9taXNlPHZvaWQ+W10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBtb2R1bGUgb2YgbW9kdWxlcykge1xyXG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMuZ2VuZXJhdGVIb21lVGlsZShtb2R1bGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGdlbmVyYXRlSG9tZVRpbGUobW9kdWxlOiBJTW9kdWxlRGF0YSkge1xyXG5cclxuICAgICAgICBsZXQgb3ZlcnZpZXcgPSBtb2R1bGUuaXRlbXMuZmluZChpdGVtID0+XHJcbiAgICAgICAgICAgIGl0ZW0udHlwZSA9PT0gXCJQYWdlXCIgJiZcclxuICAgICAgICAgICAgaXRlbS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdvdmVydmlldycpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoIW92ZXJ2aWV3Py51cmwpIHJldHVybjtcclxuXHJcbiAgICAgICAgYXNzZXJ0KG92ZXJ2aWV3LnVybCk7XHJcbiAgICAgICAgY29uc3QgdXJsID0gb3ZlcnZpZXcudXJsLnJlcGxhY2UoL2h0dHBzOlxcL1xcLy4qYXBpXFwvdjEvLCAnL2FwaS92MScpXHJcbiAgICAgICAgY29uc3QgcGFnZURhdGEgPSBhd2FpdCBmZXRjaEpzb24odXJsKSBhcyBJQ2FudmFzRGF0YTtcclxuICAgICAgICBjb25zdCBvdmVydmlld1BhZ2UgPSBuZXcgUGFnZShwYWdlRGF0YSwgdGhpcyk7XHJcbiAgICAgICAgY29uc3QgcGFnZUJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdodG1sJyk7XHJcbiAgICAgICAgcGFnZUJvZHkuaW5uZXJIVE1MID0gb3ZlcnZpZXdQYWdlLmJvZHk7XHJcbiAgICAgICAgbGV0IGJhbm5lckltZzogSFRNTEltYWdlRWxlbWVudCB8IG51bGwgPSBwYWdlQm9keS5xdWVyeVNlbGVjdG9yKCcuY2J0LWJhbm5lci1pbWFnZSBpbWcnKVxyXG5cclxuICAgICAgICBhc3NlcnQoYmFubmVySW1nLCBcIlBhZ2UgaGFzIG5vIGJhbm5lclwiKTtcclxuICAgICAgICBsZXQgZG93bmxvYWQgPSBhd2FpdCBkb3dubG9hZEZpbGUoe1xyXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxyXG4gICAgICAgICAgICB1cmw6IGJhbm5lckltZy5zcmMsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBsb2FkRmlsZShmaWxlOiBGaWxlLCBwYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgdXJsID0gYC9hcGkvdjEvY291cnNlcy8ke3RoaXMuaWR9L2ZpbGVzYDtcclxuICAgICAgICBmaWxlLm5hbWU7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFBhcmFtcyA9IHtcclxuICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxyXG4gICAgICAgICAgICBub19yZWRpcmVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgcGFyZW50X2ZvbGRlcjogcGF0aCxcclxuICAgICAgICAgICAgb25fZHVwbGljYXRlOiAnb3ZlcndyaXRlJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgYm9keTogZm9ybURhdGFpZnkoaW5pdGlhbFBhcmFtcyksXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXNzZXJ0KHJlc3BvbnNlLm9rLCBhd2FpdCByZXNwb25zZS5qc29uKCkpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwbG9hZFBhcmFtcyA9IGRhdGEudXBsb2FkX3BhcmFtcztcclxuICAgICAgICBjb25zdCB1cGxvYWRGb3JtRGF0YSA9IGZvcm1EYXRhaWZ5KHVwbG9hZFBhcmFtcyk7XHJcbiAgICAgICAgdXBsb2FkRm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSk7XHJcbiAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cGxvYWRQYXJhbXMudXJsLCB7XHJcbiAgICAgICAgICAgIGJvZHk6IHVwbG9hZEZvcm1EYXRhLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgYXNzZXJ0KHJlc3BvbnNlLm9rLCBhd2FpdCByZXNwb25zZS50ZXh0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZWdpc3RlckNvbnRlbnRDbGFzcyhjb250ZW50Q2xhc3M6IHR5cGVvZiBCYXNlQ29udGVudEl0ZW0pIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRDbGFzc2VzLnB1c2goY29udGVudENsYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UGFnZXMoY29uZmlnOiBJQ2FudmFzQ2FsbENvbmZpZyB8IG51bGwgPSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIFBhZ2UuZ2V0QWxsSW5Db3Vyc2UodGhpcywgY29uZmlnKSBhcyBQcm9taXNlPFBhZ2VbXT47XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZUNvbnRlbnRJdGVtIGV4dGVuZHMgQmFzZUNhbnZhc09iamVjdCB7XHJcbiAgICBzdGF0aWMgYm9keVByb3BlcnR5OiBzdHJpbmc7XHJcblxyXG4gICAgX2NvdXJzZTogQ291cnNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhc0RhdGE6IElDYW52YXNEYXRhLCBjb3Vyc2U6IENvdXJzZSkge1xyXG4gICAgICAgIHN1cGVyKGNhbnZhc0RhdGEpO1xyXG4gICAgICAgIHRoaXMuX2NvdXJzZSA9IGNvdXJzZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0IGNvbnRlbnRVcmxQYXJ0KCkge1xyXG4gICAgICAgIGFzc2VydCh0aGlzLmFsbENvbnRlbnRVcmxUZW1wbGF0ZSwgXCJOb3QgYSBjb250ZW50IHVybCB0ZW1wbGF0ZVwiKTtcclxuICAgICAgICBjb25zdCB1cmxUZXJtTWF0Y2ggPSAvXFwvKFtcXHdfXSspJC8uZXhlYyh0aGlzLmFsbENvbnRlbnRVcmxUZW1wbGF0ZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5hbGxDb250ZW50VXJsVGVtcGxhdGUsIHVybFRlcm1NYXRjaCk7XHJcbiAgICAgICAgaWYgKCF1cmxUZXJtTWF0Y2gpIHJldHVybiBudWxsO1xyXG4gICAgICAgIGNvbnN0IHVybFRlcm0gPSB1cmxUZXJtTWF0Y2hbMV07XHJcbiAgICAgICAgcmV0dXJuIHVybFRlcm07XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXQgY29udGVudFVybFJlZ2V4KCk6IFJlZ0V4cCB7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuY29udGVudFVybFRlbXBsYXRlLCBgQ2xhc3MgJHt0aGlzLnRvU3RyaW5nKCl9IGRvZXMgbm90IGhhdmUgYSBjb250ZW50IHVybCBwcm9wZXJ0eWApO1xyXG4gICAgICAgIGxldCBjb250ZW50U3RyaW5nID0gdGhpcy5jb250ZW50VXJsVGVtcGxhdGUucmVwbGFjZSgvXFx7W159XStcXH0vLCAnKFxcZCspJyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoY29udGVudFN0cmluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldElkRnJvbVVybCh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIC8vbGV0IF9jb250ZW50VXJsVGVtcGxhdGUgPSBcImNvdXJzZXMve2NvdXJzZV9pZH0vZGlzY3Vzc2lvbl90b3BpY3Mve2NvbnRlbnRfaWR9XCI7XHJcbiAgICAgICAgYXNzZXJ0KHRoaXMuY29udGVudFVybFRlbXBsYXRlKTtcclxuICAgICAgICAvLyB1c2UgdGhlIGNvbnRlbnQgdXJsIHRlbXBsYXRlIGFzIGEgYmFzaXMgdG8gZ2VuZXJhdGVcclxuICAgICAgICBsZXQgbWF0Y2ggPSAvY291cnNlc1xcLyhcXGQrKS8uZXhlYyh1cmwpO1xyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQobWF0Y2hbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRBbGxJbkNvdXJzZShjb3Vyc2U6IENvdXJzZSwgY29uZmlnOiBJQ2FudmFzQ2FsbENvbmZpZyB8IG51bGwgPSBudWxsKSB7XHJcbiAgICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0QWxsVXJsKGNvdXJzZS5pZCk7XHJcbiAgICAgICAgbGV0IGRhdGEgPSBhd2FpdCBnZXRBcGlQYWdlZERhdGEodXJsLCBjb25maWcpO1xyXG4gICAgICAgIHJldHVybiBkYXRhLm1hcChpdGVtID0+IG5ldyB0aGlzKGl0ZW0sIGNvdXJzZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjbGVhckFkZGVkQ29udGVudFRhZ3ModGV4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IG91dCA9IHRleHQucmVwbGFjZSgvPFxcLz9saW5rW14+XSo+L2csICcnKTtcclxuICAgICAgICBvdXQgPSBvdXQucmVwbGFjZSgvPFxcLz9zY3JpcHRbXj5dKj4vZywgJycpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGdldEZyb21VcmwodXJsOiBzdHJpbmcgfCBudWxsID0gbnVsbCwgY291cnNlOiBudWxsIHwgQ291cnNlID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh1cmwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdXJsID0gZG9jdW1lbnQuZG9jdW1lbnRVUkk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFwuY29tLywgJy5jb20vYXBpL3YxJylcclxuICAgICAgICBsZXQgZGF0YSA9IGF3YWl0IGZldGNoSnNvbih1cmwpO1xyXG4gICAgICAgIGlmICghY291cnNlKSB7XHJcbiAgICAgICAgICAgIGNvdXJzZSA9IGF3YWl0IENvdXJzZS5nZXRGcm9tVXJsKCk7XHJcbiAgICAgICAgICAgIGlmICghY291cnNlKSByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9JZiB0aGlzIGlzIGEgY29sbGVjdGlvbiBvZiBkYXRhLCB3ZSBjYW4ndCBwcm9jZXNzIGl0IGFzIGEgQ2FudmFzIE9iamVjdFxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBhc3NlcnQoIUFycmF5LmlzQXJyYXkoZGF0YSkpO1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcyhkYXRhLCBjb3Vyc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0IGJvZHlLZXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlDbGFzcy5ib2R5UHJvcGVydHk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGJvZHkoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJvZHlLZXkpIHJldHVybiBudWxsO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15Q2xhc3MuY2xlYXJBZGRlZENvbnRlbnRUYWdzKHRoaXMuY2FudmFzRGF0YVt0aGlzLmJvZHlLZXldKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZHVlQXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhbnZhc0RhdGEuaGFzT3duUHJvcGVydHkoJ2R1ZV9hdCcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5jYW52YXNEYXRhLmR1ZV9hdCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0RHVlQXQoZGF0ZTogRGF0ZSk6IFByb21pc2U8RGljdD4ge1xyXG4gICAgICAgIHRocm93IG5ldyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGR1ZUF0VGltZURlbHRhKHRpbWVEZWx0YTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmR1ZUF0KSByZXR1cm4gbnVsbDtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IERhdGUodGhpcy5kdWVBdCk7XHJcbiAgICAgICAgcmVzdWx0LnNldERhdGUocmVzdWx0LmdldERhdGUoKSArIHRpbWVEZWx0YSlcclxuXHJcblxyXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNldER1ZUF0KHJlc3VsdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvbnRlbnRVcmxQYXRoKCkge1xyXG4gICAgICAgIGxldCB1cmwgPSAoPHR5cGVvZiBCYXNlQ29udGVudEl0ZW0+dGhpcy5jb25zdHJ1Y3RvcikuY29udGVudFVybFRlbXBsYXRlO1xyXG4gICAgICAgIGFzc2VydCh1cmwpO1xyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCd7Y291cnNlX2lkfScsIHRoaXMuY291cnNlLmlkLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCd7Y29udGVudF9pZH0nLCB0aGlzLmlkLnRvU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb3Vyc2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvdXJzZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cGRhdGVDb250ZW50KHRleHQgPSBudWxsLCBuYW1lID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGE6IERpY3QgPSB7fTtcclxuICAgICAgICBjb25zdCBjb25zdHJ1Y3RvciA9IDx0eXBlb2YgQmFzZUNvbnRlbnRJdGVtPnRoaXMuY29uc3RydWN0b3I7XHJcbiAgICAgICAgYXNzZXJ0KGNvbnN0cnVjdG9yLmJvZHlQcm9wZXJ0eSk7XHJcbiAgICAgICAgYXNzZXJ0KGNvbnN0cnVjdG9yLm5hbWVQcm9wZXJ0eSk7XHJcbiAgICAgICAgY29uc3QgbmFtZVByb3AgPSBjb25zdHJ1Y3Rvci5uYW1lUHJvcGVydHk7XHJcbiAgICAgICAgY29uc3QgYm9keVByb3AgPSBjb25zdHJ1Y3Rvci5ib2R5UHJvcGVydHk7XHJcbiAgICAgICAgaWYgKHRleHQgJiYgYm9keVByb3ApIHtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXNEYXRhW2JvZHlQcm9wXSA9IHRleHQ7XHJcbiAgICAgICAgICAgIGRhdGFbYm9keVByb3BdID0gdGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuYW1lICYmIG5hbWVQcm9wKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzRGF0YVtuYW1lUHJvcF0gPSBuYW1lO1xyXG4gICAgICAgICAgICBkYXRhW25hbWVQcm9wXSA9IG5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5zYXZlRGF0YShkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRNZUluQW5vdGhlckNvdXJzZSh0YXJnZXRDb3Vyc2U6IENvdXJzZSkge1xyXG4gICAgICAgIGxldCBDb250ZW50Q2xhc3MgPSB0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBCYXNlQ29udGVudEl0ZW1cclxuICAgICAgICBsZXQgdGFyZ2V0cyA9IGF3YWl0IENvbnRlbnRDbGFzcy5nZXRBbGxJbkNvdXJzZSh0YXJnZXRDb3Vyc2UsIHtxdWVyeVBhcmFtczoge3NlYXJjaF90ZXJtOiB0aGlzLm5hbWV9fSlcclxuICAgICAgICByZXR1cm4gdGFyZ2V0cy5maW5kKCh0YXJnZXQ6IEJhc2VDb250ZW50SXRlbSkgPT4gdGFyZ2V0Lm5hbWUgPT0gdGhpcy5uYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBbGxMaW5rcygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLmJvZHlBc0VsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgYW5jaG9ycyA9IGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKTtcclxuICAgICAgICBjb25zdCB1cmxzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGxpbmsgb2YgYW5jaG9ycykgdXJscy5wdXNoKGxpbmsuaHJlZik7XHJcbiAgICAgICAgcmV0dXJuIHVybHM7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXQgYm9keUFzRWxlbWVudCgpIHtcclxuICAgICAgICBhc3NlcnQodGhpcy5ib2R5LCBcIlRoaXMgY29udGVudCBpdGVtIGhhcyBubyBib2R5IHByb3BlcnR5XCIpXHJcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gdGhpcy5ib2R5O1xyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH1cclxufVxyXG5cclxuQGNvbnRlbnRDbGFzc1xyXG5leHBvcnQgY2xhc3MgRGlzY3Vzc2lvbiBleHRlbmRzIEJhc2VDb250ZW50SXRlbSB7XHJcbiAgICBzdGF0aWMgbmFtZVByb3BlcnR5ID0gJ3RpdGxlJztcclxuICAgIHN0YXRpYyBib2R5UHJvcGVydHkgPSAnbWVzc2FnZSc7XHJcbiAgICBzdGF0aWMgY29udGVudFVybFRlbXBsYXRlID0gXCJjb3Vyc2VzL3tjb3Vyc2VfaWR9L2Rpc2N1c3Npb25fdG9waWNzL3tjb250ZW50X2lkfVwiO1xyXG4gICAgc3RhdGljIGFsbENvbnRlbnRVcmxUZW1wbGF0ZSA9IFwiY291cnNlcy97Y291cnNlX2lkfS9kaXNjdXNzaW9uX3RvcGljc1wiXHJcblxyXG59XHJcblxyXG5AY29udGVudENsYXNzXHJcbmV4cG9ydCBjbGFzcyBBc3NpZ25tZW50IGV4dGVuZHMgQmFzZUNvbnRlbnRJdGVtIHtcclxuICAgIHN0YXRpYyBuYW1lUHJvcGVydHkgPSAnbmFtZSc7XHJcbiAgICBzdGF0aWMgYm9keVByb3BlcnR5ID0gJ2Rlc2NyaXB0aW9uJztcclxuICAgIHN0YXRpYyBjb250ZW50VXJsVGVtcGxhdGUgPSBcImNvdXJzZXMve2NvdXJzZV9pZH0vYXNzaWdubWVudHMve2NvbnRlbnRfaWR9XCI7XHJcbiAgICBzdGF0aWMgYWxsQ29udGVudFVybFRlbXBsYXRlID0gXCJjb3Vyc2VzL3tjb3Vyc2VfaWR9L2Fzc2lnbm1lbnRzXCI7XHJcblxyXG4gICAgYXN5bmMgc2V0RHVlQXQoZHVlQXQ6IERhdGUpIHtcclxuICAgICAgICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMuc2F2ZURhdGEoeydhc3NpZ25tZW50W2R1ZV9hdF0nOiBkdWVBdC50b0lTT1N0cmluZygpfSk7XHJcbiAgICAgICAgdGhpcy5jYW52YXNEYXRhWydkdWVfYXQnXSA9IGR1ZUF0LnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5AY29udGVudENsYXNzXHJcbmV4cG9ydCBjbGFzcyBRdWl6IGV4dGVuZHMgQmFzZUNvbnRlbnRJdGVtIHtcclxuICAgIHN0YXRpYyBuYW1lUHJvcGVydHkgPSAndGl0bGUnO1xyXG4gICAgc3RhdGljIGJvZHlQcm9wZXJ0eSA9ICdkZXNjcmlwdGlvbic7XHJcbiAgICBzdGF0aWMgY29udGVudFVybFRlbXBsYXRlID0gXCJjb3Vyc2VzL3tjb3Vyc2VfaWR9L3F1aXp6ZXMve2NvbnRlbnRfaWR9XCI7XHJcbiAgICBzdGF0aWMgYWxsQ29udGVudFVybFRlbXBsYXRlID0gXCJjb3Vyc2VzL3tjb3Vyc2VfaWR9L3F1aXp6ZXNcIjtcclxuXHJcbiAgICBhc3luYyBzZXREdWVBdChkdWVBdDogRGF0ZSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0aGlzLnNhdmVEYXRhKHsncXVpeltkdWVfYXRdJzogZHVlQXQudG9JU09TdHJpbmcoKX0pXHJcbiAgICAgICAgdGhpcy5jYW52YXNEYXRhWydkdWVfYXQnXSA9IGR1ZUF0LnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbkBjb250ZW50Q2xhc3NcclxuZXhwb3J0IGNsYXNzIFBhZ2UgZXh0ZW5kcyBCYXNlQ29udGVudEl0ZW0ge1xyXG4gICAgc3RhdGljIGlkUHJvcGVydHkgPSAncGFnZV9pZCc7XHJcbiAgICBzdGF0aWMgbmFtZVByb3BlcnR5ID0gJ3RpdGxlJztcclxuICAgIHN0YXRpYyBib2R5UHJvcGVydHkgPSAnYm9keSc7XHJcbiAgICBzdGF0aWMgY29udGVudFVybFRlbXBsYXRlID0gXCJjb3Vyc2VzL3tjb3Vyc2VfaWR9L3BhZ2VzL3tjb250ZW50X2lkfVwiO1xyXG4gICAgc3RhdGljIGFsbENvbnRlbnRVcmxUZW1wbGF0ZSA9IFwiY291cnNlcy97Y291cnNlX2lkfS9wYWdlc1wiO1xyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRGcm9tVXJsKHVybDogc3RyaW5nIHwgbnVsbCA9IG51bGwsIGNvdXJzZTogbnVsbCB8IENvdXJzZSA9IG51bGwpIHtcclxuICAgICAgICBpZiAodXJsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHVybCA9IGRvY3VtZW50LmRvY3VtZW50VVJJO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcLmNvbS8sICcuY29tL2FwaS92MScpXHJcbiAgICAgICAgbGV0IGRhdGEgPSBhd2FpdCBmZXRjaEpzb24odXJsKTtcclxuICAgICAgICBpZiAoIWNvdXJzZSkge1xyXG4gICAgICAgICAgICBjb3Vyc2UgPSBhd2FpdCBDb3Vyc2UuZ2V0RnJvbVVybCgpO1xyXG4gICAgICAgICAgICBpZiAoIWNvdXJzZSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vSWYgdGhpcyBpcyBhIGNvbGxlY3Rpb24gb2YgZGF0YSwgd2UgY2FuJ3QgcHJvY2VzcyBpdCBhcyBhIENhbnZhcyBPYmplY3RcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgYXNzZXJ0KCFBcnJheS5pc0FycmF5KGRhdGEpKTtcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMoZGF0YSwgY291cnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZ2V0UmV2aXNpb25zKCkge1xyXG4gICAgICAgIHJldHVybiBnZXRQYWdlZERhdGEoYCR7dGhpcy5jb250ZW50VXJsUGF0aH0vcmV2aXNpb25zYCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcmV2ZXJ0TGFzdENoYW5nZVNldChzdGVwc0JhY2sgPSAxKSB7XHJcbiAgICAgICAgbGV0IHJldmlzaW9ucyA9IGF3YWl0IHRoaXMuZ2V0UmV2aXNpb25zKCk7XHJcbiAgICAgICAgcmV2aXNpb25zLnNvcnQoKGEsIGIpID0+IGJbJ3JldmlzaW9uX2lkJ10gLSBhWydyZXZpc2lvbl9pZCddKTtcclxuICAgICAgICBpZiAocmV2aXNpb25zLmxlbmd0aCA8PSBzdGVwc0JhY2spIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBUcmllZCB0byByZXZlcnQgJHt0aGlzLm5hbWV9IGJ1dCB0aGVyZSBpc24ndCBhIHByZXZpb3VzIHJldmlzaW9uYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmV2aXNpb24gPSByZXZpc2lvbnNbc3RlcHNCYWNrXTtcclxuICAgICAgICBhd2FpdCB0aGlzLmFwcGx5UmV2aXNpb24ocmV2aXNpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlc2V0Q29udGVudChyZXZpc2lvbklkID0gMSkge1xyXG4gICAgICAgIGxldCByZXZpc2lvbnMgPSBhd2FpdCB0aGlzLmdldFJldmlzaW9ucygpO1xyXG4gICAgICAgIGxldCByZXZpc2lvbiA9IHJldmlzaW9ucy5maW5kKHIgPT4gclsncmV2aXNpb25faWQnXSA9PT0gcmV2aXNpb25JZCk7XHJcbiAgICAgICAgaWYgKCFyZXZpc2lvbikgdGhyb3cgbmV3IEVycm9yKGBObyByZXZpc2lvbiBmb3VuZCBmb3IgJHtyZXZpc2lvbklkfWApO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwbHlSZXZpc2lvbihyZXZpc2lvbik7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYXBwbHlSZXZpc2lvbihyZXZpc2lvbjogRGljdCkge1xyXG4gICAgICAgIGNvbnN0IHJldmlzaW9uSWQgPSByZXZpc2lvblsncmV2aXNpb25faWQnXTtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgZmV0Y2hPbmVBcGlKc29uKGAke3RoaXMuY29udGVudFVybFBhdGh9L3JldmlzaW9ucy8ke3JldmlzaW9uSWR9P3JldmlzaW9uX2lkPSR7cmV2aXNpb25JZH1gKTtcclxuICAgICAgICB0aGlzLmNhbnZhc0RhdGFbdGhpcy5ib2R5S2V5XSA9IHJlc3VsdFsnYm9keSddO1xyXG4gICAgICAgIHRoaXMuY2FudmFzRGF0YVt0aGlzLm5hbWVLZXldID0gcmVzdWx0Wyd0aXRsZSddO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBib2R5KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzRGF0YVt0aGlzLmJvZHlLZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVwZGF0ZUNvbnRlbnQodGV4dCA9IG51bGwsIG5hbWUgPSBudWxsKSB7XHJcbiAgICAgICAgbGV0IGRhdGE6IERpY3QgPSB7fTtcclxuICAgICAgICBpZiAodGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhc0RhdGFbdGhpcy5ib2R5S2V5XSA9IHRleHQ7XHJcbiAgICAgICAgICAgIGRhdGFbJ3dpa2lfcGFnZVtib2R5XSddID0gdGV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXNEYXRhW3RoaXMubmFtZUtleV0gPSBuYW1lO1xyXG4gICAgICAgICAgICBkYXRhW3RoaXMubmFtZUtleV0gPSBuYW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZURhdGEoZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBSdWJyaWMgZXh0ZW5kcyBCYXNlQ29udGVudEl0ZW0ge1xyXG4gICAgc3RhdGljIG5hbWVQcm9wZXJ0eSA9ICd0aXRsZSc7XHJcbiAgICBzdGF0aWMgY29udGVudFVybFRlbXBsYXRlID0gXCJjb3Vyc2VzL3tjb3Vyc2VfaWR9L3J1YnJpY3Mve2NvbnRlbnRfaWR9XCI7XHJcbiAgICBzdGF0aWMgYWxsQ29udGVudFVybFRlbXBsYXRlID0gXCJjb3Vyc2VzL3tjb3Vyc2VfaWR9L3J1YnJpY3NcIjtcclxuXHJcbiAgICBhc3luYyBhc3NvY2lhdGlvbnMocmVsb2FkID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoJ2Fzc29jaWF0aW9ucycgaW4gdGhpcy5jYW52YXNEYXRhICYmICFyZWxvYWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzRGF0YVsnYXNzb2NpYXRpb25zJ107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZGF0YSA9IGF3YWl0IHRoaXMubXlDbGFzcy5nZXREYXRhQnlJZCh0aGlzLmlkLCB0aGlzLmNvdXJzZSwge3BhcmFtczogeydpbmNsdWRlJzogWydhc3NvY2lhdGlvbnMnXX19KTtcclxuICAgICAgICBsZXQgYXNzb2NpYXRpb25zID0gZGF0YVsnYXNzb2NpYXRpb25zJ10ubWFwKChkYXRhOiBJQ2FudmFzRGF0YSkgPT4gbmV3IFJ1YnJpY0Fzc29jaWF0aW9uKGRhdGEsIHRoaXMuY291cnNlKSk7XHJcbiAgICAgICAgdGhpcy5jYW52YXNEYXRhWydhc3NvY2lhdGlvbnMnXSA9IGFzc29jaWF0aW9ucztcclxuICAgICAgICByZXR1cm4gYXNzb2NpYXRpb25zO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1YnJpY0Fzc29jaWF0aW9uIGV4dGVuZHMgQmFzZUNvbnRlbnRJdGVtIHtcclxuICAgIHN0YXRpYyBjb250ZW50VXJsVGVtcGxhdGUgPSBcImNvdXJzZXMve2NvdXJzZV9pZH0vcnVicmljX2Fzc29jaWF0aW9ucy97Y29udGVudF9pZH1cIjtcclxuICAgIHN0YXRpYyBhbGxDb250ZW50VXJsVGVtcGxhdGUgPSBcImNvdXJzZXMve2NvdXJzZV9pZH0vcnVicmljX2Fzc29jaWF0aW9uc1wiO1xyXG5cclxuICAgIGdldCB1c2VGb3JHcmFkaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhc0RhdGFbJ3VzZV9mb3JfZ3JhZGluZyddO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHNldFVzZUZvckdyYWRpbmcodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLmNhbnZhc0RhdGFbJ3VzZV9mb3JfZ3JhZGluZyddID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2F2ZURhdGEoeydydWJyaWNfYXNzb2NpYXRpb25bdXNlX2Zvcl9ncmFkaW5nXSc6IHZhbHVlfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUZXJtIGV4dGVuZHMgQmFzZUNhbnZhc09iamVjdCB7XHJcblxyXG4gICAgZ2V0IGNvZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzRGF0YVsnbmFtZSddO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRUZXJtKGNvZGU6IHN0cmluZywgd29ya2Zsb3dTdGF0ZTogJ2FsbCcgfCAnYWN0aXZlJyB8ICdkZWxldGVkJyA9ICdhbGwnLCBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY29uc3QgdGVybXMgPSBhd2FpdCB0aGlzLnNlYXJjaFRlcm1zKGNvZGUsIHdvcmtmbG93U3RhdGUsIGNvbmZpZyk7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRlcm1zKSB8fCB0ZXJtcy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlcm1zWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZXRUZXJtQnlJZCh0ZXJtSWQ6IG51bWJlciwgY29uZmlnOiBJQ2FudmFzQ2FsbENvbmZpZyB8IG51bGwgPSBudWxsKSB7XHJcbiAgICAgICAgbGV0IGFjY291bnQgPSBhd2FpdCBBY2NvdW50LmdldFJvb3RBY2NvdW50KCk7XHJcbiAgICAgICAgbGV0IHVybCA9IGBhY2NvdW50cy8ke2FjY291bnQuaWR9L3Rlcm1zLyR7dGVybUlkfWA7XHJcbiAgICAgICAgbGV0IHRlcm1EYXRhID0gYXdhaXQgZmV0Y2hBcGlKc29uKHVybCkgYXMgSUNhbnZhc0RhdGEgfCBudWxsO1xyXG4gICAgICAgIGlmICh0ZXJtRGF0YSkgcmV0dXJuIG5ldyBUZXJtKHRlcm1EYXRhKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2V0QWxsQWN0aXZlVGVybXMoY29uZmlnOiBJQ2FudmFzQ2FsbENvbmZpZyB8IG51bGwgPSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VhcmNoVGVybXMobnVsbCwgJ2FjdGl2ZScsIGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIHNlYXJjaFRlcm1zKFxyXG4gICAgICAgIGNvZGU6IHN0cmluZyB8IG51bGwgPSBudWxsLFxyXG4gICAgICAgIHdvcmtmbG93U3RhdGU6ICdhbGwnIHwgJ2FjdGl2ZScgfCAnZGVsZXRlZCcgPSAnYWxsJyxcclxuICAgICAgICBjb25maWc6IElDYW52YXNDYWxsQ29uZmlnIHwgbnVsbCA9IG51bGwpIHtcclxuXHJcbiAgICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xyXG4gICAgICAgIGNvbmZpZy5xdWVyeVBhcmFtcyA9IGNvbmZpZy5xdWVyeVBhcmFtcyB8fCB7fTtcclxuXHJcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW1zID0gY29uZmlnLnF1ZXJ5UGFyYW1zO1xyXG4gICAgICAgIGlmICh3b3JrZmxvd1N0YXRlKSBxdWVyeVBhcmFtc1snd29ya2Zsb3dfc3RhdGUnXSA9IHdvcmtmbG93U3RhdGU7XHJcbiAgICAgICAgaWYgKGNvZGUpIHF1ZXJ5UGFyYW1zWyd0ZXJtX25hbWUnXSA9IGNvZGU7XHJcbiAgICAgICAgbGV0IHJvb3RBY2NvdW50ID0gYXdhaXQgQWNjb3VudC5nZXRSb290QWNjb3VudCgpO1xyXG4gICAgICAgIGFzc2VydChyb290QWNjb3VudCk7XHJcbiAgICAgICAgbGV0IHVybCA9IGBhY2NvdW50cy8ke3Jvb3RBY2NvdW50LmlkfS90ZXJtc2A7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldEFwaVBhZ2VkRGF0YSh1cmwsIGNvbmZpZyk7XHJcbiAgICAgICAgbGV0IHRlcm1zOiBJQ2FudmFzRGF0YVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgZGF0dW0gb2YgZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0dW0uaGFzT3duUHJvcGVydHkoJ2Vucm9sbG1lbnRfdGVybXMnKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGVybURhdGEgb2YgZGF0dW1bJ2Vucm9sbG1lbnRfdGVybXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlcm1zLnB1c2godGVybURhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGVybXMucHVzaChkYXR1bSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2codGVybXMpO1xyXG5cclxuICAgICAgICBpZiAoIXRlcm1zIHx8IHRlcm1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRlcm1zLm1hcCh0ZXJtID0+IG5ldyBUZXJtKHRlcm0pKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3RhcnREYXRlKCk6IERhdGUge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmRhdGEuc3RhcnRfYXQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBlbmREYXRlKCk6IERhdGUge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmRhdGEuZW5kX2F0KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBOb3RJbXBsZW1lbnRlZEV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvdXJzZU5vdEZvdW5kRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gY29udGVudENsYXNzKG9yaWdpbmFsQ2xhc3M6IHR5cGVvZiBCYXNlQ29udGVudEl0ZW0sIF9jb250ZXh0OiBDbGFzc0RlY29yYXRvckNvbnRleHQpIHtcclxuICAgIC8vb3JpZ2luYWxDbGFzcy5jb250ZW50VXJsUGFydCA9XHJcbiAgICBDb3Vyc2UucmVnaXN0ZXJDb250ZW50Q2xhc3Mob3JpZ2luYWxDbGFzcyk7XHJcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyKGFyZykge1xuICByZXR1cm4gYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnXG4gICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5maWxsID09PSAnZnVuY3Rpb24nXG4gICAgJiYgdHlwZW9mIGFyZy5yZWFkVUludDggPT09ICdmdW5jdGlvbic7XG59IiwiLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC91dGlsL3R5cGVzLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzExMmNjN2MyNzU1MTI1NGFhMmIxNzA5OGZiNzc0ODY3ZjA1ZWQwZDlcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcmd1bWVudHNPYmplY3QgPSByZXF1aXJlKCdpcy1hcmd1bWVudHMnKTtcbnZhciBpc0dlbmVyYXRvckZ1bmN0aW9uID0gcmVxdWlyZSgnaXMtZ2VuZXJhdG9yLWZ1bmN0aW9uJyk7XG52YXIgd2hpY2hUeXBlZEFycmF5ID0gcmVxdWlyZSgnd2hpY2gtdHlwZWQtYXJyYXknKTtcbnZhciBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCdpcy10eXBlZC1hcnJheScpO1xuXG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gIHJldHVybiBmLmNhbGwuYmluZChmKTtcbn1cblxudmFyIEJpZ0ludFN1cHBvcnRlZCA9IHR5cGVvZiBCaWdJbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIFN5bWJvbFN1cHBvcnRlZCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgT2JqZWN0VG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxudmFyIG51bWJlclZhbHVlID0gdW5jdXJyeVRoaXMoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mKTtcbnZhciBzdHJpbmdWYWx1ZSA9IHVuY3VycnlUaGlzKFN0cmluZy5wcm90b3R5cGUudmFsdWVPZik7XG52YXIgYm9vbGVhblZhbHVlID0gdW5jdXJyeVRoaXMoQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZik7XG5cbmlmIChCaWdJbnRTdXBwb3J0ZWQpIHtcbiAgdmFyIGJpZ0ludFZhbHVlID0gdW5jdXJyeVRoaXMoQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mKTtcbn1cblxuaWYgKFN5bWJvbFN1cHBvcnRlZCkge1xuICB2YXIgc3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YpO1xufVxuXG5mdW5jdGlvbiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBwcm90b3R5cGVWYWx1ZU9mKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgcHJvdG90eXBlVmFsdWVPZih2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzLmlzQXJndW1lbnRzT2JqZWN0ID0gaXNBcmd1bWVudHNPYmplY3Q7XG5leHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBpc0dlbmVyYXRvckZ1bmN0aW9uO1xuZXhwb3J0cy5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG5cbi8vIFRha2VuIGZyb20gaGVyZSBhbmQgbW9kaWZpZWQgZm9yIGJldHRlciBicm93c2VyIHN1cHBvcnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcC1pcy1wcm9taXNlL2Jsb2IvY2RhMzVhNTEzYmRhMDNmOTc3YWQ1Y2RlM2EwNzlkMjM3ZTgyZDdlZi9pbmRleC5qc1xuZnVuY3Rpb24gaXNQcm9taXNlKGlucHV0KSB7XG5cdHJldHVybiAoXG5cdFx0KFxuXHRcdFx0dHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0XHRpbnB1dCBpbnN0YW5jZW9mIFByb21pc2Vcblx0XHQpIHx8XG5cdFx0KFxuXHRcdFx0aW5wdXQgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiBpbnB1dC50aGVuID09PSAnZnVuY3Rpb24nICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQuY2F0Y2ggPT09ICdmdW5jdGlvbidcblx0XHQpXG5cdCk7XG59XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KSB7XG4gICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIGlzVHlwZWRBcnJheSh2YWx1ZSkgfHxcbiAgICBpc0RhdGFWaWV3KHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyVmlldyA9IGlzQXJyYXlCdWZmZXJWaWV3O1xuXG5cbmZ1bmN0aW9uIGlzVWludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQ4QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQ4QXJyYXkgPSBpc1VpbnQ4QXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDhDbGFtcGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50OENsYW1wZWRBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDhDbGFtcGVkQXJyYXkgPSBpc1VpbnQ4Q2xhbXBlZEFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDE2QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQxNkFycmF5ID0gaXNVaW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50MzJBcnJheSA9IGlzVWludDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50OEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50OEFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQ4QXJyYXkgPSBpc0ludDhBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MTZBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MTZBcnJheSA9IGlzSW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MzJBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MzJBcnJheSA9IGlzSW50MzJBcnJheTtcblxuZnVuY3Rpb24gaXNGbG9hdDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdGbG9hdDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc0Zsb2F0MzJBcnJheSA9IGlzRmxvYXQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0Zsb2F0NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0Zsb2F0NjRBcnJheSc7XG59XG5leHBvcnRzLmlzRmxvYXQ2NEFycmF5ID0gaXNGbG9hdDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnSW50NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0JpZ0ludDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0JpZ0ludDY0QXJyYXkgPSBpc0JpZ0ludDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnVWludDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdCaWdVaW50NjRBcnJheSc7XG59XG5leHBvcnRzLmlzQmlnVWludDY0QXJyYXkgPSBpc0JpZ1VpbnQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcF0nO1xufVxuaXNNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc01hcFRvU3RyaW5nKG5ldyBNYXAoKSlcbik7XG5cbmZ1bmN0aW9uIGlzTWFwKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc01hcFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzTWFwVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIE1hcDtcbn1cbmV4cG9ydHMuaXNNYXAgPSBpc01hcDtcblxuZnVuY3Rpb24gaXNTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXRdJztcbn1cbmlzU2V0VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNTZXRUb1N0cmluZyhuZXcgU2V0KCkpXG4pO1xuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzU2V0VG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNTZXRUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2V0O1xufVxuZXhwb3J0cy5pc1NldCA9IGlzU2V0O1xuXG5mdW5jdGlvbiBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrTWFwXSc7XG59XG5pc1dlYWtNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrTWFwVG9TdHJpbmcobmV3IFdlYWtNYXAoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1dlYWtNYXBUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgV2Vha01hcDtcbn1cbmV4cG9ydHMuaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuXG5mdW5jdGlvbiBpc1dlYWtTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrU2V0XSc7XG59XG5pc1dlYWtTZXRUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrU2V0VG9TdHJpbmcobmV3IFdlYWtTZXQoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzV2Vha1NldFRvU3RyaW5nKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cbmlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgQXJyYXlCdWZmZXIoKSlcbik7XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGFWaWV3XSc7XG59XG5pc0RhdGFWaWV3VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzRGF0YVZpZXdUb1N0cmluZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpLCAwLCAxKSlcbik7XG5mdW5jdGlvbiBpc0RhdGFWaWV3KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIERhdGFWaWV3O1xufVxuZXhwb3J0cy5pc0RhdGFWaWV3ID0gaXNEYXRhVmlldztcblxuLy8gU3RvcmUgYSBjb3B5IG9mIFNoYXJlZEFycmF5QnVmZmVyIGluIGNhc2UgaXQncyBkZWxldGVkIGVsc2V3aGVyZVxudmFyIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgPyBTaGFyZWRBcnJheUJ1ZmZlciA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTaGFyZWRBcnJheUJ1ZmZlcl0nO1xufVxuZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKG5ldyBTaGFyZWRBcnJheUJ1ZmZlckNvcHkoKSk7XG4gIH1cblxuICByZXR1cm4gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5O1xufVxuZXhwb3J0cy5pc1NoYXJlZEFycmF5QnVmZmVyID0gaXNTaGFyZWRBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNBc3luY0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJztcbn1cbmV4cG9ydHMuaXNBc3luY0Z1bmN0aW9uID0gaXNBc3luY0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc01hcEl0ZXJhdG9yKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcCBJdGVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc01hcEl0ZXJhdG9yID0gaXNNYXBJdGVyYXRvcjtcblxuZnVuY3Rpb24gaXNTZXRJdGVyYXRvcih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXQgSXRlcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNTZXRJdGVyYXRvciA9IGlzU2V0SXRlcmF0b3I7XG5cbmZ1bmN0aW9uIGlzR2VuZXJhdG9yT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEdlbmVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc0dlbmVyYXRvck9iamVjdCA9IGlzR2VuZXJhdG9yT2JqZWN0O1xuXG5mdW5jdGlvbiBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2ViQXNzZW1ibHkuTW9kdWxlXSc7XG59XG5leHBvcnRzLmlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZSA9IGlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZTtcblxuZnVuY3Rpb24gaXNOdW1iZXJPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIG51bWJlclZhbHVlKTtcbn1cbmV4cG9ydHMuaXNOdW1iZXJPYmplY3QgPSBpc051bWJlck9iamVjdDtcblxuZnVuY3Rpb24gaXNTdHJpbmdPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN0cmluZ1ZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTdHJpbmdPYmplY3QgPSBpc1N0cmluZ09iamVjdDtcblxuZnVuY3Rpb24gaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBib29sZWFuVmFsdWUpO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW5PYmplY3QgPSBpc0Jvb2xlYW5PYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQmlnSW50T2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBCaWdJbnRTdXBwb3J0ZWQgJiYgY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgYmlnSW50VmFsdWUpO1xufVxuZXhwb3J0cy5pc0JpZ0ludE9iamVjdCA9IGlzQmlnSW50T2JqZWN0O1xuXG5mdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gU3ltYm9sU3VwcG9ydGVkICYmIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN5bWJvbFZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTeW1ib2xPYmplY3QgPSBpc1N5bWJvbE9iamVjdDtcblxuZnVuY3Rpb24gaXNCb3hlZFByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzU3RyaW5nT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzQm9vbGVhbk9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc0JpZ0ludE9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N5bWJvbE9iamVjdCh2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNCb3hlZFByaW1pdGl2ZSA9IGlzQm94ZWRQcmltaXRpdmU7XG5cbmZ1bmN0aW9uIGlzQW55QXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHxcbiAgICBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FueUFycmF5QnVmZmVyID0gaXNBbnlBcnJheUJ1ZmZlcjtcblxuWydpc1Byb3h5JywgJ2lzRXh0ZXJuYWwnLCAnaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbWV0aG9kLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgaXMgbm90IHN1cHBvcnRlZCBpbiB1c2VybGFuZCcpO1xuICAgIH1cbiAgfSk7XG59KTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZSZWdleCA9IC9eJC87XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKSB7XG4gIHZhciBkZWJ1Z0VudiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUc7XG4gIGRlYnVnRW52ID0gZGVidWdFbnYucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCs/Ll0vZywgJ1xcXFwkJicpXG4gICAgLnJlcGxhY2UoL1xcKi9nLCAnLionKVxuICAgIC5yZXBsYWNlKC8sL2csICckfF4nKVxuICAgIC50b1VwcGVyQ2FzZSgpO1xuICBkZWJ1Z0VudlJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBkZWJ1Z0VudiArICckJywgJ2knKTtcbn1cbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAoZGVidWdFbnZSZWdleC50ZXN0KHNldCkpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc2xpY2UoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0cy50eXBlcyA9IHJlcXVpcmUoJy4vc3VwcG9ydC90eXBlcycpO1xuXG5mdW5jdGlvbiBpc0FycmF5KGFyKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGFyKTtcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuZXhwb3J0cy50eXBlcy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcbmV4cG9ydHMudHlwZXMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5leHBvcnRzLnR5cGVzLmlzTmF0aXZlRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gcmVxdWlyZSgnLi9zdXBwb3J0L2lzQnVmZmVyJyk7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IuYmluZChudWxsLCBudWxsLCByZXQpKSB9LFxuICAgICAgICAgICAgZnVuY3Rpb24ocmVqKSB7IHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2tpZnlPblJlamVjdGVkLmJpbmQobnVsbCwgcmVqLCBjYikpIH0pO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNhbGxiYWNraWZpZWQsIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYWxsYmFja2lmaWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKSk7XG4gIHJldHVybiBjYWxsYmFja2lmaWVkO1xufVxuZXhwb3J0cy5jYWxsYmFja2lmeSA9IGNhbGxiYWNraWZ5O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFwid2ViZXh0ZW5zaW9uLXBvbHlmaWxsXCIsIFtcIm1vZHVsZVwiXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KG1vZHVsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZCk7XG4gICAgZ2xvYmFsLmJyb3dzZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24gKG1vZHVsZSkge1xuICAvKiB3ZWJleHRlbnNpb24tcG9seWZpbGwgLSB2MC4xMC4wIC0gRnJpIEF1ZyAxMiAyMDIyIDE5OjQyOjQ0ICovXG5cbiAgLyogLSotIE1vZGU6IGluZGVudC10YWJzLW1vZGU6IG5pbDsganMtaW5kZW50LWxldmVsOiAyIC0qLSAqL1xuXG4gIC8qIHZpbTogc2V0IHN0cz0yIHN3PTIgZXQgdHc9ODA6ICovXG5cbiAgLyogVGhpcyBTb3VyY2UgQ29kZSBGb3JtIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBNb3ppbGxhIFB1YmxpY1xuICAgKiBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4gICAqIGZpbGUsIFlvdSBjYW4gb2J0YWluIG9uZSBhdCBodHRwOi8vbW96aWxsYS5vcmcvTVBMLzIuMC8uICovXG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGlmICghZ2xvYmFsVGhpcy5jaHJvbWU/LnJ1bnRpbWU/LmlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBzY3JpcHQgc2hvdWxkIG9ubHkgYmUgbG9hZGVkIGluIGEgYnJvd3NlciBleHRlbnNpb24uXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzLmJyb3dzZXIgPT09IFwidW5kZWZpbmVkXCIgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbFRoaXMuYnJvd3NlcikgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBjb25zdCBDSFJPTUVfU0VORF9NRVNTQUdFX0NBTExCQUNLX05PX1JFU1BPTlNFX01FU1NBR0UgPSBcIlRoZSBtZXNzYWdlIHBvcnQgY2xvc2VkIGJlZm9yZSBhIHJlc3BvbnNlIHdhcyByZWNlaXZlZC5cIjsgLy8gV3JhcHBpbmcgdGhlIGJ1bGsgb2YgdGhpcyBwb2x5ZmlsbCBpbiBhIG9uZS10aW1lLXVzZSBmdW5jdGlvbiBpcyBhIG1pbm9yXG4gICAgLy8gb3B0aW1pemF0aW9uIGZvciBGaXJlZm94LiBTaW5jZSBTcGlkZXJtb25rZXkgZG9lcyBub3QgZnVsbHkgcGFyc2UgdGhlXG4gICAgLy8gY29udGVudHMgb2YgYSBmdW5jdGlvbiB1bnRpbCB0aGUgZmlyc3QgdGltZSBpdCdzIGNhbGxlZCwgYW5kIHNpbmNlIGl0IHdpbGxcbiAgICAvLyBuZXZlciBhY3R1YWxseSBuZWVkIHRvIGJlIGNhbGxlZCwgdGhpcyBhbGxvd3MgdGhlIHBvbHlmaWxsIHRvIGJlIGluY2x1ZGVkXG4gICAgLy8gaW4gRmlyZWZveCBuZWFybHkgZm9yIGZyZWUuXG5cbiAgICBjb25zdCB3cmFwQVBJcyA9IGV4dGVuc2lvbkFQSXMgPT4ge1xuICAgICAgLy8gTk9URTogYXBpTWV0YWRhdGEgaXMgYXNzb2NpYXRlZCB0byB0aGUgY29udGVudCBvZiB0aGUgYXBpLW1ldGFkYXRhLmpzb24gZmlsZVxuICAgICAgLy8gYXQgYnVpbGQgdGltZSBieSByZXBsYWNpbmcgdGhlIGZvbGxvd2luZyBcImluY2x1ZGVcIiB3aXRoIHRoZSBjb250ZW50IG9mIHRoZVxuICAgICAgLy8gSlNPTiBmaWxlLlxuICAgICAgY29uc3QgYXBpTWV0YWRhdGEgPSB7XG4gICAgICAgIFwiYWxhcm1zXCI6IHtcbiAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY2xlYXJBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJib29rbWFya3NcIjoge1xuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q2hpbGRyZW5cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRSZWNlbnRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRTdWJUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VHJlZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVUcmVlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiYnJvd3NlckFjdGlvblwiOiB7XG4gICAgICAgICAgXCJkaXNhYmxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZW5hYmxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3JcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRCYWRnZVRleHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib3BlblBvcHVwXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3JcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRCYWRnZVRleHRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRJY29uXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0UG9wdXBcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRUaXRsZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImJyb3dzaW5nRGF0YVwiOiB7XG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVDYWNoZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUNvb2tpZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVEb3dubG9hZHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVGb3JtRGF0YVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUhpc3RvcnlcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVMb2NhbFN0b3JhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVQYXNzd29yZHNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVQbHVnaW5EYXRhXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0dGluZ3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb21tYW5kc1wiOiB7XG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjb250ZXh0TWVudXNcIjoge1xuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiY29va2llc1wiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxDb29raWVTdG9yZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXZ0b29sc1wiOiB7XG4gICAgICAgICAgXCJpbnNwZWN0ZWRXaW5kb3dcIjoge1xuICAgICAgICAgICAgXCJldmFsXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyLFxuICAgICAgICAgICAgICBcInNpbmdsZUNhbGxiYWNrQXJnXCI6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBhbmVsc1wiOiB7XG4gICAgICAgICAgICBcImNyZWF0ZVwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAzLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMyxcbiAgICAgICAgICAgICAgXCJzaW5nbGVDYWxsYmFja0FyZ1wiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJlbGVtZW50c1wiOiB7XG4gICAgICAgICAgICAgIFwiY3JlYXRlU2lkZWJhclBhbmVcIjoge1xuICAgICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZG93bmxvYWRzXCI6IHtcbiAgICAgICAgICBcImNhbmNlbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRvd25sb2FkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXJhc2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRGaWxlSWNvblwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm9wZW5cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwiZmFsbGJhY2tUb05vQ2FsbGJhY2tcIjogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXVzZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJlbW92ZUZpbGVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXN1bWVcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZWFyY2hcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzaG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiZXh0ZW5zaW9uXCI6IHtcbiAgICAgICAgICBcImlzQWxsb3dlZEZpbGVTY2hlbWVBY2Nlc3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpc0FsbG93ZWRJbmNvZ25pdG9BY2Nlc3NcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJoaXN0b3J5XCI6IHtcbiAgICAgICAgICBcImFkZFVybFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlbGV0ZUFsbFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlbGV0ZVJhbmdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVsZXRlVXJsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0VmlzaXRzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VhcmNoXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaTE4blwiOiB7XG4gICAgICAgICAgXCJkZXRlY3RMYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEFjY2VwdExhbmd1YWdlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImlkZW50aXR5XCI6IHtcbiAgICAgICAgICBcImxhdW5jaFdlYkF1dGhGbG93XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiaWRsZVwiOiB7XG4gICAgICAgICAgXCJxdWVyeVN0YXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWFuYWdlbWVudFwiOiB7XG4gICAgICAgICAgXCJnZXRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRBbGxcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRTZWxmXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0RW5hYmxlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVuaW5zdGFsbFNlbGZcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJub3RpZmljYXRpb25zXCI6IHtcbiAgICAgICAgICBcImNsZWFyXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0UGVybWlzc2lvbkxldmVsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwicGFnZUFjdGlvblwiOiB7XG4gICAgICAgICAgXCJnZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaGlkZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldEljb25cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRQb3B1cFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNldFRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDEsXG4gICAgICAgICAgICBcImZhbGxiYWNrVG9Ob0NhbGxiYWNrXCI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2hvd1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJmYWxsYmFja1RvTm9DYWxsYmFja1wiOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInBlcm1pc3Npb25zXCI6IHtcbiAgICAgICAgICBcImNvbnRhaW5zXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVxdWVzdFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInJ1bnRpbWVcIjoge1xuICAgICAgICAgIFwiZ2V0QmFja2dyb3VuZFBhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRQbGF0Zm9ybUluZm9cIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJvcGVuT3B0aW9uc1BhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZXF1ZXN0VXBkYXRlQ2hlY2tcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZW5kTWVzc2FnZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInNlbmROYXRpdmVNZXNzYWdlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0VW5pbnN0YWxsVVJMXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic2Vzc2lvbnNcIjoge1xuICAgICAgICAgIFwiZ2V0RGV2aWNlc1wiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFJlY2VudGx5Q2xvc2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVzdG9yZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInN0b3JhZ2VcIjoge1xuICAgICAgICAgIFwibG9jYWxcIjoge1xuICAgICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtYW5hZ2VkXCI6IHtcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInN5bmNcIjoge1xuICAgICAgICAgICAgXCJjbGVhclwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnZXRCeXRlc0luVXNlXCI6IHtcbiAgICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNldFwiOiB7XG4gICAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ0YWJzXCI6IHtcbiAgICAgICAgICBcImNhcHR1cmVWaXNpYmxlVGFiXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGV0ZWN0TGFuZ3VhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkaXNjYXJkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZHVwbGljYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXhlY3V0ZVNjcmlwdFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldEN1cnJlbnRcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDAsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRab29tXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Wm9vbVNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ29CYWNrXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ29Gb3J3YXJkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaGlnaGxpZ2h0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW5zZXJ0Q1NTXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibW92ZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMixcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInF1ZXJ5XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVsb2FkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlQ1NTXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2VuZE1lc3NhZ2VcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDIsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogM1xuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzZXRab29tXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic2V0Wm9vbVNldHRpbmdzXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwidG9wU2l0ZXNcIjoge1xuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwid2ViTmF2aWdhdGlvblwiOiB7XG4gICAgICAgICAgXCJnZXRBbGxGcmFtZXNcIjoge1xuICAgICAgICAgICAgXCJtaW5BcmdzXCI6IDEsXG4gICAgICAgICAgICBcIm1heEFyZ3NcIjogMVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZXRGcmFtZVwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMSxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndlYlJlcXVlc3RcIjoge1xuICAgICAgICAgIFwiaGFuZGxlckJlaGF2aW9yQ2hhbmdlZFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAwXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIndpbmRvd3NcIjoge1xuICAgICAgICAgIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0XCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0QWxsXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2V0Q3VycmVudFwiOiB7XG4gICAgICAgICAgICBcIm1pbkFyZ3NcIjogMCxcbiAgICAgICAgICAgIFwibWF4QXJnc1wiOiAxXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdldExhc3RGb2N1c2VkXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAwLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAxLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlXCI6IHtcbiAgICAgICAgICAgIFwibWluQXJnc1wiOiAyLFxuICAgICAgICAgICAgXCJtYXhBcmdzXCI6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhhcGlNZXRhZGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFwaS1tZXRhZGF0YS5qc29uIGhhcyBub3QgYmVlbiBpbmNsdWRlZCBpbiBicm93c2VyLXBvbHlmaWxsXCIpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBBIFdlYWtNYXAgc3ViY2xhc3Mgd2hpY2ggY3JlYXRlcyBhbmQgc3RvcmVzIGEgdmFsdWUgZm9yIGFueSBrZXkgd2hpY2ggZG9lc1xuICAgICAgICogbm90IGV4aXN0IHdoZW4gYWNjZXNzZWQsIGJ1dCBiZWhhdmVzIGV4YWN0bHkgYXMgYW4gb3JkaW5hcnkgV2Vha01hcFxuICAgICAgICogb3RoZXJ3aXNlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNyZWF0ZUl0ZW1cbiAgICAgICAqICAgICAgICBBIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGluIG9yZGVyIHRvIGNyZWF0ZSB0aGUgdmFsdWUgZm9yIGFueVxuICAgICAgICogICAgICAgIGtleSB3aGljaCBkb2VzIG5vdCBleGlzdCwgdGhlIGZpcnN0IHRpbWUgaXQgaXMgYWNjZXNzZWQuIFRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uIHJlY2VpdmVzLCBhcyBpdHMgb25seSBhcmd1bWVudCwgdGhlIGtleSBiZWluZyBjcmVhdGVkLlxuICAgICAgICovXG5cblxuICAgICAgY2xhc3MgRGVmYXVsdFdlYWtNYXAgZXh0ZW5kcyBXZWFrTWFwIHtcbiAgICAgICAgY29uc3RydWN0b3IoY3JlYXRlSXRlbSwgaXRlbXMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdXBlcihpdGVtcyk7XG4gICAgICAgICAgdGhpcy5jcmVhdGVJdGVtID0gY3JlYXRlSXRlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdGhpcy5jcmVhdGVJdGVtKGtleSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGFuIG9iamVjdCB3aXRoIGEgYHRoZW5gIG1ldGhvZCwgYW5kIGNhblxuICAgICAgICogdGhlcmVmb3JlIGJlIGFzc3VtZWQgdG8gYmVoYXZlIGFzIGEgUHJvbWlzZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICAgICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHRoZW5hYmxlLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3QgaXNUaGVuYWJsZSA9IHZhbHVlID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgfTtcbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoLCB3aGVuIGNhbGxlZCwgd2lsbCByZXNvbHZlIG9yIHJlamVjdFxuICAgICAgICogdGhlIGdpdmVuIHByb21pc2UgYmFzZWQgb24gaG93IGl0IGlzIGNhbGxlZDpcbiAgICAgICAqXG4gICAgICAgKiAtIElmLCB3aGVuIGNhbGxlZCwgYGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcmAgY29udGFpbnMgYSBub24tbnVsbCBvYmplY3QsXG4gICAgICAgKiAgIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggdGhhdCB2YWx1ZS5cbiAgICAgICAqIC0gSWYgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGV4YWN0bHkgb25lIGFyZ3VtZW50LCB0aGUgcHJvbWlzZSBpc1xuICAgICAgICogICByZXNvbHZlZCB0byB0aGF0IHZhbHVlLlxuICAgICAgICogLSBPdGhlcndpc2UsIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG9mIHRoZVxuICAgICAgICogICBmdW5jdGlvbidzIGFyZ3VtZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gcHJvbWlzZVxuICAgICAgICogICAgICAgIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSByZXNvbHV0aW9uIGFuZCByZWplY3Rpb24gZnVuY3Rpb25zIG9mIGFcbiAgICAgICAqICAgICAgICBwcm9taXNlLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvbWlzZS5yZXNvbHZlXG4gICAgICAgKiAgICAgICAgVGhlIHByb21pc2UncyByZXNvbHV0aW9uIGZ1bmN0aW9uLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcHJvbWlzZS5yZWplY3RcbiAgICAgICAqICAgICAgICBUaGUgcHJvbWlzZSdzIHJlamVjdGlvbiBmdW5jdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YVxuICAgICAgICogICAgICAgIE1ldGFkYXRhIGFib3V0IHRoZSB3cmFwcGVkIG1ldGhvZCB3aGljaCBoYXMgY3JlYXRlZCB0aGUgY2FsbGJhY2suXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG1ldGFkYXRhLnNpbmdsZUNhbGxiYWNrQXJnXG4gICAgICAgKiAgICAgICAgV2hldGhlciBvciBub3QgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgd2l0aCBvbmx5IHRoZSBmaXJzdFxuICAgICAgICogICAgICAgIGFyZ3VtZW50IG9mIHRoZSBjYWxsYmFjaywgYWx0ZXJuYXRpdmVseSBhbiBhcnJheSBvZiBhbGwgdGhlXG4gICAgICAgKiAgICAgICAgY2FsbGJhY2sgYXJndW1lbnRzIGlzIHJlc29sdmVkLiBCeSBkZWZhdWx0LCBpZiB0aGUgY2FsbGJhY2tcbiAgICAgICAqICAgICAgICBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggb25seSBhIHNpbmdsZSBhcmd1bWVudCwgdGhhdCB3aWxsIGJlXG4gICAgICAgKiAgICAgICAgcmVzb2x2ZWQgdG8gdGhlIHByb21pc2UsIHdoaWxlIGFsbCBhcmd1bWVudHMgd2lsbCBiZSByZXNvbHZlZCBhc1xuICAgICAgICogICAgICAgIGFuIGFycmF5IGlmIG11bHRpcGxlIGFyZSBnaXZlbi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gICAgICAgKiAgICAgICAgVGhlIGdlbmVyYXRlZCBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgICAqL1xuXG5cbiAgICAgIGNvbnN0IG1ha2VDYWxsYmFjayA9IChwcm9taXNlLCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gKC4uLmNhbGxiYWNrQXJncykgPT4ge1xuICAgICAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlamVjdChuZXcgRXJyb3IoZXh0ZW5zaW9uQVBJcy5ydW50aW1lLmxhc3RFcnJvci5tZXNzYWdlKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5zaW5nbGVDYWxsYmFja0FyZyB8fCBjYWxsYmFja0FyZ3MubGVuZ3RoIDw9IDEgJiYgbWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2tBcmdzWzBdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrQXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgY29uc3QgcGx1cmFsaXplQXJndW1lbnRzID0gbnVtQXJncyA9PiBudW1BcmdzID09IDEgPyBcImFyZ3VtZW50XCIgOiBcImFyZ3VtZW50c1wiO1xuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgd3JhcHBlciBmdW5jdGlvbiBmb3IgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBhbmQgbWV0YWRhdGEuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgICAqICAgICAgICBUaGUgbmFtZSBvZiB0aGUgbWV0aG9kIHdoaWNoIGlzIGJlaW5nIHdyYXBwZWQuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gbWV0YWRhdGFcbiAgICAgICAqICAgICAgICBNZXRhZGF0YSBhYm91dCB0aGUgbWV0aG9kIGJlaW5nIHdyYXBwZWQuXG4gICAgICAgKiBAcGFyYW0ge2ludGVnZXJ9IG1ldGFkYXRhLm1pbkFyZ3NcbiAgICAgICAqICAgICAgICBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHdoaWNoIG11c3QgYmUgcGFzc2VkIHRvIHRoZVxuICAgICAgICogICAgICAgIGZ1bmN0aW9uLiBJZiBjYWxsZWQgd2l0aCBmZXdlciB0aGFuIHRoaXMgbnVtYmVyIG9mIGFyZ3VtZW50cywgdGhlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7aW50ZWdlcn0gbWV0YWRhdGEubWF4QXJnc1xuICAgICAgICogICAgICAgIFRoZSBtYXhpbXVtIG51bWJlciBvZiBhcmd1bWVudHMgd2hpY2ggbWF5IGJlIHBhc3NlZCB0byB0aGVcbiAgICAgICAqICAgICAgICBmdW5jdGlvbi4gSWYgY2FsbGVkIHdpdGggbW9yZSB0aGFuIHRoaXMgbnVtYmVyIG9mIGFyZ3VtZW50cywgdGhlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gbWV0YWRhdGEuc2luZ2xlQ2FsbGJhY2tBcmdcbiAgICAgICAqICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIG9ubHkgdGhlIGZpcnN0XG4gICAgICAgKiAgICAgICAgYXJndW1lbnQgb2YgdGhlIGNhbGxiYWNrLCBhbHRlcm5hdGl2ZWx5IGFuIGFycmF5IG9mIGFsbCB0aGVcbiAgICAgICAqICAgICAgICBjYWxsYmFjayBhcmd1bWVudHMgaXMgcmVzb2x2ZWQuIEJ5IGRlZmF1bHQsIGlmIHRoZSBjYWxsYmFja1xuICAgICAgICogICAgICAgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBvbmx5IGEgc2luZ2xlIGFyZ3VtZW50LCB0aGF0IHdpbGwgYmVcbiAgICAgICAqICAgICAgICByZXNvbHZlZCB0byB0aGUgcHJvbWlzZSwgd2hpbGUgYWxsIGFyZ3VtZW50cyB3aWxsIGJlIHJlc29sdmVkIGFzXG4gICAgICAgKiAgICAgICAgYW4gYXJyYXkgaWYgbXVsdGlwbGUgYXJlIGdpdmVuLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihvYmplY3QsIC4uLiopfVxuICAgICAgICogICAgICAgVGhlIGdlbmVyYXRlZCB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3Qgd3JhcEFzeW5jRnVuY3Rpb24gPSAobmFtZSwgbWV0YWRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFzeW5jRnVuY3Rpb25XcmFwcGVyKHRhcmdldCwgLi4uYXJncykge1xuICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IG1ldGFkYXRhLm1pbkFyZ3MpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgJHttZXRhZGF0YS5taW5BcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5taW5BcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gbWV0YWRhdGEubWF4QXJncykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBtb3N0ICR7bWV0YWRhdGEubWF4QXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWF4QXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGEuZmFsbGJhY2tUb05vQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBBUEkgbWV0aG9kIGhhcyBjdXJyZW50bHkgbm8gY2FsbGJhY2sgb24gQ2hyb21lLCBidXQgaXQgcmV0dXJuIGEgcHJvbWlzZSBvbiBGaXJlZm94LFxuICAgICAgICAgICAgICAvLyBhbmQgc28gdGhlIHBvbHlmaWxsIHdpbGwgdHJ5IHRvIGNhbGwgaXQgd2l0aCBhIGNhbGxiYWNrIGZpcnN0LCBhbmQgaXQgd2lsbCBmYWxsYmFja1xuICAgICAgICAgICAgICAvLyB0byBub3QgcGFzc2luZyB0aGUgY2FsbGJhY2sgaWYgdGhlIGZpcnN0IGNhbGwgZmFpbHMuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MsIG1ha2VDYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgcmVqZWN0XG4gICAgICAgICAgICAgICAgfSwgbWV0YWRhdGEpKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoY2JFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtuYW1lfSBBUEkgbWV0aG9kIGRvZXNuJ3Qgc2VlbSB0byBzdXBwb3J0IHRoZSBjYWxsYmFjayBwYXJhbWV0ZXIsIGAgKyBcImZhbGxpbmcgYmFjayB0byBjYWxsIGl0IHdpdGhvdXQgYSBjYWxsYmFjazogXCIsIGNiRXJyb3IpO1xuICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzKTsgLy8gVXBkYXRlIHRoZSBBUEkgbWV0aG9kIG1ldGFkYXRhLCBzbyB0aGF0IHRoZSBuZXh0IEFQSSBjYWxscyB3aWxsIG5vdCB0cnkgdG9cbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIHVuc3VwcG9ydGVkIGNhbGxiYWNrIGFueW1vcmUuXG5cbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5mYWxsYmFja1RvTm9DYWxsYmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhLm5vQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS5ub0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIHRhcmdldFtuYW1lXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdKC4uLmFyZ3MsIG1ha2VDYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICByZWplY3RcbiAgICAgICAgICAgICAgfSwgbWV0YWRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICAvKipcbiAgICAgICAqIFdyYXBzIGFuIGV4aXN0aW5nIG1ldGhvZCBvZiB0aGUgdGFyZ2V0IG9iamVjdCwgc28gdGhhdCBjYWxscyB0byBpdCBhcmVcbiAgICAgICAqIGludGVyY2VwdGVkIGJ5IHRoZSBnaXZlbiB3cmFwcGVyIGZ1bmN0aW9uLiBUaGUgd3JhcHBlciBmdW5jdGlvbiByZWNlaXZlcyxcbiAgICAgICAqIGFzIGl0cyBmaXJzdCBhcmd1bWVudCwgdGhlIG9yaWdpbmFsIGB0YXJnZXRgIG9iamVjdCwgZm9sbG93ZWQgYnkgZWFjaCBvZlxuICAgICAgICogdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIG9yaWdpbmFsIG1ldGhvZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdGFyZ2V0XG4gICAgICAgKiAgICAgICAgVGhlIG9yaWdpbmFsIHRhcmdldCBvYmplY3QgdGhhdCB0aGUgd3JhcHBlZCBtZXRob2QgYmVsb25ncyB0by5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZFxuICAgICAgICogICAgICAgIFRoZSBtZXRob2QgYmVpbmcgd3JhcHBlZC4gVGhpcyBpcyB1c2VkIGFzIHRoZSB0YXJnZXQgb2YgdGhlIFByb3h5XG4gICAgICAgKiAgICAgICAgb2JqZWN0IHdoaWNoIGlzIGNyZWF0ZWQgdG8gd3JhcCB0aGUgbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gd3JhcHBlclxuICAgICAgICogICAgICAgIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBpbiBwbGFjZSBvZiBhIGRpcmVjdCBpbnZvY2F0aW9uXG4gICAgICAgKiAgICAgICAgb2YgdGhlIHdyYXBwZWQgbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtQcm94eTxmdW5jdGlvbj59XG4gICAgICAgKiAgICAgICAgQSBQcm94eSBvYmplY3QgZm9yIHRoZSBnaXZlbiBtZXRob2QsIHdoaWNoIGludm9rZXMgdGhlIGdpdmVuIHdyYXBwZXJcbiAgICAgICAqICAgICAgICBtZXRob2QgaW4gaXRzIHBsYWNlLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3Qgd3JhcE1ldGhvZCA9ICh0YXJnZXQsIG1ldGhvZCwgd3JhcHBlcikgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KG1ldGhvZCwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldE1ldGhvZCwgdGhpc09iaiwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2FsbCh0aGlzT2JqLCB0YXJnZXQsIC4uLmFyZ3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYXNPd25Qcm9wZXJ0eSA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbiAgICAgIC8qKlxuICAgICAgICogV3JhcHMgYW4gb2JqZWN0IGluIGEgUHJveHkgd2hpY2ggaW50ZXJjZXB0cyBhbmQgd3JhcHMgY2VydGFpbiBtZXRob2RzXG4gICAgICAgKiBiYXNlZCBvbiB0aGUgZ2l2ZW4gYHdyYXBwZXJzYCBhbmQgYG1ldGFkYXRhYCBvYmplY3RzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAgICAgICAqICAgICAgICBUaGUgdGFyZ2V0IG9iamVjdCB0byB3cmFwLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbd3JhcHBlcnMgPSB7fV1cbiAgICAgICAqICAgICAgICBBbiBvYmplY3QgdHJlZSBjb250YWluaW5nIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBzcGVjaWFsIGNhc2VzLiBBbnlcbiAgICAgICAqICAgICAgICBmdW5jdGlvbiBwcmVzZW50IGluIHRoaXMgb2JqZWN0IHRyZWUgaXMgY2FsbGVkIGluIHBsYWNlIG9mIHRoZVxuICAgICAgICogICAgICAgIG1ldGhvZCBpbiB0aGUgc2FtZSBsb2NhdGlvbiBpbiB0aGUgYHRhcmdldGAgb2JqZWN0IHRyZWUuIFRoZXNlXG4gICAgICAgKiAgICAgICAgd3JhcHBlciBtZXRob2RzIGFyZSBpbnZva2VkIGFzIGRlc2NyaWJlZCBpbiB7QHNlZSB3cmFwTWV0aG9kfS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gW21ldGFkYXRhID0ge31dXG4gICAgICAgKiAgICAgICAgQW4gb2JqZWN0IHRyZWUgY29udGFpbmluZyBtZXRhZGF0YSB1c2VkIHRvIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVcbiAgICAgICAqICAgICAgICBQcm9taXNlLWJhc2VkIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBhc3luY2hyb25vdXMuIEFueSBmdW5jdGlvbiBpblxuICAgICAgICogICAgICAgIHRoZSBgdGFyZ2V0YCBvYmplY3QgdHJlZSB3aGljaCBoYXMgYSBjb3JyZXNwb25kaW5nIG1ldGFkYXRhIG9iamVjdFxuICAgICAgICogICAgICAgIGluIHRoZSBzYW1lIGxvY2F0aW9uIGluIHRoZSBgbWV0YWRhdGFgIHRyZWUgaXMgcmVwbGFjZWQgd2l0aCBhblxuICAgICAgICogICAgICAgIGF1dG9tYXRpY2FsbHktZ2VuZXJhdGVkIHdyYXBwZXIgZnVuY3Rpb24sIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICogICAgICAgIHtAc2VlIHdyYXBBc3luY0Z1bmN0aW9ufVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtQcm94eTxvYmplY3Q+fVxuICAgICAgICovXG5cbiAgICAgIGNvbnN0IHdyYXBPYmplY3QgPSAodGFyZ2V0LCB3cmFwcGVycyA9IHt9LCBtZXRhZGF0YSA9IHt9KSA9PiB7XG4gICAgICAgIGxldCBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IHtcbiAgICAgICAgICBoYXMocHJveHlUYXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldCB8fCBwcm9wIGluIGNhY2hlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBnZXQocHJveHlUYXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbcHJvcF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghKHByb3AgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcF07XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbWV0aG9kIG9uIHRoZSB1bmRlcmx5aW5nIG9iamVjdC4gQ2hlY2sgaWYgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgICAvLyBhbnkgd3JhcHBpbmcuXG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygd3JhcHBlcnNbcHJvcF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBzcGVjaWFsLWNhc2Ugd3JhcHBlciBmb3IgdGhpcyBtZXRob2QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwTWV0aG9kKHRhcmdldCwgdGFyZ2V0W3Byb3BdLCB3cmFwcGVyc1twcm9wXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHkobWV0YWRhdGEsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBhc3luYyBtZXRob2QgdGhhdCB3ZSBoYXZlIG1ldGFkYXRhIGZvci4gQ3JlYXRlIGFcbiAgICAgICAgICAgICAgICAvLyBQcm9taXNlIHdyYXBwZXIgZm9yIGl0LlxuICAgICAgICAgICAgICAgIGxldCB3cmFwcGVyID0gd3JhcEFzeW5jRnVuY3Rpb24ocHJvcCwgbWV0YWRhdGFbcHJvcF0pO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gd3JhcE1ldGhvZCh0YXJnZXQsIHRhcmdldFtwcm9wXSwgd3JhcHBlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG1ldGhvZCB0aGF0IHdlIGRvbid0IGtub3cgb3IgY2FyZSBhYm91dC4gUmV0dXJuIHRoZVxuICAgICAgICAgICAgICAgIC8vIG9yaWdpbmFsIG1ldGhvZCwgYm91bmQgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0LlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuYmluZCh0YXJnZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAoaGFzT3duUHJvcGVydHkod3JhcHBlcnMsIHByb3ApIHx8IGhhc093blByb3BlcnR5KG1ldGFkYXRhLCBwcm9wKSkpIHtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBvYmplY3QgdGhhdCB3ZSBuZWVkIHRvIGRvIHNvbWUgd3JhcHBpbmcgZm9yIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgICAvLyBvZi4gQ3JlYXRlIGEgc3ViLW9iamVjdCB3cmFwcGVyIGZvciBpdCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBjaGlsZFxuICAgICAgICAgICAgICAvLyBtZXRhZGF0YS5cbiAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwT2JqZWN0KHZhbHVlLCB3cmFwcGVyc1twcm9wXSwgbWV0YWRhdGFbcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShtZXRhZGF0YSwgXCIqXCIpKSB7XG4gICAgICAgICAgICAgIC8vIFdyYXAgYWxsIHByb3BlcnRpZXMgaW4gKiBuYW1lc3BhY2UuXG4gICAgICAgICAgICAgIHZhbHVlID0gd3JhcE9iamVjdCh2YWx1ZSwgd3JhcHBlcnNbcHJvcF0sIG1ldGFkYXRhW1wiKlwiXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGRvIGFueSB3cmFwcGluZyBmb3IgdGhpcyBwcm9wZXJ0eSxcbiAgICAgICAgICAgICAgLy8gc28ganVzdCBmb3J3YXJkIGFsbCBhY2Nlc3MgdG8gdGhlIHVuZGVybHlpbmcgb2JqZWN0LlxuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2FjaGUsIHByb3AsIHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhY2hlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHNldChwcm94eVRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiBjYWNoZSkge1xuICAgICAgICAgICAgICBjYWNoZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCwgZGVzYykge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoY2FjaGUsIHByb3AsIGRlc2MpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBkZWxldGVQcm9wZXJ0eShwcm94eVRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkoY2FjaGUsIHByb3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICB9OyAvLyBQZXIgY29udHJhY3Qgb2YgdGhlIFByb3h5IEFQSSwgdGhlIFwiZ2V0XCIgcHJveHkgaGFuZGxlciBtdXN0IHJldHVybiB0aGVcbiAgICAgICAgLy8gb3JpZ2luYWwgdmFsdWUgb2YgdGhlIHRhcmdldCBpZiB0aGF0IHZhbHVlIGlzIGRlY2xhcmVkIHJlYWQtb25seSBhbmRcbiAgICAgICAgLy8gbm9uLWNvbmZpZ3VyYWJsZS4gRm9yIHRoaXMgcmVhc29uLCB3ZSBjcmVhdGUgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICAgIC8vIHByb3RvdHlwZSBzZXQgdG8gYHRhcmdldGAgaW5zdGVhZCBvZiB1c2luZyBgdGFyZ2V0YCBkaXJlY3RseS5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHdlIGNhbm5vdCByZXR1cm4gYSBjdXN0b20gb2JqZWN0IGZvciBBUElzIHRoYXRcbiAgICAgICAgLy8gYXJlIGRlY2xhcmVkIHJlYWQtb25seSBhbmQgbm9uLWNvbmZpZ3VyYWJsZSwgc3VjaCBhcyBgY2hyb21lLmRldnRvb2xzYC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlIHByb3h5IGhhbmRsZXJzIHRoZW1zZWx2ZXMgd2lsbCBzdGlsbCB1c2UgdGhlIG9yaWdpbmFsIGB0YXJnZXRgXG4gICAgICAgIC8vIGluc3RlYWQgb2YgdGhlIGBwcm94eVRhcmdldGAsIHNvIHRoYXQgdGhlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgYXJlXG4gICAgICAgIC8vIGRlcmVmZXJlbmNlZCB2aWEgdGhlIG9yaWdpbmFsIHRhcmdldHMuXG5cbiAgICAgICAgbGV0IHByb3h5VGFyZ2V0ID0gT2JqZWN0LmNyZWF0ZSh0YXJnZXQpO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHByb3h5VGFyZ2V0LCBoYW5kbGVycyk7XG4gICAgICB9O1xuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgc2V0IG9mIHdyYXBwZXIgZnVuY3Rpb25zIGZvciBhbiBldmVudCBvYmplY3QsIHdoaWNoIGhhbmRsZXNcbiAgICAgICAqIHdyYXBwaW5nIG9mIGxpc3RlbmVyIGZ1bmN0aW9ucyB0aGF0IHRob3NlIG1lc3NhZ2VzIGFyZSBwYXNzZWQuXG4gICAgICAgKlxuICAgICAgICogQSBzaW5nbGUgd3JhcHBlciBpcyBjcmVhdGVkIGZvciBlYWNoIGxpc3RlbmVyIGZ1bmN0aW9uLCBhbmQgc3RvcmVkIGluIGFcbiAgICAgICAqIG1hcC4gU3Vic2VxdWVudCBjYWxscyB0byBgYWRkTGlzdGVuZXJgLCBgaGFzTGlzdGVuZXJgLCBvciBgcmVtb3ZlTGlzdGVuZXJgXG4gICAgICAgKiByZXRyaWV2ZSB0aGUgb3JpZ2luYWwgd3JhcHBlciwgc28gdGhhdCAgYXR0ZW1wdHMgdG8gcmVtb3ZlIGFcbiAgICAgICAqIHByZXZpb3VzbHktYWRkZWQgbGlzdGVuZXIgd29yayBhcyBleHBlY3RlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RlZmF1bHRXZWFrTWFwPGZ1bmN0aW9uLCBmdW5jdGlvbj59IHdyYXBwZXJNYXBcbiAgICAgICAqICAgICAgICBBIERlZmF1bHRXZWFrTWFwIG9iamVjdCB3aGljaCB3aWxsIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgd3JhcHBlclxuICAgICAgICogICAgICAgIGZvciBhIGdpdmVuIGxpc3RlbmVyIGZ1bmN0aW9uIHdoZW4gb25lIGRvZXMgbm90IGV4aXN0LCBhbmQgcmV0cmlldmVcbiAgICAgICAqICAgICAgICBhbiBleGlzdGluZyBvbmUgd2hlbiBpdCBkb2VzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICAgKi9cblxuXG4gICAgICBjb25zdCB3cmFwRXZlbnQgPSB3cmFwcGVyTWFwID0+ICh7XG4gICAgICAgIGFkZExpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIsIC4uLmFyZ3MpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkTGlzdGVuZXIod3JhcHBlck1hcC5nZXQobGlzdGVuZXIpLCAuLi5hcmdzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNMaXN0ZW5lcih0YXJnZXQsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldC5oYXNMaXN0ZW5lcih3cmFwcGVyTWFwLmdldChsaXN0ZW5lcikpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKHRhcmdldCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlTGlzdGVuZXIod3JhcHBlck1hcC5nZXQobGlzdGVuZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgb25SZXF1ZXN0RmluaXNoZWRXcmFwcGVycyA9IG5ldyBEZWZhdWx0V2Vha01hcChsaXN0ZW5lciA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogV3JhcHMgYW4gb25SZXF1ZXN0RmluaXNoZWQgbGlzdGVuZXIgZnVuY3Rpb24gc28gdGhhdCBpdCB3aWxsIHJldHVybiBhXG4gICAgICAgICAqIGBnZXRDb250ZW50KClgIHByb3BlcnR5IHdoaWNoIHJldHVybnMgYSBgUHJvbWlzZWAgcmF0aGVyIHRoYW4gdXNpbmcgYVxuICAgICAgICAgKiBjYWxsYmFjayBBUEkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSByZXFcbiAgICAgICAgICogICAgICAgIFRoZSBIQVIgZW50cnkgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbmV0d29yayByZXF1ZXN0LlxuICAgICAgICAgKi9cblxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBvblJlcXVlc3RGaW5pc2hlZChyZXEpIHtcbiAgICAgICAgICBjb25zdCB3cmFwcGVkUmVxID0gd3JhcE9iamVjdChyZXEsIHt9XG4gICAgICAgICAgLyogd3JhcHBlcnMgKi9cbiAgICAgICAgICAsIHtcbiAgICAgICAgICAgIGdldENvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgbWluQXJnczogMCxcbiAgICAgICAgICAgICAgbWF4QXJnczogMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGxpc3RlbmVyKHdyYXBwZWRSZXEpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICBjb25zdCBvbk1lc3NhZ2VXcmFwcGVycyA9IG5ldyBEZWZhdWx0V2Vha01hcChsaXN0ZW5lciA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHJldHVybiBsaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogV3JhcHMgYSBtZXNzYWdlIGxpc3RlbmVyIGZ1bmN0aW9uIHNvIHRoYXQgaXQgbWF5IHNlbmQgcmVzcG9uc2VzIGJhc2VkIG9uXG4gICAgICAgICAqIGl0cyByZXR1cm4gdmFsdWUsIHJhdGhlciB0aGFuIGJ5IHJldHVybmluZyBhIHNlbnRpbmVsIHZhbHVlIGFuZCBjYWxsaW5nIGFcbiAgICAgICAgICogY2FsbGJhY2suIElmIHRoZSBsaXN0ZW5lciBmdW5jdGlvbiByZXR1cm5zIGEgUHJvbWlzZSwgdGhlIHJlc3BvbnNlIGlzXG4gICAgICAgICAqIHNlbnQgd2hlbiB0aGUgcHJvbWlzZSBlaXRoZXIgcmVzb2x2ZXMgb3IgcmVqZWN0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsqfSBtZXNzYWdlXG4gICAgICAgICAqICAgICAgICBUaGUgbWVzc2FnZSBzZW50IGJ5IHRoZSBvdGhlciBlbmQgb2YgdGhlIGNoYW5uZWwuXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBzZW5kZXJcbiAgICAgICAgICogICAgICAgIERldGFpbHMgYWJvdXQgdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZS5cbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbigqKX0gc2VuZFJlc3BvbnNlXG4gICAgICAgICAqICAgICAgICBBIGNhbGxiYWNrIHdoaWNoLCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFyYml0cmFyeSBhcmd1bWVudCwgc2VuZHNcbiAgICAgICAgICogICAgICAgIHRoYXQgdmFsdWUgYXMgYSByZXNwb25zZS5cbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqICAgICAgICBUcnVlIGlmIHRoZSB3cmFwcGVkIGxpc3RlbmVyIHJldHVybmVkIGEgUHJvbWlzZSwgd2hpY2ggd2lsbCBsYXRlclxuICAgICAgICAgKiAgICAgICAgeWllbGQgYSByZXNwb25zZS4gRmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAgICAgKi9cblxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBvbk1lc3NhZ2UobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpIHtcbiAgICAgICAgICBsZXQgZGlkQ2FsbFNlbmRSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgICAgIGxldCB3cmFwcGVkU2VuZFJlc3BvbnNlO1xuICAgICAgICAgIGxldCBzZW5kUmVzcG9uc2VQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICB3cmFwcGVkU2VuZFJlc3BvbnNlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGRpZENhbGxTZW5kUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbGV0IHJlc3VsdDtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBsaXN0ZW5lcihtZXNzYWdlLCBzZW5kZXIsIHdyYXBwZWRTZW5kUmVzcG9uc2UpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVzdWx0ID0gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpc1Jlc3VsdFRoZW5hYmxlID0gcmVzdWx0ICE9PSB0cnVlICYmIGlzVGhlbmFibGUocmVzdWx0KTsgLy8gSWYgdGhlIGxpc3RlbmVyIGRpZG4ndCByZXR1cm5lZCB0cnVlIG9yIGEgUHJvbWlzZSwgb3IgY2FsbGVkXG4gICAgICAgICAgLy8gd3JhcHBlZFNlbmRSZXNwb25zZSBzeW5jaHJvbm91c2x5LCB3ZSBjYW4gZXhpdCBlYXJsaWVyXG4gICAgICAgICAgLy8gYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG5vIHJlc3BvbnNlIHNlbnQgZnJvbSB0aGlzIGxpc3RlbmVyLlxuXG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSAmJiAhaXNSZXN1bHRUaGVuYWJsZSAmJiAhZGlkQ2FsbFNlbmRSZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gLy8gQSBzbWFsbCBoZWxwZXIgdG8gc2VuZCB0aGUgbWVzc2FnZSBpZiB0aGUgcHJvbWlzZSByZXNvbHZlc1xuICAgICAgICAgIC8vIGFuZCBhbiBlcnJvciBpZiB0aGUgcHJvbWlzZSByZWplY3RzIChhIHdyYXBwZWQgc2VuZE1lc3NhZ2UgaGFzXG4gICAgICAgICAgLy8gdG8gdHJhbnNsYXRlIHRoZSBtZXNzYWdlIGludG8gYSByZXNvbHZlZCBwcm9taXNlIG9yIGEgcmVqZWN0ZWRcbiAgICAgICAgICAvLyBwcm9taXNlKS5cblxuXG4gICAgICAgICAgY29uc3Qgc2VuZFByb21pc2VkUmVzdWx0ID0gcHJvbWlzZSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlLnRoZW4obXNnID0+IHtcbiAgICAgICAgICAgICAgLy8gc2VuZCB0aGUgbWVzc2FnZSB2YWx1ZS5cbiAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKG1zZyk7XG4gICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgIC8vIFNlbmQgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlcnJvciBpZiB0aGUgcmVqZWN0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgLy8gaXMgYW4gaW5zdGFuY2Ugb2YgZXJyb3IsIG9yIHRoZSBvYmplY3QgaXRzZWxmIG90aGVyd2lzZS5cbiAgICAgICAgICAgICAgbGV0IG1lc3NhZ2U7XG5cbiAgICAgICAgICAgICAgaWYgKGVycm9yICYmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yIHx8IHR5cGVvZiBlcnJvci5tZXNzYWdlID09PSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkFuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWRcIjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgX19tb3pXZWJFeHRlbnNpb25Qb2x5ZmlsbFJlamVjdF9fOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAvLyBQcmludCBhbiBlcnJvciBvbiB0aGUgY29uc29sZSBpZiB1bmFibGUgdG8gc2VuZCB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc2VuZCBvbk1lc3NhZ2UgcmVqZWN0ZWQgcmVwbHlcIiwgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07IC8vIElmIHRoZSBsaXN0ZW5lciByZXR1cm5lZCBhIFByb21pc2UsIHNlbmQgdGhlIHJlc29sdmVkIHZhbHVlIGFzIGFcbiAgICAgICAgICAvLyByZXN1bHQsIG90aGVyd2lzZSB3YWl0IHRoZSBwcm9taXNlIHJlbGF0ZWQgdG8gdGhlIHdyYXBwZWRTZW5kUmVzcG9uc2VcbiAgICAgICAgICAvLyBjYWxsYmFjayB0byByZXNvbHZlIGFuZCBzZW5kIGl0IGFzIGEgcmVzcG9uc2UuXG5cblxuICAgICAgICAgIGlmIChpc1Jlc3VsdFRoZW5hYmxlKSB7XG4gICAgICAgICAgICBzZW5kUHJvbWlzZWRSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZFByb21pc2VkUmVzdWx0KHNlbmRSZXNwb25zZVByb21pc2UpO1xuICAgICAgICAgIH0gLy8gTGV0IENocm9tZSBrbm93IHRoYXQgdGhlIGxpc3RlbmVyIGlzIHJlcGx5aW5nLlxuXG5cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjayA9ICh7XG4gICAgICAgIHJlamVjdCxcbiAgICAgICAgcmVzb2x2ZVxuICAgICAgfSwgcmVwbHkpID0+IHtcbiAgICAgICAgaWYgKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAvLyBEZXRlY3Qgd2hlbiBub25lIG9mIHRoZSBsaXN0ZW5lcnMgcmVwbGllZCB0byB0aGUgc2VuZE1lc3NhZ2UgY2FsbCBhbmQgcmVzb2x2ZVxuICAgICAgICAgIC8vIHRoZSBwcm9taXNlIHRvIHVuZGVmaW5lZCBhcyBpbiBGaXJlZm94LlxuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS93ZWJleHRlbnNpb24tcG9seWZpbGwvaXNzdWVzLzEzMFxuICAgICAgICAgIGlmIChleHRlbnNpb25BUElzLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2UgPT09IENIUk9NRV9TRU5EX01FU1NBR0VfQ0FMTEJBQ0tfTk9fUkVTUE9OU0VfTUVTU0FHRSkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGV4dGVuc2lvbkFQSXMucnVudGltZS5sYXN0RXJyb3IubWVzc2FnZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXBseSAmJiByZXBseS5fX21veldlYkV4dGVuc2lvblBvbHlmaWxsUmVqZWN0X18pIHtcbiAgICAgICAgICAvLyBDb252ZXJ0IGJhY2sgdGhlIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGVycm9yIGludG9cbiAgICAgICAgICAvLyBhbiBFcnJvciBpbnN0YW5jZS5cbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKHJlcGx5Lm1lc3NhZ2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHJlcGx5KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3Qgd3JhcHBlZFNlbmRNZXNzYWdlID0gKG5hbWUsIG1ldGFkYXRhLCBhcGlOYW1lc3BhY2VPYmosIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgbWV0YWRhdGEubWluQXJncykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXQgbGVhc3QgJHttZXRhZGF0YS5taW5BcmdzfSAke3BsdXJhbGl6ZUFyZ3VtZW50cyhtZXRhZGF0YS5taW5BcmdzKX0gZm9yICR7bmFtZX0oKSwgZ290ICR7YXJncy5sZW5ndGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPiBtZXRhZGF0YS5tYXhBcmdzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBhdCBtb3N0ICR7bWV0YWRhdGEubWF4QXJnc30gJHtwbHVyYWxpemVBcmd1bWVudHMobWV0YWRhdGEubWF4QXJncyl9IGZvciAke25hbWV9KCksIGdvdCAke2FyZ3MubGVuZ3RofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCB3cmFwcGVkQ2IgPSB3cmFwcGVkU2VuZE1lc3NhZ2VDYWxsYmFjay5iaW5kKG51bGwsIHtcbiAgICAgICAgICAgIHJlc29sdmUsXG4gICAgICAgICAgICByZWplY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhcmdzLnB1c2god3JhcHBlZENiKTtcbiAgICAgICAgICBhcGlOYW1lc3BhY2VPYmouc2VuZE1lc3NhZ2UoLi4uYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3RhdGljV3JhcHBlcnMgPSB7XG4gICAgICAgIGRldnRvb2xzOiB7XG4gICAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgICAgb25SZXF1ZXN0RmluaXNoZWQ6IHdyYXBFdmVudChvblJlcXVlc3RGaW5pc2hlZFdyYXBwZXJzKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcnVudGltZToge1xuICAgICAgICAgIG9uTWVzc2FnZTogd3JhcEV2ZW50KG9uTWVzc2FnZVdyYXBwZXJzKSxcbiAgICAgICAgICBvbk1lc3NhZ2VFeHRlcm5hbDogd3JhcEV2ZW50KG9uTWVzc2FnZVdyYXBwZXJzKSxcbiAgICAgICAgICBzZW5kTWVzc2FnZTogd3JhcHBlZFNlbmRNZXNzYWdlLmJpbmQobnVsbCwgXCJzZW5kTWVzc2FnZVwiLCB7XG4gICAgICAgICAgICBtaW5BcmdzOiAxLFxuICAgICAgICAgICAgbWF4QXJnczogM1xuICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHRhYnM6IHtcbiAgICAgICAgICBzZW5kTWVzc2FnZTogd3JhcHBlZFNlbmRNZXNzYWdlLmJpbmQobnVsbCwgXCJzZW5kTWVzc2FnZVwiLCB7XG4gICAgICAgICAgICBtaW5BcmdzOiAyLFxuICAgICAgICAgICAgbWF4QXJnczogM1xuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCBzZXR0aW5nTWV0YWRhdGEgPSB7XG4gICAgICAgIGNsZWFyOiB7XG4gICAgICAgICAgbWluQXJnczogMSxcbiAgICAgICAgICBtYXhBcmdzOiAxXG4gICAgICAgIH0sXG4gICAgICAgIGdldDoge1xuICAgICAgICAgIG1pbkFyZ3M6IDEsXG4gICAgICAgICAgbWF4QXJnczogMVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IHtcbiAgICAgICAgICBtaW5BcmdzOiAxLFxuICAgICAgICAgIG1heEFyZ3M6IDFcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGFwaU1ldGFkYXRhLnByaXZhY3kgPSB7XG4gICAgICAgIG5ldHdvcms6IHtcbiAgICAgICAgICBcIipcIjogc2V0dGluZ01ldGFkYXRhXG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZpY2VzOiB7XG4gICAgICAgICAgXCIqXCI6IHNldHRpbmdNZXRhZGF0YVxuICAgICAgICB9LFxuICAgICAgICB3ZWJzaXRlczoge1xuICAgICAgICAgIFwiKlwiOiBzZXR0aW5nTWV0YWRhdGFcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiB3cmFwT2JqZWN0KGV4dGVuc2lvbkFQSXMsIHN0YXRpY1dyYXBwZXJzLCBhcGlNZXRhZGF0YSk7XG4gICAgfTsgLy8gVGhlIGJ1aWxkIHByb2Nlc3MgYWRkcyBhIFVNRCB3cmFwcGVyIGFyb3VuZCB0aGlzIGZpbGUsIHdoaWNoIG1ha2VzIHRoZVxuICAgIC8vIGBtb2R1bGVgIHZhcmlhYmxlIGF2YWlsYWJsZS5cblxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB3cmFwQVBJcyhjaHJvbWUpO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsVGhpcy5icm93c2VyO1xuICB9XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb3dzZXItcG9seWZpbGwuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yLWVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xuXG52YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IGdsb2JhbFRoaXM7XG52YXIgdHlwZWRBcnJheXMgPSBhdmFpbGFibGVUeXBlZEFycmF5cygpO1xuXG52YXIgJHNsaWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNsaWNlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7IC8vIHJlcXVpcmUoJ2dldHByb3RvdHlwZW9mJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLmluZGV4T2YnLCB0cnVlKSB8fCAvKiogQHR5cGUgeyhhcnJheTogcmVhZG9ubHkgdW5rbm93bltdLCB2YWx1ZTogdW5rbm93bikgPT4ga2V5b2YgYXJyYXl9ICovIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcblxuLyoqIEB0eXBlZGVmIHtJbnQ4QXJyYXkgfCBVaW50OEFycmF5IHwgVWludDhDbGFtcGVkQXJyYXkgfCBJbnQxNkFycmF5IHwgVWludDE2QXJyYXkgfCBJbnQzMkFycmF5IHwgVWludDMyQXJyYXkgfCBGbG9hdDMyQXJyYXkgfCBGbG9hdDY0QXJyYXkgfCBCaWdJbnQ2NEFycmF5IHwgQmlnVWludDY0QXJyYXl9IFR5cGVkQXJyYXkgKi9cbi8qKiBAdHlwZWRlZiB7J0ludDhBcnJheScgfCAnVWludDhBcnJheScgfCAnVWludDhDbGFtcGVkQXJyYXknIHwgJ0ludDE2QXJyYXknIHwgJ1VpbnQxNkFycmF5JyB8ICdJbnQzMkFycmF5JyB8ICdVaW50MzJBcnJheScgfCAnRmxvYXQzMkFycmF5JyB8ICdGbG9hdDY0QXJyYXknIHwgJ0JpZ0ludDY0QXJyYXknIHwgJ0JpZ1VpbnQ2NEFycmF5J30gVHlwZWRBcnJheU5hbWUgKi9cbi8qKiBAdHlwZSB7eyBbayBpbiBgXFwkJHtUeXBlZEFycmF5TmFtZX1gXT86IChyZWNlaXZlcjogVHlwZWRBcnJheSkgPT4gc3RyaW5nIHwgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwgfCB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwgfSAmIHsgX19wcm90b19fOiBudWxsIH19ICovXG52YXIgY2FjaGUgPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuaWYgKGhhc1RvU3RyaW5nVGFnICYmIGdPUEQgJiYgZ2V0UHJvdG90eXBlT2YpIHtcblx0Zm9yRWFjaCh0eXBlZEFycmF5cywgZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0XHR2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcblx0XHRpZiAoU3ltYm9sLnRvU3RyaW5nVGFnIGluIGFycikge1xuXHRcdFx0dmFyIHByb3RvID0gZ2V0UHJvdG90eXBlT2YoYXJyKTtcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgd29uJ3QgbmFycm93IGluc2lkZSBhIGNsb3N1cmVcblx0XHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdGlmICghZGVzY3JpcHRvcikge1xuXHRcdFx0XHR2YXIgc3VwZXJQcm90byA9IGdldFByb3RvdHlwZU9mKHByb3RvKTtcblx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUUyB3b24ndCBuYXJyb3cgaW5zaWRlIGEgY2xvc3VyZVxuXHRcdFx0XHRkZXNjcmlwdG9yID0gZ09QRChzdXBlclByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBmaXhcblx0XHRcdGNhY2hlWyckJyArIHR5cGVkQXJyYXldID0gY2FsbEJpbmQoZGVzY3JpcHRvci5nZXQpO1xuXHRcdH1cblx0fSk7XG59IGVsc2Uge1xuXHRmb3JFYWNoKHR5cGVkQXJyYXlzLCBmdW5jdGlvbiAodHlwZWRBcnJheSkge1xuXHRcdHZhciBhcnIgPSBuZXcgZ1t0eXBlZEFycmF5XSgpO1xuXHRcdHZhciBmbiA9IGFyci5zbGljZSB8fCBhcnIuc2V0O1xuXHRcdGlmIChmbikge1xuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBmaXhcblx0XHRcdGNhY2hlWyckJyArIHR5cGVkQXJyYXldID0gY2FsbEJpbmQoZm4pO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHQvKiogQHR5cGUge1JldHVyblR5cGU8dHJ5QWxsVHlwZWRBcnJheXM+fSAqLyB2YXIgZm91bmQgPSBmYWxzZTtcblx0Zm9yRWFjaChcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtcGFyZW5zXG5cdFx0LyoqIEB0eXBlIHtSZWNvcmQ8YFxcJCR7VHlwZWRBcnJheU5hbWV9YCwgdHlwZW9mIGNhY2hlPn0gKi8gLyoqIEB0eXBlIHthbnl9ICovIChjYWNoZSksXG5cdFx0LyoqIEB0eXBlIHsoZ2V0dGVyOiB0eXBlb2YgY2FjaGUsIG5hbWU6IGBcXCQke1R5cGVkQXJyYXlOYW1lfWApID0+IHZvaWR9ICovIGZ1bmN0aW9uIChnZXR0ZXIsIHR5cGVkQXJyYXkpIHtcblx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBmaXhcblx0XHRcdFx0XHRpZiAoJyQnICsgZ2V0dGVyKHZhbHVlKSA9PT0gdHlwZWRBcnJheSkge1xuXHRcdFx0XHRcdFx0Zm91bmQgPSAkc2xpY2UodHlwZWRBcnJheSwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7IC8qKi8gfVxuXHRcdFx0fVxuXHRcdH1cblx0KTtcblx0cmV0dXJuIGZvdW5kO1xufTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbnZhciB0cnlTbGljZXMgPSBmdW5jdGlvbiB0cnlBbGxTbGljZXModmFsdWUpIHtcblx0LyoqIEB0eXBlIHtSZXR1cm5UeXBlPHRyeUFsbFNsaWNlcz59ICovIHZhciBmb3VuZCA9IGZhbHNlO1xuXHRmb3JFYWNoKFxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcblx0XHQvKiogQHR5cGUge2FueX0gKi8gKGNhY2hlKSxcblx0XHQvKiogQHR5cGUgeyhnZXR0ZXI6IHR5cGVvZiBjYWNoZSwgbmFtZTogYFxcJCR7VHlwZWRBcnJheU5hbWV9YCkgPT4gdm9pZH0gKi8gZnVuY3Rpb24gKGdldHRlciwgbmFtZSkge1xuXHRcdFx0aWYgKCFmb3VuZCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpeFxuXHRcdFx0XHRcdGdldHRlcih2YWx1ZSk7XG5cdFx0XHRcdFx0Zm91bmQgPSAkc2xpY2UobmFtZSwgMSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xuXHRyZXR1cm4gZm91bmQ7XG59O1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGljaFR5cGVkQXJyYXkodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0dmFyIHRhZyA9ICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7XG5cdFx0aWYgKCRpbmRleE9mKHR5cGVkQXJyYXlzLCB0YWcpID4gLTEpIHtcblx0XHRcdHJldHVybiB0YWc7XG5cdFx0fVxuXHRcdGlmICh0YWcgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdC8vIG5vZGUgPCAwLjYgaGl0cyBoZXJlIG9uIHJlYWwgVHlwZWQgQXJyYXlzXG5cdFx0cmV0dXJuIHRyeVNsaWNlcyh2YWx1ZSk7XG5cdH1cblx0aWYgKCFnT1BEKSB7IHJldHVybiBudWxsOyB9IC8vIHVua25vd24gZW5naW5lXG5cdHJldHVybiB0cnlUeXBlZEFycmF5cyh2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcG9zc2libGVOYW1lcyA9IHJlcXVpcmUoJ3Bvc3NpYmxlLXR5cGVkLWFycmF5LW5hbWVzJyk7XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogZ2xvYmFsVGhpcztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXZhaWxhYmxlVHlwZWRBcnJheXMoKSB7XG5cdHZhciAvKiogQHR5cGUge1JldHVyblR5cGU8dHlwZW9mIGF2YWlsYWJsZVR5cGVkQXJyYXlzPn0gKi8gb3V0ID0gW107XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcG9zc2libGVOYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdGlmICh0eXBlb2YgZ1twb3NzaWJsZU5hbWVzW2ldXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0b3V0W291dC5sZW5ndGhdID0gcG9zc2libGVOYW1lc1tpXTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dDtcbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJpbXBvcnQgKiBhcyBjaHJvbWUgZnJvbSBcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiO1xyXG5pbXBvcnQge0FjY291bnQsIFRlcm19IGZyb20gXCIuLi8uLi9jYW52YXNcIjtcclxuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XHJcblxyXG4oYXN5bmMoKSA9PiB7XHJcbiAgICAvL2NvbnN0IGFjY291bnQgPSBhd2FpdCBBY2NvdW50LmdldEZyb21VcmwoKVxyXG4gICAgY29uc3QgYWN0aXZlVGVybXMgPSBhd2FpdCBUZXJtLmdldEFsbEFjdGl2ZVRlcm1zKCk7XHJcbiAgICBhc3NlcnQoYWN0aXZlVGVybXMpO1xyXG5cclxuICAgIGxldCBncmFkVGVybTogVGVybSB8IHVuZGVmaW5lZCA9IGFjdGl2ZVRlcm1zLmZpbmQoKHRlcm0pID0+IHRlcm0ubmFtZS5zZWFyY2goL0RFOFcvKSk7XHJcbiAgICBsZXQgdWdUZXJtOiBUZXJtIHwgdW5kZWZpbmVkID0gYWN0aXZlVGVybXMuZmluZCgodGVybSkgPT4gdGVybS5uYW1lLnNlYXJjaCgvREUoXFwvP0hMKT8tXFxzezN9LVxcZCstXFxkKy8pKTtcclxuXHJcbiAgICBsZXQgdGVybUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlcm1GaWx0ZXInKTtcclxuICAgIGNvbnNvbGUubG9nKHRlcm1FbCk7XHJcbiAgICBjb25zb2xlLmxvZyhhY3RpdmVUZXJtcyk7XHJcbiAgICBjb25zb2xlLmxvZyhncmFkVGVybSk7XHJcbiAgICBjb25zb2xlLmxvZyh1Z1Rlcm0pO1xyXG5cclxufSkoKSJdLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfdG9QcmltaXRpdmUiLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImlzRGVlcEVxdWFsIiwiaXNEZWVwU3RyaWN0RXF1YWwiLCJfcmVxdWlyZSRjb2RlcyIsImNvZGVzIiwiRVJSX0FNQklHVU9VU19BUkdVTUVOVCIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiRVJSX0lOVkFMSURfQVJHX1ZBTFVFIiwiRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFIiwiRVJSX01JU1NJTkdfQVJHUyIsIkFzc2VydGlvbkVycm9yIiwiaW5zcGVjdCIsIl9yZXF1aXJlJHR5cGVzIiwiaXNQcm9taXNlIiwiaXNSZWdFeHAiLCJvYmplY3RBc3NpZ24iLCJvYmplY3RJcyIsIlJlZ0V4cFByb3RvdHlwZVRlc3QiLCJsYXp5TG9hZENvbXBhcmlzb24iLCJjb21wYXJpc29uIiwiTWFwIiwid2FybmVkIiwiYXNzZXJ0IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9rIiwiTk9fRVhDRVBUSU9OX1NFTlRJTkVMIiwiaW5uZXJGYWlsIiwib2JqIiwibWVzc2FnZSIsIkVycm9yIiwiaW5uZXJPayIsImZuIiwiYXJnTGVuIiwidmFsdWUiLCJnZW5lcmF0ZWRNZXNzYWdlIiwiZXJyIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcGVyYXRvciIsInN0YWNrU3RhcnRGbiIsIl9sZW4iLCJhcmd1bWVudHMiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiYXBwbHkiLCJjb25jYXQiLCJmYWlsIiwiaW50ZXJuYWxNZXNzYWdlIiwiYXJnc0xlbiIsInByb2Nlc3MiLCJlbWl0V2FybmluZyIsImNvbnNvbGUiLCJ3YXJuIiwiYmluZCIsImVyckFyZ3MiLCJlcXVhbCIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwibm90RGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcFN0cmljdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsIkNvbXBhcmlzb24iLCJrZXlzIiwiX3RoaXMiLCJ0aGlzIiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJmb3JFYWNoIiwiZXhwZWN0ZWRFeGNlcHRpb24iLCJtc2ciLCJuYW1lIiwicHVzaCIsImEiLCJiIiwiY29tcGFyZUV4Y2VwdGlvbktleSIsImlzUHJvdG90eXBlT2YiLCJnZXRBY3R1YWwiLCJlIiwiY2hlY2tJc1Byb21pc2UiLCJ0aGVuIiwiY2F0Y2giLCJ3YWl0Rm9yQWN0dWFsIiwicHJvbWlzZUZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXN1bHRQcm9taXNlIiwiZXhwZWN0c0Vycm9yIiwiZXJyb3IiLCJkZXRhaWxzIiwiZm5UeXBlIiwiZXhwZWN0c05vRXJyb3IiLCJpbnRlcm5hbE1hdGNoIiwic3RyaW5nIiwicmVnZXhwIiwiZm5OYW1lIiwibWF0Y2giLCJzdHJpY3QiLCJfbGVuNiIsIl9rZXk2IiwidGhyb3dzIiwiX2xlbjIiLCJfa2V5MiIsInJlamVjdHMiLCJfbGVuMyIsIl9rZXkzIiwicmVzdWx0IiwiZG9lc05vdFRocm93IiwiX2xlbjQiLCJfa2V5NCIsImRvZXNOb3RSZWplY3QiLCJfbGVuNSIsIl9rZXk1IiwiaWZFcnJvciIsIm5ld0VyciIsIm9yaWdTdGFjayIsInN0YWNrIiwidG1wMiIsInNwbGl0Iiwic2hpZnQiLCJ0bXAxIiwicG9zIiwiaW5kZXhPZiIsInNsaWNlIiwiam9pbiIsImRvZXNOb3RNYXRjaCIsIm93bktleXMiLCJyIiwidCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQiLCJfdG9Qcm9wZXJ0eUtleSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiYXJnIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX3dyYXBOYXRpdmVTdXBlciIsIkNsYXNzIiwiX2NhY2hlIiwiRnVuY3Rpb24iLCJ0b1N0cmluZyIsImhhcyIsImdldCIsInNldCIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiX2dldFByb3RvdHlwZU9mIiwiY3JlYXRlIiwiX3NldFByb3RvdHlwZU9mIiwiUGFyZW50IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwidmFsdWVPZiIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiZW5kc1dpdGgiLCJzdHIiLCJzZWFyY2giLCJ0aGlzX2xlbiIsInN1YnN0cmluZyIsImJsdWUiLCJncmVlbiIsInJlZCIsIndoaXRlIiwia1JlYWRhYmxlT3BlcmF0b3IiLCJzdHJpY3RFcXVhbE9iamVjdCIsIm5vdFN0cmljdEVxdWFsT2JqZWN0Iiwibm90SWRlbnRpY2FsIiwiY29weUVycm9yIiwic291cmNlIiwiaW5zcGVjdFZhbHVlIiwidmFsIiwiY29tcGFjdCIsImN1c3RvbUluc3BlY3QiLCJkZXB0aCIsIm1heEFycmF5TGVuZ3RoIiwiSW5maW5pdHkiLCJzaG93SGlkZGVuIiwiYnJlYWtMZW5ndGgiLCJzaG93UHJveHkiLCJzb3J0ZWQiLCJnZXR0ZXJzIiwiX0Vycm9yIiwiX2luc3BlY3QkY3VzdG9tIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfc3VwZXIiLCJTdXBlciIsIk5ld1RhcmdldCIsIm9wdGlvbnMiLCJsaW1pdCIsInN0YWNrVHJhY2VMaW1pdCIsInN0ZGVyciIsImlzVFRZIiwiZ2V0Q29sb3JEZXB0aCIsIm90aGVyIiwibGFzdFBvcyIsImVuZCIsInNraXBwZWQiLCJhY3R1YWxJbnNwZWN0ZWQiLCJhY3R1YWxMaW5lcyIsImV4cGVjdGVkTGluZXMiLCJpbmRpY2F0b3IiLCJpbnB1dExlbmd0aCIsImNvbHVtbnMiLCJjb3VudCIsIk1hdGgiLCJmbG9vciIsIm1heENvdW50IiwibG9nIiwicmVwZWF0IiwicG9wIiwibWF4TGluZXMiLCJtYXgiLCJfYWN0dWFsTGluZXMiLCJwcmludGVkTGluZXMiLCJza2lwcGVkTXNnIiwiY3VyIiwiZXhwZWN0ZWRMaW5lIiwiYWN0dWFsTGluZSIsImRpdmVyZ2luZ0xpbmVzIiwiY3JlYXRlRXJyRGlmZiIsImJhc2UiLCJfcmVzIiwia25vd25PcGVyYXRvcnMiLCJjb2RlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJyZWN1cnNlVGltZXMiLCJjdHgiLCJjdXN0b20iLCJ1dGlsIiwiY3JlYXRlRXJyb3JUeXBlIiwiQmFzZSIsIk5vZGVFcnJvciIsIl9CYXNlIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiZ2V0TWVzc2FnZSIsIm9uZU9mIiwidGhpbmciLCJpc0FycmF5IiwibGVuIiwibWFwIiwiZGV0ZXJtaW5lciIsInN0YXJ0Iiwic3Vic3RyIiwicmVwbGFjZSIsInR5cGUiLCJyZWFzb24iLCJpbnNwZWN0ZWQiLCJSYW5nZUVycm9yIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJsIiwibiIsInUiLCJmIiwibmV4dCIsImRvbmUiLCJyZXR1cm4iLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsImFycjIiLCJyZWdleEZsYWdzU3VwcG9ydGVkIiwiZmxhZ3MiLCJhcnJheUZyb21TZXQiLCJhcnJheSIsImFycmF5RnJvbU1hcCIsImlzIiwib2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzIiwibnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsInVuY3VycnlUaGlzIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm9iamVjdFRvU3RyaW5nIiwiaXNBbnlBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXJWaWV3IiwiaXNEYXRlIiwiaXNNYXAiLCJpc1NldCIsImlzTmF0aXZlRXJyb3IiLCJpc0JveGVkUHJpbWl0aXZlIiwiaXNOdW1iZXJPYmplY3QiLCJpc1N0cmluZ09iamVjdCIsImlzQm9vbGVhbk9iamVjdCIsImlzQmlnSW50T2JqZWN0IiwiaXNTeW1ib2xPYmplY3QiLCJpc0Zsb2F0MzJBcnJheSIsImlzRmxvYXQ2NEFycmF5IiwiaXNOb25JbmRleCIsImNoYXJDb2RlQXQiLCJwb3ciLCJnZXRPd25Ob25JbmRleFByb3BlcnRpZXMiLCJjb21wYXJlIiwieCIsInkiLCJtaW4iLCJrTm9JdGVyYXRvciIsImtJc0FycmF5Iiwia0lzU2V0Iiwia0lzTWFwIiwiaW5uZXJEZWVwRXF1YWwiLCJ2YWwxIiwidmFsMiIsIm1lbW9zIiwiYnVmMSIsImJ1ZjIiLCJ2YWwxVGFnIiwia2V5czEiLCJrZXlzMiIsImtleUNoZWNrIiwiRGF0ZSIsImdldFRpbWUiLCJSZWdFeHAiLCJieXRlTGVuZ3RoIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJhcmVTaW1pbGFyVHlwZWRBcnJheXMiLCJvZmZzZXQiLCJhcmVTaW1pbGFyRmxvYXRBcnJheXMiLCJfa2V5cyIsIl9rZXlzMiIsInNpemUiLCJCaWdJbnQiLCJpc0VxdWFsQm94ZWRQcmltaXRpdmUiLCJnZXRFbnVtZXJhYmxlcyIsImsiLCJpdGVyYXRpb25UeXBlIiwiYUtleXMiLCJiS2V5cyIsInN5bWJvbEtleXNBIiwic3ltYm9sS2V5c0IiLCJfc3ltYm9sS2V5c0IiLCJwb3NpdGlvbiIsInZhbDJNZW1vQSIsInZhbDJNZW1vQiIsImFyZUVxIiwibWVtbyIsImFWYWx1ZXMiLCJTZXQiLCJhZGQiLCJzZXRNaWdodEhhdmVMb29zZVByaW0iLCJiVmFsdWVzIiwiX2kiLCJfdmFsIiwic2V0SGFzRXF1YWxFbGVtZW50Iiwic2V0RXF1aXYiLCJhRW50cmllcyIsIl9hRW50cmllcyRpIiwiaXRlbTEiLCJpdGVtMiIsIm1hcE1pZ2h0SGF2ZUxvb3NlUHJpbSIsImJFbnRyaWVzIiwiX2kyIiwiX2JFbnRyaWVzJF9pIiwiaXRlbSIsIm1hcEhhc0VxdWFsRW50cnkiLCJtYXBFcXVpdiIsImtleXNBIiwib2JqRXF1aXYiLCJkZWxldGUiLCJzZXRWYWx1ZXMiLCJmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMiLCJhbHRWYWx1ZSIsImN1ckIiLCJrZXkxIiwia2V5MiIsIkdldEludHJpbnNpYyIsImNhbGxCaW5kIiwiJGluZGV4T2YiLCJhbGxvd01pc3NpbmciLCJpbnRyaW5zaWMiLCJzZXRGdW5jdGlvbkxlbmd0aCIsIiRUeXBlRXJyb3IiLCIkYXBwbHkiLCIkY2FsbCIsIiRyZWZsZWN0QXBwbHkiLCIkZGVmaW5lUHJvcGVydHkiLCIkbWF4Iiwib3JpZ2luYWxGdW5jdGlvbiIsImZ1bmMiLCJhcHBseUJpbmQiLCIkU3ludGF4RXJyb3IiLCJnb3BkIiwicHJvcGVydHkiLCJub25FbnVtZXJhYmxlIiwibm9uV3JpdGFibGUiLCJub25Db25maWd1cmFibGUiLCJsb29zZSIsImRlc2MiLCJoYXNTeW1ib2xzIiwidG9TdHIiLCJkZWZpbmVEYXRhUHJvcGVydHkiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwib2JqZWN0IiwicHJlZGljYXRlIiwicHJlZGljYXRlcyIsIkV2YWxFcnJvciIsIlN5bnRheEVycm9yIiwiVVJJRXJyb3IiLCJpc0NhbGxhYmxlIiwibGlzdCIsInRoaXNBcmciLCJyZWNlaXZlciIsImZvckVhY2hBcnJheSIsImNoYXJBdCIsImZvckVhY2hTdHJpbmciLCJmb3JFYWNoT2JqZWN0IiwiY29uY2F0dHkiLCJqIiwidGhhdCIsImJvdW5kIiwiYXJyTGlrZSIsInNsaWN5IiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJqb2luZXIiLCJqb2lueSIsIkVtcHR5IiwiaW1wbGVtZW50YXRpb24iLCIkRXJyb3IiLCIkRXZhbEVycm9yIiwiJFJhbmdlRXJyb3IiLCIkUmVmZXJlbmNlRXJyb3IiLCIkVVJJRXJyb3IiLCIkRnVuY3Rpb24iLCJnZXRFdmFsbGVkQ29uc3RydWN0b3IiLCJleHByZXNzaW9uU3ludGF4IiwiJGdPUEQiLCJ0aHJvd1R5cGVFcnJvciIsIlRocm93VHlwZUVycm9yIiwiY2FsbGVlVGhyb3dzIiwiZ09QRHRocm93cyIsImhhc1Byb3RvIiwiZ2V0UHJvdG8iLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiSU5UUklOU0lDUyIsIkFnZ3JlZ2F0ZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJBdG9taWNzIiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiRGF0YVZpZXciLCJkZWNvZGVVUkkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJldmFsIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImlzRmluaXRlIiwiSlNPTiIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiV2Vha01hcCIsIldlYWtSZWYiLCJXZWFrU2V0IiwiZXJyb3JQcm90byIsImRvRXZhbCIsImdlbiIsIkxFR0FDWV9BTElBU0VTIiwiaGFzT3duIiwiJGNvbmNhdCIsIiRzcGxpY2VBcHBseSIsInNwbGljZSIsIiRyZXBsYWNlIiwiJHN0clNsaWNlIiwiJGV4ZWMiLCJleGVjIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsImdldEJhc2VJbnRyaW5zaWMiLCJhbGlhcyIsImludHJpbnNpY05hbWUiLCJwYXJ0cyIsImZpcnN0IiwibGFzdCIsIm51bWJlciIsInF1b3RlIiwic3ViU3RyaW5nIiwic3RyaW5nVG9QYXRoIiwiaW50cmluc2ljQmFzZU5hbWUiLCJpbnRyaW5zaWNSZWFsTmFtZSIsInNraXBGdXJ0aGVyQ2FjaGluZyIsImlzT3duIiwicGFydCIsImhhc1Byb3BlcnR5RGVzY3JpcHRvcnMiLCJoYXNBcnJheUxlbmd0aERlZmluZUJ1ZyIsImZvbyIsIiRPYmplY3QiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsInN5bSIsInN5bU9iaiIsImdldE93blByb3BlcnR5TmFtZXMiLCJzeW1zIiwidG9TdHJpbmdUYWciLCIkaGFzT3duIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiaGFzVG9TdHJpbmdUYWciLCIkdG9TdHJpbmciLCJjYWxsQm91bmQiLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNMZWdhY3lBcmd1bWVudHMiLCJjYWxsZWUiLCJzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzIiwiYmFkQXJyYXlMaWtlIiwiaXNDYWxsYWJsZU1hcmtlciIsImZuVG9TdHIiLCJyZWZsZWN0QXBwbHkiLCJfIiwiY29uc3RydWN0b3JSZWdleCIsImlzRVM2Q2xhc3NGbiIsImZuU3RyIiwidHJ5RnVuY3Rpb25PYmplY3QiLCJpc0lFNjgiLCJpc0REQSIsImRvY3VtZW50IiwiYWxsIiwic3RyQ2xhc3MiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzRm5SZWdleCIsImdlbmVyYXRvckZ1bmMiLCJnZXRHZW5lcmF0b3JGdW5jIiwiZGVmaW5lIiwiZ2V0UG9seWZpbGwiLCJzaGltIiwicG9seWZpbGwiLCJOYU4iLCJ3aGljaFR5cGVkQXJyYXkiLCJrZXlzU2hpbSIsImlzQXJncyIsImlzRW51bWVyYWJsZSIsImhhc0RvbnRFbnVtQnVnIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUiLCJleGNsdWRlZEtleXMiLCIkYXBwbGljYXRpb25DYWNoZSIsIiRjb25zb2xlIiwiJGV4dGVybmFsIiwiJGZyYW1lIiwiJGZyYW1lRWxlbWVudCIsIiRmcmFtZXMiLCIkaW5uZXJIZWlnaHQiLCIkaW5uZXJXaWR0aCIsIiRvbm1vemZ1bGxzY3JlZW5jaGFuZ2UiLCIkb25tb3pmdWxsc2NyZWVuZXJyb3IiLCIkb3V0ZXJIZWlnaHQiLCIkb3V0ZXJXaWR0aCIsIiRwYWdlWE9mZnNldCIsIiRwYWdlWU9mZnNldCIsIiRwYXJlbnQiLCIkc2Nyb2xsTGVmdCIsIiRzY3JvbGxUb3AiLCIkc2Nyb2xsWCIsIiRzY3JvbGxZIiwiJHNlbGYiLCIkd2Via2l0SW5kZXhlZERCIiwiJHdlYmtpdFN0b3JhZ2VJbmZvIiwiJHdpbmRvdyIsImhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyIsIndpbmRvdyIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzQXJndW1lbnRzIiwiaXNTdHJpbmciLCJ0aGVLZXlzIiwic2tpcFByb3RvIiwic2tpcENvbnN0cnVjdG9yIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5Iiwib3JpZ0tleXMiLCJvcmlnaW5hbEtleXMiLCJrZXlzV29ya3NXaXRoQXJndW1lbnRzIiwib2JqZWN0S2V5cyIsInRvT2JqZWN0IiwiJHB1c2giLCIkcHJvcElzRW51bWVyYWJsZSIsIm9yaWdpbmFsR2V0U3ltYm9scyIsInNvdXJjZTEiLCJ0byIsInMiLCJnZXRTeW1ib2xzIiwibmV4dEtleSIsInByb3BWYWx1ZSIsImFzc2lnbiIsImxldHRlcnMiLCJsYWNrc1Byb3BlckVudW1lcmF0aW9uT3JkZXIiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInRocm93ZXIiLCJhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJoYXNEZXNjcmlwdG9ycyIsImdPUEQiLCIkZmxvb3IiLCJmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlIiwiZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlIiwidHlwZV9sdXQiLCJmb3JtRGF0YWlmeSIsImRhdGEiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYWRkVG9Gb3JtRGF0YSIsImVsIiwicXVlcnlTZWxlY3RvciIsImF1dGhlbnRpY2l0eVRva2VuIiwiYXBwZW5kIiwiZW50cnkiLCJlbnRyaWVzIiwiaXRlbUtleSIsIml0ZW1WYWx1ZSIsImdldE1vZHVsZVdlZWtOdW1iZXIiLCJyZWdleCIsIndlZWtOdW1iZXIiLCJtb2R1bGVJdGVtIiwiaXRlbXMiLCJnZXRBcGlQYWdlZERhdGEiLCJ1cmwiLCJjb25maWciLCJnZXRQYWdlZERhdGEiLCJxdWVyeVBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImluY2x1ZGVzIiwicmVzcG9uc2UiLCJmZXRjaCIsImZldGNoSW5pdCIsImpzb24iLCJ2YWx1ZXMiLCJmaW5kIiwibmV4dF9wYWdlX2xpbmsiLCJoZWFkZXJzIiwibGluayIsIm5leHRMaW5rIiwicmVzcG9uc2VEYXRhIiwiZmV0Y2hKc29uIiwiZmV0Y2hBcGlKc29uIiwiZmV0Y2hPbmVBcGlKc29uIiwiQmFzZUNhbnZhc09iamVjdCIsImFjY291bnRJZCIsImNhbnZhc0RhdGEiLCJnZXRDbGFzcyIsInN0cmluZ2lmeSIsImdldEl0ZW0iLCJteUNsYXNzIiwibmFtZUtleSIsIm5hbWVQcm9wZXJ0eSIsImNvbnRlbnRVcmxQYXRoIiwiY29udGVudFVybFRlbXBsYXRlIiwiaWQiLCJodG1sQ29udGVudFVybCIsInJhd0RhdGEiLCJvdXQiLCJnZXREYXRhQnlJZCIsImNvbnRlbnRJZCIsImNvdXJzZSIsImdldFVybFBhdGhGcm9tSWRzIiwiZ2V0QnlJZCIsImNvdXJzZUlkIiwiZ2V0QWxsVXJsIiwiYWxsQ29udGVudFVybFRlbXBsYXRlIiwicmVwbGFjZWQiLCJnZXRBbGwiLCJpZFByb3BlcnR5Iiwic2F2ZURhdGEiLCJtZXRob2QiLCJib2R5IiwiQWNjb3VudCIsImdldEZyb21VcmwiLCJkb2N1bWVudFVSSSIsImdldFJvb3RBY2NvdW50IiwicmVzZXRDYWNoZSIsImFjY291bnRzIiwiYWNjb3VudCIsInJvb3QiLCJyb290QWNjb3VudElkIiwiQ291cnNlIiwiX21vZHVsZXMiLCJtb2R1bGVzQnlXZWVrTnVtYmVyIiwiZ2V0SWRGcm9tVXJsIiwic3RyaW5nSXNDb3Vyc2VDb2RlIiwiQ09ERV9SRUdFWCIsImdldENvbnRlbnRDbGFzc0Zyb21VcmwiLCJjbGFzc18iLCJjb250ZW50Q2xhc3NlcyIsImNvbnRlbnRVcmxQYXJ0IiwiZ2V0Q291cnNlc0J5U3RyaW5nIiwidGVybSIsImNvdXJzZURhdGFMaXN0IiwiYWNjb3VudElkc0J5TmFtZSIsImdldEFjY291bnRJZHNCeU5hbWUiLCJhY2NvdW50S2V5Iiwic29ydCIsImNvdXJzZURhdGEiLCJnZXRBbGxCeUNvZGUiLCJnZXRCeUNvZGUiLCJjb3Vyc2VzIiwiY291cnNlVXJsIiwiY291cnNlQ29kZSIsImNvZGVNYXRjaCIsImZ1bGxDb3Vyc2VDb2RlIiwiY291cnNlX2NvZGUiLCJiYXNlQ29kZSIsInRlcm1JZCIsImVucm9sbG1lbnRfdGVybV9pZCIsImdldFRlcm0iLCJUZXJtIiwiZ2V0VGVybUJ5SWQiLCJjb2RlUHJlZml4IiwiaXNCbHVlcHJpbnQiLCJpc1B1Ymxpc2hlZCIsImdldE1vZHVsZXMiLCJtb2R1bGVzIiwiZ2V0Q29udGVudEl0ZW1Gcm9tVXJsIiwiQ29udGVudENsYXNzIiwiZ2V0TW9kdWxlc0J5V2Vla051bWJlciIsImdldE1vZHVsZUl0ZW1MaW5rcyIsIm1vZHVsZU9yV2Vla051bWJlciIsInRhcmdldE1vZHVsZVdlZWtOdW1iZXIiLCJ0YXJnZXRNb2R1bGUiLCJ0YXJnZXRUeXBlIiwiY29udGVudFNlYXJjaFN0cmluZyIsInRhcmdldEluZGV4IiwiaW5kZXgiLCJ1cmxzIiwiZ2V0UGFnZXMiLCJzZWFyY2hfdGVybSIsInBhZ2UiLCJtYXRjaGluZ1R5cGVJdGVtcyIsInRhcmdldEl0ZW0iLCJodG1sX3VybCIsImdldFN5bGxhYnVzIiwiZ2V0QXNzaWdubWVudHMiLCJBc3NpZ25tZW50IiwiZ2V0QWxsSW5Db3Vyc2UiLCJnZXRRdWl6emVzIiwiUXVpeiIsImdldEFzc29jaWF0ZWRDb3Vyc2VzIiwicGVyX3BhZ2UiLCJnZXRTdWJzZWN0aW9ucyIsImdldFRhYnMiLCJnZXRGcm9udFBhZ2UiLCJQYWdlIiwiZ2V0VGFiIiwibGFiZWwiLCJ0YWJzIiwidGFiIiwic2V0TmF2aWdhdGlvblRhYkhpZGRlbiIsImNoYW5nZVN5bGxhYnVzIiwibmV3SHRtbCIsImdldFBvdGVudGlhbFNlY3Rpb25zIiwibG9ja0JsdWVwcmludCIsInByb21pc2VzIiwicGFnZV9pZCIsImNvbnRlbnRfaWQiLCJnZXRJdGVtVHlwZUFuZElkIiwic2V0QXNCbHVlcHJpbnQiLCJ1bnNldEFzQmx1ZXByaW50IiwicHVibGlzaCIsInVucHVibGlzaCIsImNvbnRlbnRVcGRhdGVzQW5kRml4ZXMiLCJfZml4ZXNUb1J1biIsIk5vdEltcGxlbWVudGVkRXhjZXB0aW9uIiwicmVzZXQiLCJwcm9tcHQiLCJjb25maXJtIiwiaW1wb3J0RGV2Q291cnNlIiwidXBkYXRlQ2FsbGJhY2siLCJkZXZDb3Vyc2UiLCJnZXRQYXJlbnRDb3Vyc2UiLCJDb3Vyc2VOb3RGb3VuZEV4Y2VwdGlvbiIsImltcG9ydENvdXJzZSIsInJldHVybl9kZXZfc2VhcmNoIiwibWlncmF0aW9ucyIsIm1pZ3JhdGlvbiIsImdlbmVyYXRlSG9tZVRpbGVzIiwiZ2VuZXJhdGVIb21lVGlsZSIsIm92ZXJ2aWV3IiwidG9Mb3dlckNhc2UiLCJwYWdlRGF0YSIsIm92ZXJ2aWV3UGFnZSIsInBhZ2VCb2R5IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImJhbm5lckltZyIsInJ1bnRpbWUiLCJzZW5kTWVzc2FnZSIsImRvd25sb2FkRmlsZSIsInNyYyIsInVwbG9hZEZpbGUiLCJmaWxlIiwicGF0aCIsImluaXRpYWxQYXJhbXMiLCJub19yZWRpcmVjdCIsInBhcmVudF9mb2xkZXIiLCJvbl9kdXBsaWNhdGUiLCJ1cGxvYWRQYXJhbXMiLCJ1cGxvYWRfcGFyYW1zIiwidXBsb2FkRm9ybURhdGEiLCJ0ZXh0IiwicmVnaXN0ZXJDb250ZW50Q2xhc3MiLCJjb250ZW50Q2xhc3MiLCJCYXNlQ29udGVudEl0ZW0iLCJzdXBlciIsIl9jb3Vyc2UiLCJ1cmxUZXJtTWF0Y2giLCJjb250ZW50VXJsUmVnZXgiLCJjb250ZW50U3RyaW5nIiwiY2xlYXJBZGRlZENvbnRlbnRUYWdzIiwiYm9keUtleSIsImJvZHlQcm9wZXJ0eSIsImR1ZUF0IiwiZHVlX2F0Iiwic2V0RHVlQXQiLCJkYXRlIiwiZHVlQXRUaW1lRGVsdGEiLCJ0aW1lRGVsdGEiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInVwZGF0ZUNvbnRlbnQiLCJuYW1lUHJvcCIsImJvZHlQcm9wIiwiZ2V0TWVJbkFub3RoZXJDb3Vyc2UiLCJ0YXJnZXRDb3Vyc2UiLCJnZXRBbGxMaW5rcyIsImFuY2hvcnMiLCJib2R5QXNFbGVtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImhyZWYiLCJ0b0lTT1N0cmluZyIsImdldFJldmlzaW9ucyIsInJldmVydExhc3RDaGFuZ2VTZXQiLCJzdGVwc0JhY2siLCJyZXZpc2lvbnMiLCJyZXZpc2lvbiIsImFwcGx5UmV2aXNpb24iLCJyZXNldENvbnRlbnQiLCJyZXZpc2lvbklkIiwiUnVicmljIiwiYXNzb2NpYXRpb25zIiwicmVsb2FkIiwicGFyYW1zIiwiUnVicmljQXNzb2NpYXRpb24iLCJ1c2VGb3JHcmFkaW5nIiwic2V0VXNlRm9yR3JhZGluZyIsIndvcmtmbG93U3RhdGUiLCJ0ZXJtcyIsInNlYXJjaFRlcm1zIiwidGVybURhdGEiLCJnZXRBbGxBY3RpdmVUZXJtcyIsInJvb3RBY2NvdW50IiwiZGF0dW0iLCJzdGFydERhdGUiLCJzdGFydF9hdCIsImVuZERhdGUiLCJlbmRfYXQiLCJvcmlnaW5hbENsYXNzIiwiX2NvbnRleHQiLCJjb3B5IiwiZmlsbCIsInJlYWRVSW50OCIsImlzQXJndW1lbnRzT2JqZWN0IiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImlzVHlwZWRBcnJheSIsIkJpZ0ludFN1cHBvcnRlZCIsIlN5bWJvbFN1cHBvcnRlZCIsIk9iamVjdFRvU3RyaW5nIiwibnVtYmVyVmFsdWUiLCJzdHJpbmdWYWx1ZSIsImJvb2xlYW5WYWx1ZSIsImJpZ0ludFZhbHVlIiwic3ltYm9sVmFsdWUiLCJjaGVja0JveGVkUHJpbWl0aXZlIiwicHJvdG90eXBlVmFsdWVPZiIsImlzTWFwVG9TdHJpbmciLCJpc1NldFRvU3RyaW5nIiwiaXNXZWFrTWFwVG9TdHJpbmciLCJpc1dlYWtTZXRUb1N0cmluZyIsImlzQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJ3b3JraW5nIiwiaXNEYXRhVmlld1RvU3RyaW5nIiwiaXNEYXRhVmlldyIsImlzVmlldyIsImlzVWludDhBcnJheSIsImlzVWludDhDbGFtcGVkQXJyYXkiLCJpc1VpbnQxNkFycmF5IiwiaXNVaW50MzJBcnJheSIsImlzSW50OEFycmF5IiwiaXNJbnQxNkFycmF5IiwiaXNJbnQzMkFycmF5IiwiaXNCaWdJbnQ2NEFycmF5IiwiaXNCaWdVaW50NjRBcnJheSIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsIlNoYXJlZEFycmF5QnVmZmVyQ29weSIsImlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzU2hhcmVkQXJyYXlCdWZmZXIiLCJpc0FzeW5jRnVuY3Rpb24iLCJpc01hcEl0ZXJhdG9yIiwiaXNTZXRJdGVyYXRvciIsImlzR2VuZXJhdG9yT2JqZWN0IiwiaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlIiwiZGVzY3JpcHRvcnMiLCJmb3JtYXRSZWdFeHAiLCJmb3JtYXQiLCJvYmplY3RzIiwiaXNOdWxsIiwiZGVwcmVjYXRlIiwibm9EZXByZWNhdGlvbiIsInRocm93RGVwcmVjYXRpb24iLCJ0cmFjZURlcHJlY2F0aW9uIiwidHJhY2UiLCJkZWJ1Z3MiLCJkZWJ1Z0VudlJlZ2V4IiwiTk9ERV9ERUJVRyIsImRlYnVnRW52IiwidG9VcHBlckNhc2UiLCJvcHRzIiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImNvbG9ycyIsImlzQm9vbGVhbiIsIl9leHRlbmQiLCJpc1VuZGVmaW5lZCIsInN0eWxpemVXaXRoQ29sb3IiLCJmb3JtYXRWYWx1ZSIsInN0eWxlVHlwZSIsInN0eWxlIiwic3R5bGVzIiwicmV0IiwicHJpbWl0aXZlIiwic2ltcGxlIiwiaXNOdW1iZXIiLCJmb3JtYXRQcmltaXRpdmUiLCJ2aXNpYmxlS2V5cyIsImhhc2giLCJpZHgiLCJhcnJheVRvSGFzaCIsImlzRXJyb3IiLCJmb3JtYXRFcnJvciIsIm91dHB1dCIsImJyYWNlcyIsInRvVVRDU3RyaW5nIiwiZm9ybWF0UHJvcGVydHkiLCJmb3JtYXRBcnJheSIsInJlZHVjZSIsInByZXYiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsImxpbmUiLCJhciIsInJlIiwiZCIsInBhZCIsImRlYnVnbG9nIiwicGlkIiwidHlwZXMiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwiaXNQcmltaXRpdmUiLCJpc0J1ZmZlciIsIm1vbnRocyIsInByb3AiLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1vbnRoIiwiaW5oZXJpdHMiLCJvcmlnaW4iLCJrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wiLCJjYWxsYmFja2lmeU9uUmVqZWN0ZWQiLCJjYiIsIm5ld1JlYXNvbiIsInByb21pc2lmeSIsIm9yaWdpbmFsIiwicHJvbWlzZVJlc29sdmUiLCJwcm9taXNlUmVqZWN0IiwicHJvbWlzZSIsInJlamVjdCIsImNhbGxiYWNraWZ5IiwiY2FsbGJhY2tpZmllZCIsIm1heWJlQ2IiLCJyZWoiLCJnbG9iYWxUaGlzIiwiY2hyb21lIiwiQ0hST01FX1NFTkRfTUVTU0FHRV9DQUxMQkFDS19OT19SRVNQT05TRV9NRVNTQUdFIiwid3JhcEFQSXMiLCJleHRlbnNpb25BUElzIiwiYXBpTWV0YWRhdGEiLCJEZWZhdWx0V2Vha01hcCIsImNyZWF0ZUl0ZW0iLCJtYWtlQ2FsbGJhY2siLCJtZXRhZGF0YSIsImNhbGxiYWNrQXJncyIsImxhc3RFcnJvciIsInNpbmdsZUNhbGxiYWNrQXJnIiwicGx1cmFsaXplQXJndW1lbnRzIiwibnVtQXJncyIsIndyYXBNZXRob2QiLCJ3cmFwcGVyIiwidGFyZ2V0TWV0aG9kIiwidGhpc09iaiIsIndyYXBPYmplY3QiLCJ3cmFwcGVycyIsImNhY2hlIiwiaGFuZGxlcnMiLCJwcm94eVRhcmdldCIsIm1pbkFyZ3MiLCJtYXhBcmdzIiwiZmFsbGJhY2tUb05vQ2FsbGJhY2siLCJjYkVycm9yIiwibm9DYWxsYmFjayIsIndyYXBBc3luY0Z1bmN0aW9uIiwiZGVsZXRlUHJvcGVydHkiLCJ3cmFwRXZlbnQiLCJ3cmFwcGVyTWFwIiwibGlzdGVuZXIiLCJoYXNMaXN0ZW5lciIsIm9uUmVxdWVzdEZpbmlzaGVkV3JhcHBlcnMiLCJyZXEiLCJ3cmFwcGVkUmVxIiwiZ2V0Q29udGVudCIsIm9uTWVzc2FnZVdyYXBwZXJzIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwid3JhcHBlZFNlbmRSZXNwb25zZSIsImRpZENhbGxTZW5kUmVzcG9uc2UiLCJzZW5kUmVzcG9uc2VQcm9taXNlIiwiaXNSZXN1bHRUaGVuYWJsZSIsIl9fbW96V2ViRXh0ZW5zaW9uUG9seWZpbGxSZWplY3RfXyIsIndyYXBwZWRTZW5kTWVzc2FnZUNhbGxiYWNrIiwicmVwbHkiLCJ3cmFwcGVkU2VuZE1lc3NhZ2UiLCJhcGlOYW1lc3BhY2VPYmoiLCJ3cmFwcGVkQ2IiLCJzdGF0aWNXcmFwcGVycyIsImRldnRvb2xzIiwibmV0d29yayIsIm9uUmVxdWVzdEZpbmlzaGVkIiwib25NZXNzYWdlIiwib25NZXNzYWdlRXh0ZXJuYWwiLCJzZXR0aW5nTWV0YWRhdGEiLCJjbGVhciIsInByaXZhY3kiLCJzZXJ2aWNlcyIsIndlYnNpdGVzIiwiYXZhaWxhYmxlVHlwZWRBcnJheXMiLCJnIiwidHlwZWRBcnJheXMiLCIkc2xpY2UiLCJ0eXBlZEFycmF5IiwicHJvdG8iLCJzdXBlclByb3RvIiwidGFnIiwiZm91bmQiLCJnZXR0ZXIiLCJ0cnlTbGljZXMiLCJ0cnlUeXBlZEFycmF5cyIsInBvc3NpYmxlTmFtZXMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJhY3RpdmVUZXJtcyIsImdyYWRUZXJtIiwidWdUZXJtIiwidGVybUVsIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9