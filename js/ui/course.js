/*! For license information please see course.js.LICENSE.txt */
(()=>{var t={4148:(t,e,r)=>{"use strict";var n=r(5606);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(n.key),"symbol"===o(i)?i:String(i)),n)}var i}function a(t,e,r){return e&&i(t.prototype,e),r&&i(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}var s,c,l=r(9597).codes,u=l.ERR_AMBIGUOUS_ARGUMENT,f=l.ERR_INVALID_ARG_TYPE,p=l.ERR_INVALID_ARG_VALUE,y=l.ERR_INVALID_RETURN_VALUE,g=l.ERR_MISSING_ARGS,d=r(3918),m=r(537).inspect,h=r(537).types,v=h.isPromise,b=h.isRegExp,A=r(1514)(),w=r(9394)(),x=r(8075)("RegExp.prototype.test");function j(){var t=r(2299);s=t.isDeepEqual,c=t.isDeepStrictEqual}new Map;var S=!1,O=t.exports=T,P={};function E(t){if(t.message instanceof Error)throw t.message;throw new d(t)}function _(t,e,r,n){if(!r){var o=!1;if(0===e)o=!0,n="No value argument passed to `assert.ok()`";else if(n instanceof Error)throw n;var i=new d({actual:r,expected:!0,message:n,operator:"==",stackStartFn:t});throw i.generatedMessage=o,i}}function T(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];_.apply(void 0,[T,e.length].concat(e))}O.fail=function t(e,r,o,i,a){var s,c=arguments.length;if(0===c?s="Failed":1===c?(o=e,e=void 0):(!1===S&&(S=!0,(n.emitWarning?n.emitWarning:console.warn.bind(console))("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.","DeprecationWarning","DEP0094")),2===c&&(i="!=")),o instanceof Error)throw o;var l={actual:e,expected:r,operator:void 0===i?"fail":i,stackStartFn:a||t};void 0!==o&&(l.message=o);var u=new d(l);throw s&&(u.message=s,u.generatedMessage=!0),u},O.AssertionError=d,O.ok=T,O.equal=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");e!=r&&E({actual:e,expected:r,message:n,operator:"==",stackStartFn:t})},O.notEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");e==r&&E({actual:e,expected:r,message:n,operator:"!=",stackStartFn:t})},O.deepEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),s(e,r)||E({actual:e,expected:r,message:n,operator:"deepEqual",stackStartFn:t})},O.notDeepEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),s(e,r)&&E({actual:e,expected:r,message:n,operator:"notDeepEqual",stackStartFn:t})},O.deepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),c(e,r)||E({actual:e,expected:r,message:n,operator:"deepStrictEqual",stackStartFn:t})},O.notDeepStrictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");void 0===s&&j(),c(e,r)&&E({actual:e,expected:r,message:n,operator:"notDeepStrictEqual",stackStartFn:t})},O.strictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");w(e,r)||E({actual:e,expected:r,message:n,operator:"strictEqual",stackStartFn:t})},O.notStrictEqual=function t(e,r,n){if(arguments.length<2)throw new g("actual","expected");w(e,r)&&E({actual:e,expected:r,message:n,operator:"notStrictEqual",stackStartFn:t})};var k=a((function t(e,r,n){var o=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),r.forEach((function(t){t in e&&(void 0!==n&&"string"==typeof n[t]&&b(e[t])&&x(e[t],n[t])?o[t]=n[t]:o[t]=e[t])}))}));function I(t,e,r,n){if("function"!=typeof e){if(b(e))return x(e,t);if(2===arguments.length)throw new f("expected",["Function","RegExp"],e);if("object"!==o(t)||null===t){var i=new d({actual:t,expected:e,message:r,operator:"deepStrictEqual",stackStartFn:n});throw i.operator=n.name,i}var a=Object.keys(e);if(e instanceof Error)a.push("name","message");else if(0===a.length)throw new p("error",e,"may not be an empty object");return void 0===s&&j(),a.forEach((function(o){"string"==typeof t[o]&&b(e[o])&&x(e[o],t[o])||function(t,e,r,n,o,i){if(!(r in t)||!c(t[r],e[r])){if(!n){var a=new k(t,o),s=new k(e,o,t),l=new d({actual:a,expected:s,operator:"deepStrictEqual",stackStartFn:i});throw l.actual=t,l.expected=e,l.operator=i.name,l}E({actual:t,expected:e,message:n,operator:i.name,stackStartFn:i})}}(t,e,o,r,a,n)})),!0}return void 0!==e.prototype&&t instanceof e||!Error.isPrototypeOf(e)&&!0===e.call({},t)}function U(t){if("function"!=typeof t)throw new f("fn","Function",t);try{t()}catch(t){return t}return P}function D(t){return v(t)||null!==t&&"object"===o(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function C(t){return Promise.resolve().then((function(){var e;if("function"==typeof t){if(!D(e=t()))throw new y("instance of Promise","promiseFn",e)}else{if(!D(t))throw new f("promiseFn",["Function","Promise"],t);e=t}return Promise.resolve().then((function(){return e})).then((function(){return P})).catch((function(t){return t}))}))}function R(t,e,r,n){if("string"==typeof r){if(4===arguments.length)throw new f("error",["Object","Error","Function","RegExp"],r);if("object"===o(e)&&null!==e){if(e.message===r)throw new u("error/message",'The error message "'.concat(e.message,'" is identical to the message.'))}else if(e===r)throw new u("error/message",'The error "'.concat(e,'" is identical to the message.'));n=r,r=void 0}else if(null!=r&&"object"!==o(r)&&"function"!=typeof r)throw new f("error",["Object","Error","Function","RegExp"],r);if(e===P){var i="";r&&r.name&&(i+=" (".concat(r.name,")")),i+=n?": ".concat(n):".";var a="rejects"===t.name?"rejection":"exception";E({actual:void 0,expected:r,operator:t.name,message:"Missing expected ".concat(a).concat(i),stackStartFn:t})}if(r&&!I(e,r,n,t))throw e}function F(t,e,r,n){if(e!==P){if("string"==typeof r&&(n=r,r=void 0),!r||I(e,r)){var o=n?": ".concat(n):".",i="doesNotReject"===t.name?"rejection":"exception";E({actual:e,expected:r,operator:t.name,message:"Got unwanted ".concat(i).concat(o,"\n")+'Actual message: "'.concat(e&&e.message,'"'),stackStartFn:t})}throw e}}function B(t,e,r,n,i){if(!b(e))throw new f("regexp","RegExp",e);var a="match"===i;if("string"!=typeof t||x(e,t)!==a){if(r instanceof Error)throw r;var s=!r;r=r||("string"!=typeof t?'The "string" argument must be of type string. Received type '+"".concat(o(t)," (").concat(m(t),")"):(a?"The input did not match the regular expression ":"The input was expected to not match the regular expression ")+"".concat(m(e),". Input:\n\n").concat(m(t),"\n"));var c=new d({actual:t,expected:e,message:r,operator:i,stackStartFn:n});throw c.generatedMessage=s,c}}function N(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];_.apply(void 0,[N,e.length].concat(e))}O.throws=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];R.apply(void 0,[t,U(e)].concat(n))},O.rejects=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return C(e).then((function(e){return R.apply(void 0,[t,e].concat(n))}))},O.doesNotThrow=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];F.apply(void 0,[t,U(e)].concat(n))},O.doesNotReject=function t(e){for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];return C(e).then((function(e){return F.apply(void 0,[t,e].concat(n))}))},O.ifError=function t(e){if(null!=e){var r="ifError got unwanted exception: ";"object"===o(e)&&"string"==typeof e.message?0===e.message.length&&e.constructor?r+=e.constructor.name:r+=e.message:r+=m(e);var n=new d({actual:e,expected:null,operator:"ifError",message:r,stackStartFn:t}),i=e.stack;if("string"==typeof i){var a=i.split("\n");a.shift();for(var s=n.stack.split("\n"),c=0;c<a.length;c++){var l=s.indexOf(a[c]);if(-1!==l){s=s.slice(0,l);break}}n.stack="".concat(s.join("\n"),"\n").concat(a.join("\n"))}throw n}},O.match=function t(e,r,n){B(e,r,n,t,"match")},O.doesNotMatch=function t(e,r,n){B(e,r,n,t,"doesNotMatch")},O.strict=A(N,O,{equal:O.strictEqual,deepEqual:O.deepStrictEqual,notEqual:O.notStrictEqual,notDeepEqual:O.notDeepStrictEqual}),O.strict.strict=O.strict},3918:(t,e,r)=>{"use strict";var n=r(5606);function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){var n,o,i;n=t,o=e,i=r[e],(o=s(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!==d(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==d(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===d(e)?e:String(e)}function c(t,e){if(e&&("object"===d(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return l(t)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function u(t){var e="function"==typeof Map?new Map:void 0;return u=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return f(t,arguments,g(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),y(n,t)},u(t)}function f(t,e,r){return f=p()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&y(o,r.prototype),o},f.apply(null,arguments)}function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function y(t,e){return y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},y(t,e)}function g(t){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},g(t)}function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}var m=r(537).inspect,h=r(9597).codes.ERR_INVALID_ARG_TYPE;function v(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}var b="",A="",w="",x="",j={deepStrictEqual:"Expected values to be strictly deep-equal:",strictEqual:"Expected values to be strictly equal:",strictEqualObject:'Expected "actual" to be reference-equal to "expected":',deepEqual:"Expected values to be loosely deep-equal:",equal:"Expected values to be loosely equal:",notDeepStrictEqual:'Expected "actual" not to be strictly deep-equal to:',notStrictEqual:'Expected "actual" to be strictly unequal to:',notStrictEqualObject:'Expected "actual" not to be reference-equal to "expected":',notDeepEqual:'Expected "actual" not to be loosely deep-equal to:',notEqual:'Expected "actual" to be loosely unequal to:',notIdentical:"Values identical but not reference-equal:"};function S(t){var e=Object.keys(t),r=Object.create(Object.getPrototypeOf(t));return e.forEach((function(e){r[e]=t[e]})),Object.defineProperty(r,"message",{value:t.message}),r}function O(t){return m(t,{compact:!1,customInspect:!1,depth:1e3,maxArrayLength:1/0,showHidden:!1,breakLength:1/0,showProxy:!1,sorted:!0,getters:!0})}var P=function(t,e){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&y(t,e)}(P,t);var r,o,s,u,f=(r=P,o=p(),function(){var t,e=g(r);if(o){var n=g(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return c(this,t)});function P(t){var e;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,P),"object"!==d(t)||null===t)throw new h("options","Object",t);var r=t.message,o=t.operator,i=t.stackStartFn,a=t.actual,s=t.expected,u=Error.stackTraceLimit;if(Error.stackTraceLimit=0,null!=r)e=f.call(this,String(r));else if(n.stderr&&n.stderr.isTTY&&(n.stderr&&n.stderr.getColorDepth&&1!==n.stderr.getColorDepth()?(b="[34m",A="[32m",x="[39m",w="[31m"):(b="",A="",x="",w="")),"object"===d(a)&&null!==a&&"object"===d(s)&&null!==s&&"stack"in a&&a instanceof Error&&"stack"in s&&s instanceof Error&&(a=S(a),s=S(s)),"deepStrictEqual"===o||"strictEqual"===o)e=f.call(this,function(t,e,r){var o="",i="",a=0,s="",c=!1,l=O(t),u=l.split("\n"),f=O(e).split("\n"),p=0,y="";if("strictEqual"===r&&"object"===d(t)&&"object"===d(e)&&null!==t&&null!==e&&(r="strictEqualObject"),1===u.length&&1===f.length&&u[0]!==f[0]){var g=u[0].length+f[0].length;if(g<=10){if(!("object"===d(t)&&null!==t||"object"===d(e)&&null!==e||0===t&&0===e))return"".concat(j[r],"\n\n")+"".concat(u[0]," !== ").concat(f[0],"\n")}else if("strictEqualObject"!==r&&g<(n.stderr&&n.stderr.isTTY?n.stderr.columns:80)){for(;u[0][p]===f[0][p];)p++;p>2&&(y="\n  ".concat(function(t,e){if(e=Math.floor(e),0==t.length||0==e)return"";var r=t.length*e;for(e=Math.floor(Math.log(e)/Math.log(2));e;)t+=t,e--;return t+t.substring(0,r-t.length)}(" ",p),"^"),p=0)}}for(var m=u[u.length-1],h=f[f.length-1];m===h&&(p++<2?s="\n  ".concat(m).concat(s):o=m,u.pop(),f.pop(),0!==u.length&&0!==f.length);)m=u[u.length-1],h=f[f.length-1];var S=Math.max(u.length,f.length);if(0===S){var P=l.split("\n");if(P.length>30)for(P[26]="".concat(b,"...").concat(x);P.length>27;)P.pop();return"".concat(j.notIdentical,"\n\n").concat(P.join("\n"),"\n")}p>3&&(s="\n".concat(b,"...").concat(x).concat(s),c=!0),""!==o&&(s="\n  ".concat(o).concat(s),o="");var E=0,_=j[r]+"\n".concat(A,"+ actual").concat(x," ").concat(w,"- expected").concat(x),T=" ".concat(b,"...").concat(x," Lines skipped");for(p=0;p<S;p++){var k=p-a;if(u.length<p+1)k>1&&p>2&&(k>4?(i+="\n".concat(b,"...").concat(x),c=!0):k>3&&(i+="\n  ".concat(f[p-2]),E++),i+="\n  ".concat(f[p-1]),E++),a=p,o+="\n".concat(w,"-").concat(x," ").concat(f[p]),E++;else if(f.length<p+1)k>1&&p>2&&(k>4?(i+="\n".concat(b,"...").concat(x),c=!0):k>3&&(i+="\n  ".concat(u[p-2]),E++),i+="\n  ".concat(u[p-1]),E++),a=p,i+="\n".concat(A,"+").concat(x," ").concat(u[p]),E++;else{var I=f[p],U=u[p],D=U!==I&&(!v(U,",")||U.slice(0,-1)!==I);D&&v(I,",")&&I.slice(0,-1)===U&&(D=!1,U+=","),D?(k>1&&p>2&&(k>4?(i+="\n".concat(b,"...").concat(x),c=!0):k>3&&(i+="\n  ".concat(u[p-2]),E++),i+="\n  ".concat(u[p-1]),E++),a=p,i+="\n".concat(A,"+").concat(x," ").concat(U),o+="\n".concat(w,"-").concat(x," ").concat(I),E+=2):(i+=o,o="",1!==k&&0!==p||(i+="\n  ".concat(U),E++))}if(E>20&&p<S-2)return"".concat(_).concat(T,"\n").concat(i,"\n").concat(b,"...").concat(x).concat(o,"\n")+"".concat(b,"...").concat(x)}return"".concat(_).concat(c?T:"","\n").concat(i).concat(o).concat(s).concat(y)}(a,s,o));else if("notDeepStrictEqual"===o||"notStrictEqual"===o){var p=j[o],y=O(a).split("\n");if("notStrictEqual"===o&&"object"===d(a)&&null!==a&&(p=j.notStrictEqualObject),y.length>30)for(y[26]="".concat(b,"...").concat(x);y.length>27;)y.pop();e=1===y.length?f.call(this,"".concat(p," ").concat(y[0])):f.call(this,"".concat(p,"\n\n").concat(y.join("\n"),"\n"))}else{var g=O(a),m="",E=j[o];"notDeepEqual"===o||"notEqual"===o?(g="".concat(j[o],"\n\n").concat(g)).length>1024&&(g="".concat(g.slice(0,1021),"...")):(m="".concat(O(s)),g.length>512&&(g="".concat(g.slice(0,509),"...")),m.length>512&&(m="".concat(m.slice(0,509),"...")),"deepEqual"===o||"equal"===o?g="".concat(E,"\n\n").concat(g,"\n\nshould equal\n\n"):m=" ".concat(o," ").concat(m)),e=f.call(this,"".concat(g).concat(m))}return Error.stackTraceLimit=u,e.generatedMessage=!r,Object.defineProperty(l(e),"name",{value:"AssertionError [ERR_ASSERTION]",enumerable:!1,writable:!0,configurable:!0}),e.code="ERR_ASSERTION",e.actual=a,e.expected=s,e.operator=o,Error.captureStackTrace&&Error.captureStackTrace(l(e),i),e.stack,e.name="AssertionError",c(e)}return s=P,(u=[{key:"toString",value:function(){return"".concat(this.name," [").concat(this.code,"]: ").concat(this.message)}},{key:e,value:function(t,e){return m(this,i(i({},e),{},{customInspect:!1,depth:0}))}}])&&a(s.prototype,u),Object.defineProperty(s,"prototype",{writable:!1}),P}(u(Error),m.custom);t.exports=P},9597:(t,e,r)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t,e){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},o(t,e)}function i(t){return i=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},i(t)}var a,s,c={};function l(t,e,r){r||(r=Error);var a=function(r){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&o(t,e)}(u,r);var a,s,c,l=(s=u,c=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=i(s);if(c){var r=i(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===n(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}(this,t)});function u(r,n,o){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,u),i=l.call(this,function(t,r,n){return"string"==typeof e?e:e(t,r,n)}(r,n,o)),i.code=t,i}return a=u,Object.defineProperty(a,"prototype",{writable:!1}),a}(r);c[t]=a}function u(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}l("ERR_AMBIGUOUS_ARGUMENT",'The "%s" argument is ambiguous. %s',TypeError),l("ERR_INVALID_ARG_TYPE",(function(t,e,o){var i,s,c,l,f;if(void 0===a&&(a=r(4148)),a("string"==typeof t,"'name' must be a string"),"string"==typeof e&&(s="not ",e.substr(0,4)===s)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-9,r)===e}(t," argument"))c="The ".concat(t," ").concat(i," ").concat(u(e,"type"));else{var p=("number"!=typeof f&&(f=0),f+1>(l=t).length||-1===l.indexOf(".",f)?"argument":"property");c='The "'.concat(t,'" ').concat(p," ").concat(i," ").concat(u(e,"type"))}return c+". Received type ".concat(n(o))}),TypeError),l("ERR_INVALID_ARG_VALUE",(function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"is invalid";void 0===s&&(s=r(537));var o=s.inspect(e);return o.length>128&&(o="".concat(o.slice(0,128),"...")),"The argument '".concat(t,"' ").concat(n,". Received ").concat(o)}),TypeError,RangeError),l("ERR_INVALID_RETURN_VALUE",(function(t,e,r){var o;return o=r&&r.constructor&&r.constructor.name?"instance of ".concat(r.constructor.name):"type ".concat(n(r)),"Expected ".concat(t,' to be returned from the "').concat(e,'"')+" function but got ".concat(o,".")}),TypeError),l("ERR_MISSING_ARGS",(function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];void 0===a&&(a=r(4148)),a(e.length>0,"At least one arg needs to be specified");var o="The ",i=e.length;switch(e=e.map((function(t){return'"'.concat(t,'"')})),i){case 1:o+="".concat(e[0]," argument");break;case 2:o+="".concat(e[0]," and ").concat(e[1]," arguments");break;default:o+=e.slice(0,i-1).join(", "),o+=", and ".concat(e[i-1]," arguments")}return"".concat(o," must be specified")}),TypeError),t.exports.codes=c},2299:(t,e,r)=>{"use strict";function n(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,s=[],c=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(s.push(n.value),s.length!==e);c=!0);}catch(t){l=!0,o=t}finally{try{if(!c&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return s}}(t,e)||function(t,e){if(t){if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}var a=void 0!==/a/g.flags,s=function(t){var e=[];return t.forEach((function(t){return e.push(t)})),e},c=function(t){var e=[];return t.forEach((function(t,r){return e.push([r,t])})),e},l=Object.is?Object.is:r(7653),u=Object.getOwnPropertySymbols?Object.getOwnPropertySymbols:function(){return[]},f=Number.isNaN?Number.isNaN:r(4133);function p(t){return t.call.bind(t)}var y=p(Object.prototype.hasOwnProperty),g=p(Object.prototype.propertyIsEnumerable),d=p(Object.prototype.toString),m=r(537).types,h=m.isAnyArrayBuffer,v=m.isArrayBufferView,b=m.isDate,A=m.isMap,w=m.isRegExp,x=m.isSet,j=m.isNativeError,S=m.isBoxedPrimitive,O=m.isNumberObject,P=m.isStringObject,E=m.isBooleanObject,_=m.isBigIntObject,T=m.isSymbolObject,k=m.isFloat32Array,I=m.isFloat64Array;function U(t){if(0===t.length||t.length>10)return!0;for(var e=0;e<t.length;e++){var r=t.charCodeAt(e);if(r<48||r>57)return!0}return 10===t.length&&t>=Math.pow(2,32)}function D(t){return Object.keys(t).filter(U).concat(u(t).filter(Object.prototype.propertyIsEnumerable.bind(t)))}function C(t,e){if(t===e)return 0;for(var r=t.length,n=e.length,o=0,i=Math.min(r,n);o<i;++o)if(t[o]!==e[o]){r=t[o],n=e[o];break}return r<n?-1:n<r?1:0}var R=0,F=1,B=2,N=3;function M(t,e,r,n){if(t===e)return 0!==t||!r||l(t,e);if(r){if("object"!==i(t))return"number"==typeof t&&f(t)&&f(e);if("object"!==i(e)||null===t||null===e)return!1;if(Object.getPrototypeOf(t)!==Object.getPrototypeOf(e))return!1}else{if(null===t||"object"!==i(t))return(null===e||"object"!==i(e))&&t==e;if(null===e||"object"!==i(e))return!1}var o,s,c,u,p=d(t);if(p!==d(e))return!1;if(Array.isArray(t)){if(t.length!==e.length)return!1;var y=D(t),g=D(e);return y.length===g.length&&q(t,e,r,n,F,y)}if("[object Object]"===p&&(!A(t)&&A(e)||!x(t)&&x(e)))return!1;if(b(t)){if(!b(e)||Date.prototype.getTime.call(t)!==Date.prototype.getTime.call(e))return!1}else if(w(t)){if(!w(e)||(c=t,u=e,!(a?c.source===u.source&&c.flags===u.flags:RegExp.prototype.toString.call(c)===RegExp.prototype.toString.call(u))))return!1}else if(j(t)||t instanceof Error){if(t.message!==e.message||t.name!==e.name)return!1}else{if(v(t)){if(r||!k(t)&&!I(t)){if(!function(t,e){return t.byteLength===e.byteLength&&0===C(new Uint8Array(t.buffer,t.byteOffset,t.byteLength),new Uint8Array(e.buffer,e.byteOffset,e.byteLength))}(t,e))return!1}else if(!function(t,e){if(t.byteLength!==e.byteLength)return!1;for(var r=0;r<t.byteLength;r++)if(t[r]!==e[r])return!1;return!0}(t,e))return!1;var m=D(t),U=D(e);return m.length===U.length&&q(t,e,r,n,R,m)}if(x(t))return!(!x(e)||t.size!==e.size)&&q(t,e,r,n,B);if(A(t))return!(!A(e)||t.size!==e.size)&&q(t,e,r,n,N);if(h(t)){if(s=e,(o=t).byteLength!==s.byteLength||0!==C(new Uint8Array(o),new Uint8Array(s)))return!1}else if(S(t)&&!function(t,e){return O(t)?O(e)&&l(Number.prototype.valueOf.call(t),Number.prototype.valueOf.call(e)):P(t)?P(e)&&String.prototype.valueOf.call(t)===String.prototype.valueOf.call(e):E(t)?E(e)&&Boolean.prototype.valueOf.call(t)===Boolean.prototype.valueOf.call(e):_(t)?_(e)&&BigInt.prototype.valueOf.call(t)===BigInt.prototype.valueOf.call(e):T(e)&&Symbol.prototype.valueOf.call(t)===Symbol.prototype.valueOf.call(e)}(t,e))return!1}return q(t,e,r,n,R)}function $(t,e){return e.filter((function(e){return g(t,e)}))}function q(t,e,r,o,a,l){if(5===arguments.length){l=Object.keys(t);var f=Object.keys(e);if(l.length!==f.length)return!1}for(var p=0;p<l.length;p++)if(!y(e,l[p]))return!1;if(r&&5===arguments.length){var d=u(t);if(0!==d.length){var m=0;for(p=0;p<d.length;p++){var h=d[p];if(g(t,h)){if(!g(e,h))return!1;l.push(h),m++}else if(g(e,h))return!1}var v=u(e);if(d.length!==v.length&&$(e,v).length!==m)return!1}else{var b=u(e);if(0!==b.length&&0!==$(e,b).length)return!1}}if(0===l.length&&(a===R||a===F&&0===t.length||0===t.size))return!0;if(void 0===o)o={val1:new Map,val2:new Map,position:0};else{var A=o.val1.get(t);if(void 0!==A){var w=o.val2.get(e);if(void 0!==w)return A===w}o.position++}o.val1.set(t,o.position),o.val2.set(e,o.position);var x=function(t,e,r,o,a,l){var u=0;if(l===B){if(!function(t,e,r,n){for(var o=null,a=s(t),c=0;c<a.length;c++){var l=a[c];if("object"===i(l)&&null!==l)null===o&&(o=new Set),o.add(l);else if(!e.has(l)){if(r)return!1;if(!G(t,e,l))return!1;null===o&&(o=new Set),o.add(l)}}if(null!==o){for(var u=s(e),f=0;f<u.length;f++){var p=u[f];if("object"===i(p)&&null!==p){if(!L(o,p,r,n))return!1}else if(!r&&!t.has(p)&&!L(o,p,r,n))return!1}return 0===o.size}return!0}(t,e,r,a))return!1}else if(l===N){if(!function(t,e,r,o){for(var a=null,s=c(t),l=0;l<s.length;l++){var u=n(s[l],2),f=u[0],p=u[1];if("object"===i(f)&&null!==f)null===a&&(a=new Set),a.add(f);else{var y=e.get(f);if(void 0===y&&!e.has(f)||!M(p,y,r,o)){if(r)return!1;if(!W(t,e,f,p,o))return!1;null===a&&(a=new Set),a.add(f)}}}if(null!==a){for(var g=c(e),d=0;d<g.length;d++){var m=n(g[d],2),h=m[0],v=m[1];if("object"===i(h)&&null!==h){if(!V(a,t,h,v,r,o))return!1}else if(!(r||t.has(h)&&M(t.get(h),v,!1,o)||V(a,t,h,v,!1,o)))return!1}return 0===a.size}return!0}(t,e,r,a))return!1}else if(l===F)for(;u<t.length;u++){if(!y(t,u)){if(y(e,u))return!1;for(var f=Object.keys(t);u<f.length;u++){var p=f[u];if(!y(e,p)||!M(t[p],e[p],r,a))return!1}return f.length===Object.keys(e).length}if(!y(e,u)||!M(t[u],e[u],r,a))return!1}for(u=0;u<o.length;u++){var g=o[u];if(!M(t[g],e[g],r,a))return!1}return!0}(t,e,r,l,o,a);return o.val1.delete(t),o.val2.delete(e),x}function L(t,e,r,n){for(var o=s(t),i=0;i<o.length;i++){var a=o[i];if(M(e,a,r,n))return t.delete(a),!0}return!1}function z(t){switch(i(t)){case"undefined":return null;case"object":return;case"symbol":return!1;case"string":t=+t;case"number":if(f(t))return!1}return!0}function G(t,e,r){var n=z(r);return null!=n?n:e.has(n)&&!t.has(n)}function W(t,e,r,n,o){var i=z(r);if(null!=i)return i;var a=e.get(i);return!(void 0===a&&!e.has(i)||!M(n,a,!1,o))&&!t.has(i)&&M(n,a,!1,o)}function V(t,e,r,n,o,i){for(var a=s(t),c=0;c<a.length;c++){var l=a[c];if(M(r,l,o,i)&&M(n,e.get(l),o,i))return t.delete(l),!0}return!1}t.exports={isDeepEqual:function(t,e){return M(t,e,!1)},isDeepStrictEqual:function(t,e){return M(t,e,!0)}}},8075:(t,e,r)=>{"use strict";var n=r(453),o=r(487),i=o(n("String.prototype.indexOf"));t.exports=function(t,e){var r=n(t,!!e);return"function"==typeof r&&i(t,".prototype.")>-1?o(r):r}},487:(t,e,r)=>{"use strict";var n=r(6743),o=r(453),i=r(6897),a=r(9675),s=o("%Function.prototype.apply%"),c=o("%Function.prototype.call%"),l=o("%Reflect.apply%",!0)||n.call(c,s),u=r(655),f=o("%Math.max%");t.exports=function(t){if("function"!=typeof t)throw new a("a function is required");var e=l(n,c,arguments);return i(e,1+f(0,t.length-(arguments.length-1)),!0)};var p=function(){return l(n,s,arguments)};u?u(t.exports,"apply",{value:p}):t.exports.apply=p},41:(t,e,r)=>{"use strict";var n=r(655),o=r(8068),i=r(9675),a=r(5795);t.exports=function(t,e,r){if(!t||"object"!=typeof t&&"function"!=typeof t)throw new i("`obj` must be an object or a function`");if("string"!=typeof e&&"symbol"!=typeof e)throw new i("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new i("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new i("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new i("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new i("`loose`, if provided, must be a boolean");var s=arguments.length>3?arguments[3]:null,c=arguments.length>4?arguments[4]:null,l=arguments.length>5?arguments[5]:null,u=arguments.length>6&&arguments[6],f=!!a&&a(t,e);if(n)n(t,e,{configurable:null===l&&f?f.configurable:!l,enumerable:null===s&&f?f.enumerable:!s,value:r,writable:null===c&&f?f.writable:!c});else{if(!u&&(s||c||l))throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");t[e]=r}}},8452:(t,e,r)=>{"use strict";var n=r(1189),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),i=Object.prototype.toString,a=Array.prototype.concat,s=r(41),c=r(592)(),l=function(t,e,r,n){if(e in t)if(!0===n){if(t[e]===r)return}else if("function"!=typeof(o=n)||"[object Function]"!==i.call(o)||!n())return;var o;c?s(t,e,r,!0):s(t,e,r)},u=function(t,e){var r=arguments.length>2?arguments[2]:{},i=n(e);o&&(i=a.call(i,Object.getOwnPropertySymbols(e)));for(var s=0;s<i.length;s+=1)l(t,i[s],e[i[s]],r[i[s]])};u.supportsDescriptors=!!c,t.exports=u},655:(t,e,r)=>{"use strict";var n=r(453)("%Object.defineProperty%",!0)||!1;if(n)try{n({},"a",{value:1})}catch(t){n=!1}t.exports=n},1237:t=>{"use strict";t.exports=EvalError},9383:t=>{"use strict";t.exports=Error},9290:t=>{"use strict";t.exports=RangeError},9538:t=>{"use strict";t.exports=ReferenceError},8068:t=>{"use strict";t.exports=SyntaxError},9675:t=>{"use strict";t.exports=TypeError},5345:t=>{"use strict";t.exports=URIError},2682:(t,e,r)=>{"use strict";var n=r(9600),o=Object.prototype.toString,i=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){if(!n(e))throw new TypeError("iterator must be a function");var a;arguments.length>=3&&(a=r),"[object Array]"===o.call(t)?function(t,e,r){for(var n=0,o=t.length;n<o;n++)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a):"string"==typeof t?function(t,e,r){for(var n=0,o=t.length;n<o;n++)null==r?e(t.charAt(n),n,t):e.call(r,t.charAt(n),n,t)}(t,e,a):function(t,e,r){for(var n in t)i.call(t,n)&&(null==r?e(t[n],n,t):e.call(r,t[n],n,t))}(t,e,a)}},9353:t=>{"use strict";var e=Object.prototype.toString,r=Math.max,n=function(t,e){for(var r=[],n=0;n<t.length;n+=1)r[n]=t[n];for(var o=0;o<e.length;o+=1)r[o+t.length]=e[o];return r};t.exports=function(t){var o=this;if("function"!=typeof o||"[object Function]"!==e.apply(o))throw new TypeError("Function.prototype.bind called on incompatible "+o);for(var i,a=function(t,e){for(var r=[],n=1,o=0;n<t.length;n+=1,o+=1)r[o]=t[n];return r}(arguments),s=r(0,o.length-a.length),c=[],l=0;l<s;l++)c[l]="$"+l;if(i=Function("binder","return function ("+function(t,e){for(var r="",n=0;n<t.length;n+=1)r+=t[n],n+1<t.length&&(r+=",");return r}(c)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var e=o.apply(this,n(a,arguments));return Object(e)===e?e:this}return o.apply(t,n(a,arguments))})),o.prototype){var u=function(){};u.prototype=o.prototype,i.prototype=new u,u.prototype=null}return i}},6743:(t,e,r)=>{"use strict";var n=r(9353);t.exports=Function.prototype.bind||n},453:(t,e,r)=>{"use strict";var n,o=r(9383),i=r(1237),a=r(9290),s=r(9538),c=r(8068),l=r(9675),u=r(5345),f=Function,p=function(t){try{return f('"use strict"; return ('+t+").constructor;")()}catch(t){}},y=Object.getOwnPropertyDescriptor;if(y)try{y({},"")}catch(t){y=null}var g=function(){throw new l},d=y?function(){try{return g}catch(t){try{return y(arguments,"callee").get}catch(t){return g}}}():g,m=r(4039)(),h=r(24)(),v=Object.getPrototypeOf||(h?function(t){return t.__proto__}:null),b={},A="undefined"!=typeof Uint8Array&&v?v(Uint8Array):n,w={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?n:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?n:ArrayBuffer,"%ArrayIteratorPrototype%":m&&v?v([][Symbol.iterator]()):n,"%AsyncFromSyncIteratorPrototype%":n,"%AsyncFunction%":b,"%AsyncGenerator%":b,"%AsyncGeneratorFunction%":b,"%AsyncIteratorPrototype%":b,"%Atomics%":"undefined"==typeof Atomics?n:Atomics,"%BigInt%":"undefined"==typeof BigInt?n:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?n:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?n:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?n:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":o,"%eval%":eval,"%EvalError%":i,"%Float32Array%":"undefined"==typeof Float32Array?n:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?n:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?n:FinalizationRegistry,"%Function%":f,"%GeneratorFunction%":b,"%Int8Array%":"undefined"==typeof Int8Array?n:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?n:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?n:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":m&&v?v(v([][Symbol.iterator]())):n,"%JSON%":"object"==typeof JSON?JSON:n,"%Map%":"undefined"==typeof Map?n:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&m&&v?v((new Map)[Symbol.iterator]()):n,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?n:Promise,"%Proxy%":"undefined"==typeof Proxy?n:Proxy,"%RangeError%":a,"%ReferenceError%":s,"%Reflect%":"undefined"==typeof Reflect?n:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?n:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&m&&v?v((new Set)[Symbol.iterator]()):n,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?n:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":m&&v?v(""[Symbol.iterator]()):n,"%Symbol%":m?Symbol:n,"%SyntaxError%":c,"%ThrowTypeError%":d,"%TypedArray%":A,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?n:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?n:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?n:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?n:Uint32Array,"%URIError%":u,"%WeakMap%":"undefined"==typeof WeakMap?n:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?n:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?n:WeakSet};if(v)try{null.error}catch(t){var x=v(v(t));w["%Error.prototype%"]=x}var j=function t(e){var r;if("%AsyncFunction%"===e)r=p("async function () {}");else if("%GeneratorFunction%"===e)r=p("function* () {}");else if("%AsyncGeneratorFunction%"===e)r=p("async function* () {}");else if("%AsyncGenerator%"===e){var n=t("%AsyncGeneratorFunction%");n&&(r=n.prototype)}else if("%AsyncIteratorPrototype%"===e){var o=t("%AsyncGenerator%");o&&v&&(r=v(o.prototype))}return w[e]=r,r},S={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},O=r(6743),P=r(9957),E=O.call(Function.call,Array.prototype.concat),_=O.call(Function.apply,Array.prototype.splice),T=O.call(Function.call,String.prototype.replace),k=O.call(Function.call,String.prototype.slice),I=O.call(Function.call,RegExp.prototype.exec),U=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,D=/\\(\\)?/g,C=function(t,e){var r,n=t;if(P(S,n)&&(n="%"+(r=S[n])[0]+"%"),P(w,n)){var o=w[n];if(o===b&&(o=j(n)),void 0===o&&!e)throw new l("intrinsic "+t+" exists, but is not available. Please file an issue!");return{alias:r,name:n,value:o}}throw new c("intrinsic "+t+" does not exist!")};t.exports=function(t,e){if("string"!=typeof t||0===t.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof e)throw new l('"allowMissing" argument must be a boolean');if(null===I(/^%?[^%]*%?$/,t))throw new c("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var r=function(t){var e=k(t,0,1),r=k(t,-1);if("%"===e&&"%"!==r)throw new c("invalid intrinsic syntax, expected closing `%`");if("%"===r&&"%"!==e)throw new c("invalid intrinsic syntax, expected opening `%`");var n=[];return T(t,U,(function(t,e,r,o){n[n.length]=r?T(o,D,"$1"):e||t})),n}(t),n=r.length>0?r[0]:"",o=C("%"+n+"%",e),i=o.name,a=o.value,s=!1,u=o.alias;u&&(n=u[0],_(r,E([0,1],u)));for(var f=1,p=!0;f<r.length;f+=1){var g=r[f],d=k(g,0,1),m=k(g,-1);if(('"'===d||"'"===d||"`"===d||'"'===m||"'"===m||"`"===m)&&d!==m)throw new c("property names with quotes must have matching quotes");if("constructor"!==g&&p||(s=!0),P(w,i="%"+(n+="."+g)+"%"))a=w[i];else if(null!=a){if(!(g in a)){if(!e)throw new l("base intrinsic for "+t+" exists, but the property is not available.");return}if(y&&f+1>=r.length){var h=y(a,g);a=(p=!!h)&&"get"in h&&!("originalValue"in h.get)?h.get:a[g]}else p=P(a,g),a=a[g];p&&!s&&(w[i]=a)}}return a}},5795:(t,e,r)=>{"use strict";var n=r(453)("%Object.getOwnPropertyDescriptor%",!0);if(n)try{n([],"length")}catch(t){n=null}t.exports=n},592:(t,e,r)=>{"use strict";var n=r(655),o=function(){return!!n};o.hasArrayLengthDefineBug=function(){if(!n)return null;try{return 1!==n([],"length",{value:1}).length}catch(t){return!0}},t.exports=o},24:t=>{"use strict";var e={__proto__:null,foo:{}},r=Object;t.exports=function(){return{__proto__:e}.foo===e.foo&&!(e instanceof r)}},4039:(t,e,r)=>{"use strict";var n="undefined"!=typeof Symbol&&Symbol,o=r(1333);t.exports=function(){return"function"==typeof n&&"function"==typeof Symbol&&"symbol"==typeof n("foo")&&"symbol"==typeof Symbol("bar")&&o()}},1333:t=>{"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test"),r=Object(e);if("string"==typeof e)return!1;if("[object Symbol]"!==Object.prototype.toString.call(e))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(e in t[e]=42,t)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var n=Object.getOwnPropertySymbols(t);if(1!==n.length||n[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(t,e);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},9092:(t,e,r)=>{"use strict";var n=r(1333);t.exports=function(){return n()&&!!Symbol.toStringTag}},9957:(t,e,r)=>{"use strict";var n=Function.prototype.call,o=Object.prototype.hasOwnProperty,i=r(6743);t.exports=i.call(n,o)},6698:t=>{"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},7244:(t,e,r)=>{"use strict";var n=r(9092)(),o=r(8075)("Object.prototype.toString"),i=function(t){return!(n&&t&&"object"==typeof t&&Symbol.toStringTag in t)&&"[object Arguments]"===o(t)},a=function(t){return!!i(t)||null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Array]"!==o(t)&&"[object Function]"===o(t.callee)},s=function(){return i(arguments)}();i.isLegacyArguments=a,t.exports=s?i:a},9600:t=>{"use strict";var e,r,n=Function.prototype.toString,o="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof o&&"function"==typeof Object.defineProperty)try{e=Object.defineProperty({},"length",{get:function(){throw r}}),r={},o((function(){throw 42}),null,e)}catch(t){t!==r&&(o=null)}else o=null;var i=/^\s*class\b/,a=function(t){try{var e=n.call(t);return i.test(e)}catch(t){return!1}},s=function(t){try{return!a(t)&&(n.call(t),!0)}catch(t){return!1}},c=Object.prototype.toString,l="function"==typeof Symbol&&!!Symbol.toStringTag,u=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var p=document.all;c.call(p)===c.call(document.all)&&(f=function(t){if((u||!t)&&(void 0===t||"object"==typeof t))try{var e=c.call(t);return("[object HTMLAllCollection]"===e||"[object HTML document.all class]"===e||"[object HTMLCollection]"===e||"[object Object]"===e)&&null==t("")}catch(t){}return!1})}t.exports=o?function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;try{o(t,null,e)}catch(t){if(t!==r)return!1}return!a(t)&&s(t)}:function(t){if(f(t))return!0;if(!t)return!1;if("function"!=typeof t&&"object"!=typeof t)return!1;if(l)return s(t);if(a(t))return!1;var e=c.call(t);return!("[object Function]"!==e&&"[object GeneratorFunction]"!==e&&!/^\[object HTML/.test(e))&&s(t)}},8184:(t,e,r)=>{"use strict";var n,o=Object.prototype.toString,i=Function.prototype.toString,a=/^\s*(?:function)?\*/,s=r(9092)(),c=Object.getPrototypeOf;t.exports=function(t){if("function"!=typeof t)return!1;if(a.test(i.call(t)))return!0;if(!s)return"[object GeneratorFunction]"===o.call(t);if(!c)return!1;if(void 0===n){var e=function(){if(!s)return!1;try{return Function("return function*() {}")()}catch(t){}}();n=!!e&&c(e)}return c(t)===n}},3003:t=>{"use strict";t.exports=function(t){return t!=t}},4133:(t,e,r)=>{"use strict";var n=r(487),o=r(8452),i=r(3003),a=r(6642),s=r(2464),c=n(a(),Number);o(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},6642:(t,e,r)=>{"use strict";var n=r(3003);t.exports=function(){return Number.isNaN&&Number.isNaN(NaN)&&!Number.isNaN("a")?Number.isNaN:n}},2464:(t,e,r)=>{"use strict";var n=r(8452),o=r(6642);t.exports=function(){var t=o();return n(Number,{isNaN:t},{isNaN:function(){return Number.isNaN!==t}}),t}},5680:(t,e,r)=>{"use strict";var n=r(5767);t.exports=function(t){return!!n(t)}},9211:t=>{"use strict";var e=function(t){return t!=t};t.exports=function(t,r){return 0===t&&0===r?1/t==1/r:t===r||!(!e(t)||!e(r))}},7653:(t,e,r)=>{"use strict";var n=r(8452),o=r(487),i=r(9211),a=r(9394),s=r(6576),c=o(a(),Object);n(c,{getPolyfill:a,implementation:i,shim:s}),t.exports=c},9394:(t,e,r)=>{"use strict";var n=r(9211);t.exports=function(){return"function"==typeof Object.is?Object.is:n}},6576:(t,e,r)=>{"use strict";var n=r(9394),o=r(8452);t.exports=function(){var t=n();return o(Object,{is:t},{is:function(){return Object.is!==t}}),t}},8875:(t,e,r)=>{"use strict";var n;if(!Object.keys){var o=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=r(1093),s=Object.prototype.propertyIsEnumerable,c=!s.call({toString:null},"toString"),l=s.call((function(){}),"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(t){var e=t.constructor;return e&&e.prototype===t},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&o.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{f(window[t])}catch(t){return!0}}catch(t){return!0}return!1}();n=function(t){var e=null!==t&&"object"==typeof t,r="[object Function]"===i.call(t),n=a(t),s=e&&"[object String]"===i.call(t),p=[];if(!e&&!r&&!n)throw new TypeError("Object.keys called on a non-object");var g=l&&r;if(s&&t.length>0&&!o.call(t,0))for(var d=0;d<t.length;++d)p.push(String(d));if(n&&t.length>0)for(var m=0;m<t.length;++m)p.push(String(m));else for(var h in t)g&&"prototype"===h||!o.call(t,h)||p.push(String(h));if(c)for(var v=function(t){if("undefined"==typeof window||!y)return f(t);try{return f(t)}catch(t){return!1}}(t),b=0;b<u.length;++b)v&&"constructor"===u[b]||!o.call(t,u[b])||p.push(u[b]);return p}}t.exports=n},1189:(t,e,r)=>{"use strict";var n=Array.prototype.slice,o=r(1093),i=Object.keys,a=i?function(t){return i(t)}:r(8875),s=Object.keys;a.shim=function(){if(Object.keys){var t=function(){var t=Object.keys(arguments);return t&&t.length===arguments.length}(1,2);t||(Object.keys=function(t){return o(t)?s(n.call(t)):s(t)})}else Object.keys=a;return Object.keys||a},t.exports=a},1093:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){var r=e.call(t),n="[object Arguments]"===r;return n||(n="[object Array]"!==r&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===e.call(t.callee)),n}},8403:(t,e,r)=>{"use strict";var n=r(1189),o=r(1333)(),i=r(8075),a=Object,s=i("Array.prototype.push"),c=i("Object.prototype.propertyIsEnumerable"),l=o?Object.getOwnPropertySymbols:null;t.exports=function(t,e){if(null==t)throw new TypeError("target must be an object");var r=a(t);if(1===arguments.length)return r;for(var i=1;i<arguments.length;++i){var u=a(arguments[i]),f=n(u),p=o&&(Object.getOwnPropertySymbols||l);if(p)for(var y=p(u),g=0;g<y.length;++g){var d=y[g];c(u,d)&&s(f,d)}for(var m=0;m<f.length;++m){var h=f[m];if(c(u,h)){var v=u[h];r[h]=v}}}return r}},1514:(t,e,r)=>{"use strict";var n=r(8403);t.exports=function(){return Object.assign?function(){if(!Object.assign)return!1;for(var t="abcdefghijklmnopqrst",e=t.split(""),r={},n=0;n<e.length;++n)r[e[n]]=e[n];var o=Object.assign({},r),i="";for(var a in o)i+=a;return t!==i}()||function(){if(!Object.assign||!Object.preventExtensions)return!1;var t=Object.preventExtensions({1:2});try{Object.assign(t,"xy")}catch(e){return"y"===t[1]}return!1}()?n:Object.assign:n}},6578:t=>{"use strict";t.exports=["Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array"]},5606:t=>{var e,r,n=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(t){if(e===setTimeout)return setTimeout(t,0);if((e===o||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(r){try{return e.call(null,t,0)}catch(r){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:o}catch(t){e=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(t){r=i}}();var s,c=[],l=!1,u=-1;function f(){l&&s&&(l=!1,s.length?c=s.concat(c):u=-1,c.length&&p())}function p(){if(!l){var t=a(f);l=!0;for(var e=c.length;e;){for(s=c,c=[];++u<e;)s&&s[u].run();u=-1,e=c.length}s=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{return r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function g(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new y(t,e)),1!==c.length||l||a(p)},y.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=g,n.addListener=g,n.once=g,n.off=g,n.removeListener=g,n.removeAllListeners=g,n.emit=g,n.prependListener=g,n.prependOnceListener=g,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},6897:(t,e,r)=>{"use strict";var n=r(453),o=r(41),i=r(592)(),a=r(5795),s=r(9675),c=n("%Math.floor%");t.exports=function(t,e){if("function"!=typeof t)throw new s("`fn` is not a function");if("number"!=typeof e||e<0||e>4294967295||c(e)!==e)throw new s("`length` must be a positive 32-bit integer");var r=arguments.length>2&&!!arguments[2],n=!0,l=!0;if("length"in t&&a){var u=a(t,"length");u&&!u.configurable&&(n=!1),u&&!u.writable&&(l=!1)}return(n||l||!r)&&(i?o(t,"length",e,!0,!0):o(t,"length",e)),t}},5722:(t,e,r)=>{"use strict";r.d(e,{ae:()=>w});var n=r(4148),o=r.n(n),i=r(6815),a=function(t,e,r,n,o,i){function a(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var s,c=n.kind,l="getter"===c?"get":"setter"===c?"set":"value",u=!e&&t?n.static?t:t.prototype:null,f=e||(u?Object.getOwnPropertyDescriptor(u,n.name):{}),p=!1,y=r.length-1;y>=0;y--){var g={};for(var d in n)g[d]="access"===d?{}:n[d];for(var d in n.access)g.access[d]=n.access[d];g.addInitializer=function(t){if(p)throw new TypeError("Cannot add initializers after decoration has completed");i.push(a(t||null))};var m=(0,r[y])("accessor"===c?{get:f.get,set:f.set}:f[l],g);if("accessor"===c){if(void 0===m)continue;if(null===m||"object"!=typeof m)throw new TypeError("Object expected");(s=a(m.get))&&(f.get=s),(s=a(m.set))&&(f.set=s),(s=a(m.init))&&o.unshift(s)}else(s=a(m))&&("field"===c?o.unshift(s):f[l]=s)}u&&Object.defineProperty(u,n.name,f),p=!0},s=function(t,e,r){for(var n=arguments.length>2,o=0;o<e.length;o++)r=n?e[o].call(t,r):e[o].call(t);return n?r:void 0},c=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))},l=function(t,e,r){return"symbol"==typeof e&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(t,"name",{configurable:!0,value:r?"".concat(r," ",e):e})};const u={Assignment:"assignment",Discussion:"discussion_topic",Quiz:"quiz",Attachment:"attachment","External Tool":"external_tool",File:"file",Page:"wiki_page"};function f(t){console.log("form",t);let e=new FormData;for(let r in t)p(e,r,t[r]);if(document){const t=document.querySelector("input[name='authenticity_token']"),r=t?t.value:null;r&&e.append("authenticity_token",r)}for(let t of e.entries())console.log(t[0],t[1]);return e}function p(t,e,r){if(Array.isArray(r))for(let n of r)p(t,`${e}[]`,n);else if("object"==typeof r)for(let n in r){const o=r[n];p(t,e.length>0?`${e}[${n}]`:n,o)}else t.append(e,r.toString())}function y(t){const e=/(week|module) (\d+)/i;let r=t.name.match(e),n=r?Number(r[1]):null;if(!n)for(let r of t.items){if(!r.hasOwnProperty("title"))continue;let t=r.title.match(e);t&&(n=t[2])}return n}function g(t,e=null){return c(this,void 0,void 0,(function*(){return yield d(`/api/v1/${t}`,e)}))}function d(t,e=null){return c(this,void 0,void 0,(function*(){var r;(null==e?void 0:e.queryParams)&&(t+="?"+(r=e.queryParams,new URLSearchParams(r))),t.includes("undefined")&&console.log(t);let n=yield fetch(t,null==e?void 0:e.fetchInit),i=yield n.json();if("object"==typeof i&&!Array.isArray(i)){let t=Array.from(Object.values(i));t&&(i=t.find((t=>Array.isArray(t))))}o()(Array.isArray(i));let a="!";for(;0!==a.length&&n&&n.headers.has("Link")&&n.ok;){const t=n.headers.get("Link");o()(t);const r=t.split(",").find((t=>t.includes("next")));if(r){a=r.split(";")[0].split("<")[1].split(">")[0],n=yield fetch(a,null==e?void 0:e.fetchInit);let t=yield n.json();if("object"==typeof t&&!Array.isArray(i)){let e=Array.from(Object.values(i));e&&(t=null==e?void 0:e.find((t=>Array.isArray(t))))}i=i.concat(t)}else a=""}return i}))}function m(t,e=null){var r;return c(this,void 0,void 0,(function*(){(null==e?void 0:e.queryParams)&&(t+="?"+new URLSearchParams(e.queryParams)),null!=e||(e={}),document||(null!==(r=e.fetchInit)&&void 0!==r||(e.fetchInit={}),e.fetchInit.headers=[]);const n=yield fetch(t,e.fetchInit);return yield n.json()}))}function h(t,e=null){return c(this,void 0,void 0,(function*(){return t=`/api/v1/${t}`,yield m(t,e)}))}function v(t,e=null){return c(this,void 0,void 0,(function*(){let r=yield h(t,e);return Array.isArray(r)?r[0]:r}))}class b{constructor(t){this.accountId=null,this.canvasData=t||{}}getClass(){return this.constructor}toString(){return JSON.stringify(this.canvasData)}getItem(t){return this.canvasData[t]||null}get myClass(){return this.constructor}get nameKey(){return o()(this.myClass.nameProperty),this.myClass.nameProperty}get contentUrlPath(){const t=this.constructor;return o()("number"==typeof this.accountId),o()("string"==typeof t.contentUrlTemplate),t.contentUrlTemplate.replace("{content_id}",this.id.toString()).replace("{account_id}",this.accountId.toString())}get htmlContentUrl(){return`/${this.contentUrlPath}`}get rawData(){const t={id:NaN};for(let e in this.canvasData)t[e]=this.canvasData[e];return t}get data(){return this.canvasData}static getDataById(t,e=null,r=null){return c(this,void 0,void 0,(function*(){let n=this.getUrlPathFromIds(t,e?e.id:null);const i=yield h(n,r);return o()(!Array.isArray(i)),i}))}static getById(t,e){return c(this,void 0,void 0,(function*(){return new this(yield this.getDataById(t,e))}))}static getUrlPathFromIds(t,e){o()("string"==typeof this.contentUrlTemplate);let r=this.contentUrlTemplate.replace("{content_id}",t.toString());return e&&(r=r.replace("{course_id}",e.toString())),r}static getAllUrl(t=null,e=null){o()("string"==typeof this.allContentUrlTemplate);let r=this.allContentUrlTemplate;return t&&(r=r.replace("{course_id}",t.toString())),e&&(r=r.replace("{account_id}",e.toString())),r}static getAll(t=null){return c(this,void 0,void 0,(function*(){let e=this.getAllUrl();return(yield g(e,t)).map((t=>new this(t)))}))}get id(){const t=this.canvasData[this.constructor.idProperty];return parseInt(t)}get name(){let t=this.getClass().nameProperty;return o()(t),this.getItem(t)}saveData(t){return c(this,void 0,void 0,(function*(){return o()(this.contentUrlPath),yield h(this.contentUrlPath,{fetchInit:{method:"PUT",body:f(t)}})}))}delete(){return c(this,void 0,void 0,(function*(){return o()(this.contentUrlPath),yield h(this.contentUrlPath,{fetchInit:{method:"DELETE"}})}))}}b.idProperty="id",b.nameProperty=null,b.contentUrlTemplate=null,b.allContentUrlTemplate=null;class A extends b{static getFromUrl(t=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI);let e=/accounts\/(\d+)/.exec(t);return e?(console.log(e),yield this.getById(parseInt(e[1]))):null}))}static getById(t,e=void 0){return c(this,void 0,void 0,(function*(){const r=yield this.getDataById(t,null,e);return console.assert(),new A(r)}))}static getRootAccount(t=!1){return c(this,void 0,void 0,(function*(){let e=yield this.getAll();if(!t&&this.hasOwnProperty("account")&&this.account)return this.account;let r=e.find((t=>null===t.rootAccountId));return o()(r),this.account=r,r}))}get rootAccountId(){return this.canvasData.root_account_id}}A.nameProperty="name",A.contentUrlTemplate="accounts/{content_id}",A.allContentUrlTemplate="accounts";class w extends b{constructor(){super(...arguments),this._modules=void 0,this.modulesByWeekNumber=void 0}static getFromUrl(t=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI);let e=/courses\/(\d+)/.exec(t);if(e){console.log(e);const r=this.getIdFromUrl(t);return r?yield this.getById(r):null}return null}))}static getIdFromUrl(t){let e=/courses\/(\d+)/.exec(t);return e?parseInt(e[1]):null}static stringIsCourseCode(t){return this.CODE_REGEX.exec(t)}static getContentClassFromUrl(t=null){t||(t=document.documentURI);for(let e of this.contentClasses)if(console.log(e,e.contentUrlPart),e.contentUrlPart&&t.includes(e.contentUrlPart))return e;return null}static getById(t,e=void 0){return c(this,void 0,void 0,(function*(){const r=yield v(`courses/${t}`,e);return new w(r)}))}static getCoursesByString(t,e=null,r={}){return c(this,void 0,void 0,(function*(){let n=null;const o=yield w.getAccountIdsByName();for(let i in o){let a=`accounts/${o[i]}/courses`;if(r.queryParams=r.queryParams||{},r.queryParams.search_term=t,null!==e&&(r.queryParams.enrollment_term_id=e.id),n=yield g(a,r),n&&n.length>0)break}return n&&0!==n.length?(n.length>1&&n.sort(((t,e)=>e.id-t.id)),n.map((t=>new w(t)))):null}))}static getAllByCode(t,e=null,r=void 0){return c(this,void 0,void 0,(function*(){return this.getCoursesByString(t,e,r)}))}static getByCode(t,e=null,r=void 0){return c(this,void 0,void 0,(function*(){const n=yield this.getCoursesByString(t,e,r);return Array.isArray(n)?n[0]:null}))}static getAccountIdsByName(){return c(this,void 0,void 0,(function*(){let t=yield w.getFromUrl();return t?{root:t.canvasData.root_account_id,current:t.canvasData.accountId}:(console.warn("You must be on a canvas page to get accounts"),{})}))}get contentUrlPath(){return`courses/${this.id}`}get courseUrl(){return this.htmlContentUrl}get courseCode(){let t=this.codeMatch;return t?`${t[1]||""}_${t[2]||""}`:null}get fullCourseCode(){return this.canvasData.course_code}get codeMatch(){return w.CODE_REGEX.exec(this.canvasData.course_code)}get baseCode(){let t=this.codeMatch;return t?t[2]:""}get termId(){return this.canvasData.enrollment_term_id}getTerm(){return c(this,void 0,void 0,(function*(){return this.termId?_.getTermById(this.termId):null}))}get codePrefix(){let t=this.codeMatch;return t?t[1]:""}get isBlueprint(){return"blueprint"in this.canvasData&&this.canvasData.blueprint}get isPublished(){return"available"===this.canvasData.workflow_state}getModules(){return c(this,void 0,void 0,(function*(){if(this._modules)return this._modules;let t=yield g(`${this.contentUrlPath}/modules?include[]=items&include[]=content_details`);return this._modules=t,t}))}getContentItemFromUrl(t=null){return c(this,void 0,void 0,(function*(){let e=w.getContentClassFromUrl(t);return e?e.getFromUrl(t):null}))}getModulesByWeekNumber(){return c(this,void 0,void 0,(function*(){if(this.modulesByWeekNumber)return this.modulesByWeekNumber;let t=yield this.getModules(),e={};for(let r of t){let t=y(r);t&&(e[t]=r)}return this.modulesByWeekNumber=e,e}))}getModuleItemLinks(t,e){return c(this,void 0,void 0,(function*(){o()(e.hasOwnProperty("type"));let r,n,i=e.type,a=e.hasOwnProperty("search")?e.search:null,s=isNaN(e.index)?null:e.index;if("number"==typeof t){let e=yield this.getModulesByWeekNumber();o()(e.hasOwnProperty(t)),r=t,n=e[r]}else n=t,r=y(n);const c=[];if(n&&void 0!==i)if("Page"===i&&a)(yield this.getPages({queryParams:{search_term:a}})).forEach((t=>c.push(t.htmlContentUrl)));else if(i){s&&"Discussion"===i&&1===r&&s++;const t=n.items.filter((t=>t.type===i));if(s&&t.length>=s){const e=t[s-1];c.push(e.html_url)}else if(!s)for(let e of t)c.push(e.html_url)}return c}))}getSyllabus(){return c(this,void 0,void 0,(function*(){if(!("syllabus_body"in this.canvasData)){const t=yield w.getById(this.id,{"include[]":"syllabus_body"});this.canvasData.syllabus_body=t.canvasData.syllabus_body}return this.canvasData.syllabus_body}))}getAssignments(t={queryParams:{include:["due_at"]}}){return c(this,void 0,void 0,(function*(){return yield j.getAllInCourse(this,t)}))}getQuizzes(t={include:["due_at"]}){return c(this,void 0,void 0,(function*(){return yield S.getAllInCourse(this,{queryParams:t})}))}getAssociatedCourses(){return c(this,void 0,void 0,(function*(){if(!this.isBlueprint)return null;const t=`courses/${this.id}/blueprint_templates/default/associated_courses`;return(yield g(t,{queryParams:{per_page:50}})).map((t=>new w(t)))}))}getSubsections(){return c(this,void 0,void 0,(function*(){const t=`/api/v1/courses/${this.id}/sections`;return yield h(t)}))}getTabs(){return c(this,void 0,void 0,(function*(){return yield h(`courses/${this.id}/tabs`)}))}getFrontPage(){return c(this,void 0,void 0,(function*(){try{const t=yield v(`${this.contentUrlPath}/front_page`);return new O(t,this)}catch(t){return null}}))}getTab(t){return this.canvasData.tabs.find((e=>e.label===t))||null}setNavigationTabHidden(t,e){return c(this,void 0,void 0,(function*(){const r=this.getTab(t);return r?yield h(`courses/${this.id}/tabs/${r.id}`,{queryParams:{hidden:e}}):null}))}changeSyllabus(t){return c(this,void 0,void 0,(function*(){return this.canvasData.syllabus_body=t,yield h(`courses/${this.id}`,{fetchInit:{method:"PUT",body:JSON.stringify({"course[syllabus_body]":t})}})}))}getPotentialSections(t){return c(this,void 0,void 0,(function*(){return yield w.getAllByCode(this.baseCode,t)}))}lockBlueprint(){return c(this,void 0,void 0,(function*(){const t=yield this.getModules();let e=[];e=e.concat(...t.map((t=>[].concat(...t.items))));const r=e.map((t=>c(this,void 0,void 0,(function*(){const e=`${this.contentUrlPath}/blueprint_templates/default/restrict_item`;let{type:r,id:n}=yield function(t){return c(this,void 0,void 0,(function*(){let e,r;return o()(u.hasOwnProperty(t.type),"Unexpected type "+t.type),r=u[t.type],"wiki_page"===r?(o()(t.url),e=(yield m(t.url)).page_id):e=t.content_id,{type:r,id:e}}))}(t),i={content_type:r,content_id:n,restricted:!0,_method:"PUT"};console.log(i),yield h(e,{fetchInit:{method:"PUT",body:f(i)}})}))));yield Promise.all(r)}))}setAsBlueprint(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;this.canvasData=yield v(t,{fetchInit:{method:"PUT",body:JSON.stringify({"course[blueprint]":!0,"course[use_blueprint_restrictions_by_object_type]":0,"course[blueprint_restrictions][content]":1,"course[blueprint_restrictions][points]":1,"course[blueprint_restrictions][due_dates]":1,"course[blueprint_restrictions][availability_dates]":1})}}),this.resetCache()}))}unsetAsBlueprint(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;this.canvasData=yield v(t,{fetchInit:{method:"PUT",body:JSON.stringify({"course[blueprint]":!1})}}),this.resetCache()}))}resetCache(){}publish(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`,e=yield v(t,{fetchInit:{method:"PUT",body:JSON.stringify({offer:!0})}});console.log(e),this.canvasData=e,this.resetCache()}))}unpublish(){return c(this,void 0,void 0,(function*(){const t=`courses/${this.id}`;yield h(t,{fetchInit:{method:"PUT",body:JSON.stringify({"course[event]":"claim"})}}),this.canvasData=(yield w.getById(this.id)).rawData}))}contentUpdatesAndFixes(t=null){return c(this,void 0,void 0,(function*(){throw new T}))}reset(t=!0){return c(this,void 0,void 0,(function*(){if(t&&!confirm(`Are you sure you want to reset ${this.courseCode}?`))return!1;const e=`/courses/${this.id}/reset_content`,r=yield v(e,{fetchInit:{method:"POST"}});return this.canvasData.id=r.id,!1}))}importDevCourse(t=!1,e){return c(this,void 0,void 0,(function*(){const r=yield this.getParentCourse();if(!r)throw new k(`DEV not found for ${this.name}.`);t&&!(yield t(r,this))||(yield this.importCourse(r,e))}))}importCourse(t,e){return c(this,void 0,void 0,(function*(){throw new T}))}getParentCourse(t=!1){return c(this,void 0,void 0,(function*(){let e=yield g(`courses/${this.id}/content_migrations`);if(e.length<1)return console.log("no migrations found"),t?w.getByCode("DEV_"+this.baseCode):null;e.sort(((t,e)=>e.id-t.id));try{for(let t of e){let e=yield w.getById(t.settings.source_course_id);if("DEV"===e.codePrefix)return e}}catch(t){return yield w.getByCode("DEV_"+this.baseCode)}}))}generateHomeTiles(){return c(this,void 0,void 0,(function*(){const t=yield this.getModules(),e=[];for(let r of t)e.push(this.generateHomeTile(r));yield Promise.all(e)}))}generateHomeTile(t){return c(this,void 0,void 0,(function*(){let e=t.items.find((t=>"Page"===t.type&&t.title.toLowerCase().includes("overview")));if(!(null==e?void 0:e.url))return;o()(e.url);const r=e.url.replace(/https:\/\/.*api\/v1/,"/api/v1"),n=yield m(r),a=new O(n,this),s=document.createElement("html");s.innerHTML=a.body;let l=s.querySelector(".cbt-banner-image img");o()(l,"Page has no banner"),yield function(t){return c(this,void 0,void 0,(function*(){yield i.runtime.sendMessage("downloadFile",t)}))}({method:"GET",url:l.src})}))}uploadFile(t,e){return c(this,void 0,void 0,(function*(){let r=`/api/v1/courses/${this.id}/files`;t.name;const n={name:t.name,no_redirect:!0,parent_folder:e,on_duplicate:"overwrite"};let i=yield fetch(r,{body:f(n),method:"POST"});o()(i.ok,yield i.json());const a=(yield i.json()).upload_params,s=f(a);s.append("file",t),i=yield fetch(a.url,{body:s}),o()(i.ok,yield i.text())}))}static registerContentClass(t){this.contentClasses.push(t)}getPages(t=null){return O.getAllInCourse(this,t)}}w.CODE_REGEX=/^(.+[^_])?_?(\w{4}\d{3})/i,w.contentClasses=[];class x extends b{constructor(t,e){super(t),this._course=e}static get contentUrlPart(){o()(this.allContentUrlTemplate,"Not a content url template");const t=/\/([\w_]+)$/.exec(this.allContentUrlTemplate);return console.log(this.allContentUrlTemplate,t),t?t[1]:null}static get contentUrlRegex(){o()(this.contentUrlTemplate,`Class ${this.toString()} does not have a content url property`);let t=this.contentUrlTemplate.replace(/\{[^}]+\}/,"(d+)");return new RegExp(t)}static getIdFromUrl(t){o()(this.contentUrlTemplate);let e=/courses\/(\d+)/.exec(t);return e?parseInt(e[1]):null}static getAllInCourse(t,e=null){return c(this,void 0,void 0,(function*(){let r=this.getAllUrl(t.id);return(yield g(r,e)).map((e=>new this(e,t)))}))}static clearAddedContentTags(t){let e=t.replace(/<\/?link[^>]*>/g,"");return e=e.replace(/<\/?script[^>]*>/g,""),e}static getFromUrl(t=null,e=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI),t=t.replace(/\.com/,".com/api/v1");let r=yield m(t);return e||(e=yield w.getFromUrl())?Array.isArray(r)?null:(o()(!Array.isArray(r)),r?new this(r,e):null):null}))}get bodyKey(){return this.myClass.bodyProperty}get body(){return this.bodyKey?this.myClass.clearAddedContentTags(this.canvasData[this.bodyKey]):null}get dueAt(){return this.canvasData.hasOwnProperty("due_at")?new Date(this.canvasData.due_at):null}setDueAt(t){return c(this,void 0,void 0,(function*(){throw new T}))}dueAtTimeDelta(t){return c(this,void 0,void 0,(function*(){if(!this.dueAt)return null;let e=new Date(this.dueAt);return e.setDate(e.getDate()+t),yield this.setDueAt(e)}))}get contentUrlPath(){let t=this.constructor.contentUrlTemplate;return o()(t),t=t.replace("{course_id}",this.course.id.toString()),t=t.replace("{content_id}",this.id.toString()),t}get course(){return this._course}updateContent(t=null,e=null){return c(this,void 0,void 0,(function*(){const r={},n=this.constructor;o()(n.bodyProperty),o()(n.nameProperty);const i=n.nameProperty,a=n.bodyProperty;return t&&a&&(this.canvasData[a]=t,r[a]=t),e&&i&&(this.canvasData[i]=e,r[i]=e),this.saveData(r)}))}getMeInAnotherCourse(t){return c(this,void 0,void 0,(function*(){let e=this.constructor;return(yield e.getAllInCourse(t,{queryParams:{search_term:this.name}})).find((t=>t.name==this.name))}))}getAllLinks(){const t=this.bodyAsElement.querySelectorAll("a"),e=[];for(let r of t)e.push(r.href);return e}get bodyAsElement(){o()(this.body,"This content item has no body property");let t=document.createElement("div");return t.innerHTML=this.body,t}}(()=>{let t,e,r=[I],n=[],o=x;e=class extends o{},l(e,"Discussion"),(()=>{var i;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(i=o[Symbol.metadata])&&void 0!==i?i:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.nameProperty="title",e.bodyProperty="message",e.contentUrlTemplate="courses/{course_id}/discussion_topics/{content_id}",e.allContentUrlTemplate="courses/{course_id}/discussion_topics",s(e,n)})();let j=(()=>{let t,e,r=[I],n=[],o=x;return e=class extends o{setDueAt(t){return c(this,void 0,void 0,(function*(){let e=yield this.saveData({"assignment[due_at]":t.toISOString()});return this.canvasData.due_at=t.toISOString(),e}))}},l(e,"Assignment"),(()=>{var i;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(i=o[Symbol.metadata])&&void 0!==i?i:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.nameProperty="name",e.bodyProperty="description",e.contentUrlTemplate="courses/{course_id}/assignments/{content_id}",e.allContentUrlTemplate="courses/{course_id}/assignments",s(e,n),e})(),S=(()=>{let t,e,r=[I],n=[],o=x;return e=class extends o{setDueAt(t){return c(this,void 0,void 0,(function*(){let e=yield this.saveData({"quiz[due_at]":t.toISOString()});return this.canvasData.due_at=t.toISOString(),e}))}},l(e,"Quiz"),(()=>{var i;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(i=o[Symbol.metadata])&&void 0!==i?i:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.nameProperty="title",e.bodyProperty="description",e.contentUrlTemplate="courses/{course_id}/quizzes/{content_id}",e.allContentUrlTemplate="courses/{course_id}/quizzes",s(e,n),e})(),O=(()=>{let t,e,r=[I],n=[],i=x;return e=class extends i{static getFromUrl(t=null,e=null){return c(this,void 0,void 0,(function*(){null===t&&(t=document.documentURI),t=t.replace(/\.com/,".com/api/v1");let r=yield m(t);return e||(e=yield w.getFromUrl())?Array.isArray(r)?null:(o()(!Array.isArray(r)),r?new this(r,e):null):null}))}getRevisions(){return c(this,void 0,void 0,(function*(){return d(`${this.contentUrlPath}/revisions`)}))}revertLastChangeSet(t=1){return c(this,void 0,void 0,(function*(){let e=yield this.getRevisions();if(e.sort(((t,e)=>e.revision_id-t.revision_id)),e.length<=t)return console.warn(`Tried to revert ${this.name} but there isn't a previous revision`),null;let r=e[t];yield this.applyRevision(r)}))}resetContent(t=1){return c(this,void 0,void 0,(function*(){let e=(yield this.getRevisions()).find((e=>e.revision_id===t));if(!e)throw new Error(`No revision found for ${t}`);yield this.applyRevision(e)}))}applyRevision(t){return c(this,void 0,void 0,(function*(){const e=t.revision_id;let r=yield v(`${this.contentUrlPath}/revisions/${e}?revision_id=${e}`);this.canvasData[this.bodyKey]=r.body,this.canvasData[this.nameKey]=r.title}))}get body(){return this.canvasData[this.bodyKey]}updateContent(t=null,e=null){return c(this,void 0,void 0,(function*(){let r={};return t&&(this.canvasData[this.bodyKey]=t,r["wiki_page[body]"]=t),e&&(this.canvasData[this.nameKey]=e,r[this.nameKey]=e),this.saveData(r)}))}},l(e,"Page"),(()=>{var o;const s="function"==typeof Symbol&&Symbol.metadata?Object.create(null!==(o=i[Symbol.metadata])&&void 0!==o?o:null):void 0;a(null,t={value:e},r,{kind:"class",name:e.name,metadata:s},null,n),e=t.value,s&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:s})})(),e.idProperty="page_id",e.nameProperty="title",e.bodyProperty="body",e.contentUrlTemplate="courses/{course_id}/pages/{content_id}",e.allContentUrlTemplate="courses/{course_id}/pages",s(e,n),e})();class P extends x{associations(t=!1){return c(this,void 0,void 0,(function*(){if("associations"in this.canvasData&&!t)return this.canvasData.associations;let e=(yield this.myClass.getDataById(this.id,this.course,{params:{include:["associations"]}})).associations.map((t=>new E(t,this.course)));return this.canvasData.associations=e,e}))}}P.nameProperty="title",P.contentUrlTemplate="courses/{course_id}/rubrics/{content_id}",P.allContentUrlTemplate="courses/{course_id}/rubrics";class E extends x{get useForGrading(){return this.canvasData.use_for_grading}setUseForGrading(t){return c(this,void 0,void 0,(function*(){return this.canvasData.use_for_grading=t,yield this.saveData({"rubric_association[use_for_grading]":t})}))}}E.contentUrlTemplate="courses/{course_id}/rubric_associations/{content_id}",E.allContentUrlTemplate="courses/{course_id}/rubric_associations";class _ extends b{get code(){return this.canvasData.name}static getTerm(t,e="all",r=void 0){return c(this,void 0,void 0,(function*(){const n=yield this.searchTerms(t,e,r);return!Array.isArray(n)||n.length<=0?null:n[0]}))}static getTermById(t,e=null){return c(this,void 0,void 0,(function*(){let e=`accounts/${(yield A.getRootAccount()).id}/terms/${t}`,r=yield h(e);return r?new _(r):null}))}static getAllActiveTerms(t=null){return c(this,void 0,void 0,(function*(){return yield this.searchTerms(null,"active",t)}))}static searchTerms(t=null,e="all",r=null){return c(this,void 0,void 0,(function*(){(r=r||{}).queryParams=r.queryParams||{};let n=r.queryParams;e&&(n.workflow_state=e),t&&(n.term_name=t);let i=yield A.getRootAccount();o()(i);let a=`accounts/${i.id}/terms`;const s=yield g(a,r);let c=[];for(let t of s)if(t.hasOwnProperty("enrollment_terms"))for(let e of t.enrollment_terms)c.push(e);else c.push(t);return console.log(c),c&&0!==c.length?c.map((t=>new _(t))):null}))}get startDate(){return new Date(this.data.start_at)}get endDate(){return new Date(this.data.end_at)}}class T extends Error{}class k extends Error{}function I(t,e){w.registerContentClass(t)}},1135:t=>{t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},9032:(t,e,r)=>{"use strict";var n=r(7244),o=r(8184),i=r(5767),a=r(5680);function s(t){return t.call.bind(t)}var c="undefined"!=typeof BigInt,l="undefined"!=typeof Symbol,u=s(Object.prototype.toString),f=s(Number.prototype.valueOf),p=s(String.prototype.valueOf),y=s(Boolean.prototype.valueOf);if(c)var g=s(BigInt.prototype.valueOf);if(l)var d=s(Symbol.prototype.valueOf);function m(t,e){if("object"!=typeof t)return!1;try{return e(t),!0}catch(t){return!1}}function h(t){return"[object Map]"===u(t)}function v(t){return"[object Set]"===u(t)}function b(t){return"[object WeakMap]"===u(t)}function A(t){return"[object WeakSet]"===u(t)}function w(t){return"[object ArrayBuffer]"===u(t)}function x(t){return"undefined"!=typeof ArrayBuffer&&(w.working?w(t):t instanceof ArrayBuffer)}function j(t){return"[object DataView]"===u(t)}function S(t){return"undefined"!=typeof DataView&&(j.working?j(t):t instanceof DataView)}e.isArgumentsObject=n,e.isGeneratorFunction=o,e.isTypedArray=a,e.isPromise=function(t){return"undefined"!=typeof Promise&&t instanceof Promise||null!==t&&"object"==typeof t&&"function"==typeof t.then&&"function"==typeof t.catch},e.isArrayBufferView=function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):a(t)||S(t)},e.isUint8Array=function(t){return"Uint8Array"===i(t)},e.isUint8ClampedArray=function(t){return"Uint8ClampedArray"===i(t)},e.isUint16Array=function(t){return"Uint16Array"===i(t)},e.isUint32Array=function(t){return"Uint32Array"===i(t)},e.isInt8Array=function(t){return"Int8Array"===i(t)},e.isInt16Array=function(t){return"Int16Array"===i(t)},e.isInt32Array=function(t){return"Int32Array"===i(t)},e.isFloat32Array=function(t){return"Float32Array"===i(t)},e.isFloat64Array=function(t){return"Float64Array"===i(t)},e.isBigInt64Array=function(t){return"BigInt64Array"===i(t)},e.isBigUint64Array=function(t){return"BigUint64Array"===i(t)},h.working="undefined"!=typeof Map&&h(new Map),e.isMap=function(t){return"undefined"!=typeof Map&&(h.working?h(t):t instanceof Map)},v.working="undefined"!=typeof Set&&v(new Set),e.isSet=function(t){return"undefined"!=typeof Set&&(v.working?v(t):t instanceof Set)},b.working="undefined"!=typeof WeakMap&&b(new WeakMap),e.isWeakMap=function(t){return"undefined"!=typeof WeakMap&&(b.working?b(t):t instanceof WeakMap)},A.working="undefined"!=typeof WeakSet&&A(new WeakSet),e.isWeakSet=function(t){return A(t)},w.working="undefined"!=typeof ArrayBuffer&&w(new ArrayBuffer),e.isArrayBuffer=x,j.working="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView&&j(new DataView(new ArrayBuffer(1),0,1)),e.isDataView=S;var O="undefined"!=typeof SharedArrayBuffer?SharedArrayBuffer:void 0;function P(t){return"[object SharedArrayBuffer]"===u(t)}function E(t){return void 0!==O&&(void 0===P.working&&(P.working=P(new O)),P.working?P(t):t instanceof O)}function _(t){return m(t,f)}function T(t){return m(t,p)}function k(t){return m(t,y)}function I(t){return c&&m(t,g)}function U(t){return l&&m(t,d)}e.isSharedArrayBuffer=E,e.isAsyncFunction=function(t){return"[object AsyncFunction]"===u(t)},e.isMapIterator=function(t){return"[object Map Iterator]"===u(t)},e.isSetIterator=function(t){return"[object Set Iterator]"===u(t)},e.isGeneratorObject=function(t){return"[object Generator]"===u(t)},e.isWebAssemblyCompiledModule=function(t){return"[object WebAssembly.Module]"===u(t)},e.isNumberObject=_,e.isStringObject=T,e.isBooleanObject=k,e.isBigIntObject=I,e.isSymbolObject=U,e.isBoxedPrimitive=function(t){return _(t)||T(t)||k(t)||I(t)||U(t)},e.isAnyArrayBuffer=function(t){return"undefined"!=typeof Uint8Array&&(x(t)||E(t))},["isProxy","isExternal","isModuleNamespaceObject"].forEach((function(t){Object.defineProperty(e,t,{enumerable:!1,value:function(){throw new Error(t+" is not supported in userland")}})}))},537:(t,e,r)=>{var n=r(5606),o=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),r={},n=0;n<e.length;n++)r[e[n]]=Object.getOwnPropertyDescriptor(t,e[n]);return r},i=/%[sdj%]/g;e.format=function(t){if(!b(t)){for(var e=[],r=0;r<arguments.length;r++)e.push(l(arguments[r]));return e.join(" ")}r=1;for(var n=arguments,o=n.length,a=String(t).replace(i,(function(t){if("%%"===t)return"%";if(r>=o)return t;switch(t){case"%s":return String(n[r++]);case"%d":return Number(n[r++]);case"%j":try{return JSON.stringify(n[r++])}catch(t){return"[Circular]"}default:return t}})),s=n[r];r<o;s=n[++r])h(s)||!x(s)?a+=" "+s:a+=" "+l(s);return a},e.deprecate=function(t,r){if(void 0!==n&&!0===n.noDeprecation)return t;if(void 0===n)return function(){return e.deprecate(t,r).apply(this,arguments)};var o=!1;return function(){if(!o){if(n.throwDeprecation)throw new Error(r);n.traceDeprecation?console.trace(r):console.error(r),o=!0}return t.apply(this,arguments)}};var a={},s=/^$/;if(n.env.NODE_DEBUG){var c=n.env.NODE_DEBUG;c=c.replace(/[|\\{}()[\]^$+?.]/g,"\\$&").replace(/\*/g,".*").replace(/,/g,"$|^").toUpperCase(),s=new RegExp("^"+c+"$","i")}function l(t,r){var n={seen:[],stylize:f};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),m(r)?n.showHidden=r:r&&e._extend(n,r),A(n.showHidden)&&(n.showHidden=!1),A(n.depth)&&(n.depth=2),A(n.colors)&&(n.colors=!1),A(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=u),p(n,t,n.depth)}function u(t,e){var r=l.styles[e];return r?"["+l.colors[r][0]+"m"+t+"["+l.colors[r][1]+"m":t}function f(t,e){return t}function p(t,r,n){if(t.customInspect&&r&&O(r.inspect)&&r.inspect!==e.inspect&&(!r.constructor||r.constructor.prototype!==r)){var o=r.inspect(n,t);return b(o)||(o=p(t,o,n)),o}var i=function(t,e){if(A(e))return t.stylize("undefined","undefined");if(b(e)){var r="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(r,"string")}return v(e)?t.stylize(""+e,"number"):m(e)?t.stylize(""+e,"boolean"):h(e)?t.stylize("null","null"):void 0}(t,r);if(i)return i;var a=Object.keys(r),s=function(t){var e={};return t.forEach((function(t,r){e[t]=!0})),e}(a);if(t.showHidden&&(a=Object.getOwnPropertyNames(r)),S(r)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return y(r);if(0===a.length){if(O(r)){var c=r.name?": "+r.name:"";return t.stylize("[Function"+c+"]","special")}if(w(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(j(r))return t.stylize(Date.prototype.toString.call(r),"date");if(S(r))return y(r)}var l,u="",f=!1,x=["{","}"];return d(r)&&(f=!0,x=["[","]"]),O(r)&&(u=" [Function"+(r.name?": "+r.name:"")+"]"),w(r)&&(u=" "+RegExp.prototype.toString.call(r)),j(r)&&(u=" "+Date.prototype.toUTCString.call(r)),S(r)&&(u=" "+y(r)),0!==a.length||f&&0!=r.length?n<0?w(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special"):(t.seen.push(r),l=f?function(t,e,r,n,o){for(var i=[],a=0,s=e.length;a<s;++a)T(e,String(a))?i.push(g(t,e,r,n,String(a),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(g(t,e,r,n,o,!0))})),i}(t,r,n,s,a):a.map((function(e){return g(t,r,n,s,e,f)})),t.seen.pop(),function(t,e,r){return t.reduce((function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60?r[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+r[1]:r[0]+e+" "+t.join(", ")+" "+r[1]}(l,u,x)):x[0]+u+x[1]}function y(t){return"["+Error.prototype.toString.call(t)+"]"}function g(t,e,r,n,o,i){var a,s,c;if((c=Object.getOwnPropertyDescriptor(e,o)||{value:e[o]}).get?s=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(s=t.stylize("[Setter]","special")),T(n,o)||(a="["+o+"]"),s||(t.seen.indexOf(c.value)<0?(s=h(r)?p(t,c.value,null):p(t,c.value,r-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(t){return"  "+t})).join("\n").slice(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),A(a)){if(i&&o.match(/^\d+$/))return s;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.slice(1,-1),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function d(t){return Array.isArray(t)}function m(t){return"boolean"==typeof t}function h(t){return null===t}function v(t){return"number"==typeof t}function b(t){return"string"==typeof t}function A(t){return void 0===t}function w(t){return x(t)&&"[object RegExp]"===P(t)}function x(t){return"object"==typeof t&&null!==t}function j(t){return x(t)&&"[object Date]"===P(t)}function S(t){return x(t)&&("[object Error]"===P(t)||t instanceof Error)}function O(t){return"function"==typeof t}function P(t){return Object.prototype.toString.call(t)}function E(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(t){if(t=t.toUpperCase(),!a[t])if(s.test(t)){var r=n.pid;a[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else a[t]=function(){};return a[t]},e.inspect=l,l.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},l.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.types=r(9032),e.isArray=d,e.isBoolean=m,e.isNull=h,e.isNullOrUndefined=function(t){return null==t},e.isNumber=v,e.isString=b,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=A,e.isRegExp=w,e.types.isRegExp=w,e.isObject=x,e.isDate=j,e.types.isDate=j,e.isError=S,e.types.isNativeError=S,e.isFunction=O,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=r(1135);var _=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,r;console.log("%s - %s",(r=[E((t=new Date).getHours()),E(t.getMinutes()),E(t.getSeconds())].join(":"),[t.getDate(),_[t.getMonth()],r].join(" ")),e.format.apply(e,arguments))},e.inherits=r(6698),e._extend=function(t,e){if(!e||!x(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var k="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function I(t,e){if(!t){var r=new Error("Promise was rejected with a falsy value");r.reason=t,t=r}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(k&&t[k]){var e;if("function"!=typeof(e=t[k]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,k,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),o=[],i=0;i<arguments.length;i++)o.push(arguments[i]);o.push((function(t,n){t?r(t):e(n)}));try{t.apply(this,o)}catch(t){r(t)}return n}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),k&&Object.defineProperty(e,k,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,o(t))},e.promisify.custom=k,e.callbackify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');function e(){for(var e=[],r=0;r<arguments.length;r++)e.push(arguments[r]);var o=e.pop();if("function"!=typeof o)throw new TypeError("The last argument must be of type Function");var i=this,a=function(){return o.apply(i,arguments)};t.apply(this,e).then((function(t){n.nextTick(a.bind(null,null,t))}),(function(t){n.nextTick(I.bind(null,t,a))}))}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),Object.defineProperties(e,o(t)),e}},6815:function(t,e){var r,n;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,r=function(t){"use strict";if(!globalThis.chrome?.runtime?.id)throw new Error("This script should only be loaded in a browser extension.");if(void 0===globalThis.browser||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const e="The message port closed before a response was received.",r=t=>{const r={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(0===Object.keys(r).length)throw new Error("api-metadata.json has not been included in browser-polyfill");class n extends WeakMap{constructor(t,e=void 0){super(e),this.createItem=t}get(t){return this.has(t)||this.set(t,this.createItem(t)),super.get(t)}}const o=(e,r)=>(...n)=>{t.runtime.lastError?e.reject(new Error(t.runtime.lastError.message)):r.singleCallbackArg||n.length<=1&&!1!==r.singleCallbackArg?e.resolve(n[0]):e.resolve(n)},i=t=>1==t?"argument":"arguments",a=(t,e,r)=>new Proxy(e,{apply:(e,n,o)=>r.call(n,t,...o)});let s=Function.call.bind(Object.prototype.hasOwnProperty);const c=(t,e={},r={})=>{let n=Object.create(null),l={has:(e,r)=>r in t||r in n,get(l,u,f){if(u in n)return n[u];if(!(u in t))return;let p=t[u];if("function"==typeof p)if("function"==typeof e[u])p=a(t,t[u],e[u]);else if(s(r,u)){let e=((t,e)=>function(r,...n){if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((i,a)=>{if(e.fallbackToNoCallback)try{r[t](...n,o({resolve:i,reject:a},e))}catch(o){console.warn(`${t} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,o),r[t](...n),e.fallbackToNoCallback=!1,e.noCallback=!0,i()}else e.noCallback?(r[t](...n),i()):r[t](...n,o({resolve:i,reject:a},e))}))})(u,r[u]);p=a(t,t[u],e)}else p=p.bind(t);else if("object"==typeof p&&null!==p&&(s(e,u)||s(r,u)))p=c(p,e[u],r[u]);else{if(!s(r,"*"))return Object.defineProperty(n,u,{configurable:!0,enumerable:!0,get:()=>t[u],set(e){t[u]=e}}),p;p=c(p,e[u],r["*"])}return n[u]=p,p},set:(e,r,o,i)=>(r in n?n[r]=o:t[r]=o,!0),defineProperty:(t,e,r)=>Reflect.defineProperty(n,e,r),deleteProperty:(t,e)=>Reflect.deleteProperty(n,e)},u=Object.create(t);return new Proxy(u,l)},l=t=>({addListener(e,r,...n){e.addListener(t.get(r),...n)},hasListener:(e,r)=>e.hasListener(t.get(r)),removeListener(e,r){e.removeListener(t.get(r))}}),u=new n((t=>"function"!=typeof t?t:function(e){const r=c(e,{},{getContent:{minArgs:0,maxArgs:0}});t(r)})),f=new n((t=>"function"!=typeof t?t:function(e,r,n){let o,i,a=!1,s=new Promise((t=>{o=function(e){a=!0,t(e)}}));try{i=t(e,r,o)}catch(t){i=Promise.reject(t)}const c=!0!==i&&((l=i)&&"object"==typeof l&&"function"==typeof l.then);var l;if(!0!==i&&!c&&!a)return!1;return(c?i:s).then((t=>{n(t)}),(t=>{let e;e=t&&(t instanceof Error||"string"==typeof t.message)?t.message:"An unexpected error occurred",n({__mozWebExtensionPolyfillReject__:!0,message:e})})).catch((t=>{console.error("Failed to send onMessage rejected reply",t)})),!0})),p=({reject:r,resolve:n},o)=>{t.runtime.lastError?t.runtime.lastError.message===e?n():r(new Error(t.runtime.lastError.message)):o&&o.__mozWebExtensionPolyfillReject__?r(new Error(o.message)):n(o)},y=(t,e,r,...n)=>{if(n.length<e.minArgs)throw new Error(`Expected at least ${e.minArgs} ${i(e.minArgs)} for ${t}(), got ${n.length}`);if(n.length>e.maxArgs)throw new Error(`Expected at most ${e.maxArgs} ${i(e.maxArgs)} for ${t}(), got ${n.length}`);return new Promise(((t,e)=>{const o=p.bind(null,{resolve:t,reject:e});n.push(o),r.sendMessage(...n)}))},g={devtools:{network:{onRequestFinished:l(u)}},runtime:{onMessage:l(f),onMessageExternal:l(f),sendMessage:y.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:y.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},d={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return r.privacy={network:{"*":d},services:{"*":d},websites:{"*":d}},c(t,g,r)};t.exports=r(chrome)}else t.exports=globalThis.browser},void 0===(n=r.apply(e,[t]))||(t.exports=n)},5767:(t,e,r)=>{"use strict";var n=r(2682),o=r(9209),i=r(487),a=r(8075),s=r(5795),c=a("Object.prototype.toString"),l=r(9092)(),u="undefined"==typeof globalThis?r.g:globalThis,f=o(),p=a("String.prototype.slice"),y=Object.getPrototypeOf,g=a("Array.prototype.indexOf",!0)||function(t,e){for(var r=0;r<t.length;r+=1)if(t[r]===e)return r;return-1},d={__proto__:null};n(f,l&&s&&y?function(t){var e=new u[t];if(Symbol.toStringTag in e){var r=y(e),n=s(r,Symbol.toStringTag);if(!n){var o=y(r);n=s(o,Symbol.toStringTag)}d["$"+t]=i(n.get)}}:function(t){var e=new u[t],r=e.slice||e.set;r&&(d["$"+t]=i(r))}),t.exports=function(t){if(!t||"object"!=typeof t)return!1;if(!l){var e=p(c(t),8,-1);return g(f,e)>-1?e:"Object"===e&&function(t){var e=!1;return n(d,(function(r,n){if(!e)try{r(t),e=p(n,1)}catch(t){}})),e}(t)}return s?function(t){var e=!1;return n(d,(function(r,n){if(!e)try{"$"+r(t)===n&&(e=p(n,1))}catch(t){}})),e}(t):null}},9209:(t,e,r)=>{"use strict";var n=r(6578),o="undefined"==typeof globalThis?r.g:globalThis;t.exports=function(){for(var t=[],e=0;e<n.length;e++)"function"==typeof o[n[e]]&&(t[t.length]=n[e]);return t}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t=r(5722),e=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))};function n(t,r){return e(this,void 0,void 0,(function*(){if(!window)return;let e=yield t.getContentItemFromUrl(),n=(Array.isArray(r)?r:[r]).map((t=>({course:t,contentItemPromise:null==e?void 0:e.getMeInAnotherCourse(t)})));for(let{course:e,contentItemPromise:r}of n){let n=yield r;if(n)window.open(n.htmlContentUrl);else{let r=document.URL.replace(t.id.toString(),e.id.toString());window.open(r)}}}))}function o(t,r,o=null){return e(this,void 0,void 0,(function*(){const i=null!=o?o:r;let a=document.createElement("btn");a.classList.add("btn"),a.innerHTML="Sections",a.title="Open all sections associated with the current BP for this course.";const s=yield r.getAssociatedCourses();s&&(t.append(a),a.addEventListener("click",(()=>e(this,void 0,void 0,(function*(){return yield n(i,s)})))))}))}e(void 0,void 0,void 0,(function*(){const r=yield t.ae.getFromUrl(document.documentURI),i=t.ae.getContentClassFromUrl(),a=yield null==i?void 0:i.getFromUrl();if(console.log(i,a),!r)return;let s,c=document.querySelector(".right-of-crumbs");c&&(r.isBlueprint?(yield function(t,r){return e(this,void 0,void 0,(function*(){const o=yield r.getParentCourse();if(o){let i=document.createElement("btn");i.classList.add("btn"),i.innerHTML="DEV",i.title="Open the dev version of this course",null==t||t.append(i),i.addEventListener("click",(()=>e(this,void 0,void 0,(function*(){return yield n(r,o)}))))}}))}(c,r),yield o(c,r)):(s=yield t.ae.getByCode(`BP_${r.baseCode}`),s&&(yield function(t,r,o){return e(this,void 0,void 0,(function*(){let i=document.createElement("btn");i.classList.add("btn"),i.innerHTML="BP",i.title="Open the blueprint version of this course",t.append(i),i.addEventListener("click",(()=>e(this,void 0,void 0,(function*(){return yield n(o,r)}))))}))}(c,s,r),yield o(c,s,r))),a&&(yield function(t,r){return e(this,void 0,void 0,(function*(){let e=document.createElement("btn");e.classList.add("btn"),e.innerHTML="Links",e.title="Open all links in the content of this page into their own tabs.",t.append(e),r&&e.addEventListener("click",(()=>function(t){const e=new Set(t.getAllLinks());for(let t of e)window.open(t,"_blank")}(r)))}))}(c,a)))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,